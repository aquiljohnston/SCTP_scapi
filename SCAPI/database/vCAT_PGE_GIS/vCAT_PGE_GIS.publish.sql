/*
Deployment script for vcat_pge_gis_dev

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "vcat_pge_gis_dev"
:setvar DefaultFilePrefix "vcat_pge_gis_dev"
:setvar DefaultDataPath "C:\Users\jason\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\jason\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[ActivityTb]...';


GO
CREATE TABLE [dbo].[ActivityTb] (
    [ActivityID]                              INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [ActivityUID]                             VARCHAR (100)      NULL,
    [ActivityProjectID]                       INT                NULL,
    [ActivitySourceID]                        VARCHAR (100)      NULL,
    [ActivityCreatedUserUID]                  VARCHAR (100)      NULL,
    [ActivityModifiedUserUID]                 VARCHAR (100)      NULL,
    [ActivitySrvDTLT]                         DATETIME           NULL,
    [ActivitySrvDTLTOffset]                   DATETIMEOFFSET (7) NULL,
    [ActivitySrcDTLT]                         DATETIME           NULL,
    [ActivityGPSType]                         VARCHAR (100)      NULL,
    [ActivityGPSSentence]                     VARCHAR (400)      NULL,
    [ActivityLatitude]                        FLOAT (53)         NULL,
    [ActivityLongitude]                       FLOAT (53)         NULL,
    [ActivityShape]                           [sys].[geography]  NULL,
    [ActivityComments]                        VARCHAR (500)      NULL,
    [ActivityType]                            VARCHAR (200)      NULL,
    [ActivityBatteryLevel]                    FLOAT (53)         NULL,
    [ActivityStartTime]                       DATETIME           NULL,
    [ActivityEndTime]                         DATETIME           NULL,
    [ActivityElapsedSec]                      INT                NULL,
    [ActivityTitle]                           VARCHAR (100)      NULL,
    [ActivityBillingCode]                     VARCHAR (50)       NULL,
    [ActivityCode]                            INT                NULL,
    [ActivityPayCode]                         INT                NULL,
    [ActivityArchiveFlag]                     BIT                NULL,
    [ActivityCreateDate]                      DATETIME           NULL,
    [ActivityModifiedDate]                    DATETIME           NULL,
    [ActivityRevisionComments]                VARCHAR (500)      NULL,
    [ActivityGPSSource]                       VARCHAR (20)       NULL,
    [ActivityGPSTime]                         VARCHAR (10)       NULL,
    [ActivityFixQuality]                      INT                NULL,
    [ActivityNumberOfSatellites]              INT                NULL,
    [ActivityHDOP]                            FLOAT (53)         NULL,
    [ActivityAltitudemetersAboveMeanSeaLevel] FLOAT (53)         NULL,
    [ActivityHeightofGeoid]                   FLOAT (53)         NULL,
    [ActivityTimeSecondsSinceLastDGPS]        FLOAT (53)         NULL,
    [ActivityChecksumData]                    VARCHAR (10)       NULL,
    [ActivityBearing]                         FLOAT (53)         NULL,
    [ActivitySpeed]                           FLOAT (53)         NULL,
    [ActivityGPSStatus]                       VARCHAR (20)       NULL,
    [ActivityNumberOfGPSAttempts]             INT                NULL,
    CONSTRAINT [PK_Activitytb] PRIMARY KEY CLUSTERED ([ActivityID] ASC)
);


GO
PRINT N'Creating [dbo].[auth_assignment]...';


GO
CREATE TABLE [dbo].[auth_assignment] (
    [item_name]  VARCHAR (64) NOT NULL,
    [user_id]    VARCHAR (64) NOT NULL,
    [created_at] INT          NULL,
    PRIMARY KEY CLUSTERED ([item_name] ASC, [user_id] ASC)
);


GO
PRINT N'Creating [dbo].[auth_item]...';


GO
CREATE TABLE [dbo].[auth_item] (
    [name]        VARCHAR (64) NOT NULL,
    [type]        INT          NOT NULL,
    [description] TEXT         NULL,
    [rule_name]   VARCHAR (64) NULL,
    [data]        TEXT         NULL,
    [created_at]  INT          NULL,
    [updated_at]  INT          NULL,
    PRIMARY KEY CLUSTERED ([name] ASC)
);


GO
PRINT N'Creating [dbo].[auth_item_child]...';


GO
CREATE TABLE [dbo].[auth_item_child] (
    [parent] VARCHAR (64) NOT NULL,
    [child]  VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([parent] ASC, [child] ASC)
);


GO
PRINT N'Creating [dbo].[auth_rule]...';


GO
CREATE TABLE [dbo].[auth_rule] (
    [name]       VARCHAR (64) NOT NULL,
    [data]       TEXT         NULL,
    [created_at] INT          NULL,
    [updated_at] INT          NULL,
    PRIMARY KEY CLUSTERED ([name] ASC)
);


GO
PRINT N'Creating [dbo].[BreadcrumbTb]...';


GO
CREATE TABLE [dbo].[BreadcrumbTb] (
    [BreadcrumbID]              INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [BreadcrumbUID]             VARCHAR (100)      NOT NULL,
    [BreadcrumbActivityUID]     VARCHAR (100)      NULL,
    [BreadcrumbProjectID]       INT                NOT NULL,
    [BreadcrumbSourceID]        VARCHAR (100)      NULL,
    [BreadcrumbCreatedUserUID]  VARCHAR (100)      NOT NULL,
    [BreadcrumbSrcDTLT]         DATETIME           NOT NULL,
    [BreadcrumbSrvDTLTOffset]   DATETIMEOFFSET (7) NULL,
    [BreadcrumbSrvDTLT]         DATETIME           NULL,
    [BreadcrumbGPSType]         VARCHAR (100)      NULL,
    [BreadcrumbGPSSentence]     VARCHAR (400)      NULL,
    [BreadcrumbLatitude]        FLOAT (53)         NULL,
    [BreadcrumbLongitude]       FLOAT (53)         NULL,
    [BreadcrumbShape]           [sys].[geography]  NULL,
    [BreadcrumbActivityType]    VARCHAR (50)       NULL,
    [BreadcrumbWorkQueueFilter] VARCHAR (200)      NULL,
    [BreadcrumbBatteryLevel]    FLOAT (53)         NULL,
    [BreadcrumbGPSTime]         DATETIME           NULL,
    [BreadcrumbSpeed]           FLOAT (53)         NULL,
    [BreadcrumbHeading]         VARCHAR (50)       NULL,
    [BreadcrumbGPSAccuracy]     VARCHAR (50)       NULL,
    [BreadcrumbSatellites]      INT                NULL,
    [BreadcrumbAltitude]        FLOAT (53)         NULL,
    [BreadcrumbTrackingGroupID] INT                NULL,
    [BreadcrumbMapPlat]         VARCHAR (50)       NULL,
    [BreadcrumbArchiveFlag]     BIT                NULL,
    [BreadcrumbComments]        VARCHAR (500)      NULL,
    [BreadcrumbCreatedDate]     DATETIME           NULL,
    [BreadcrumbDeviceID]        VARCHAR (50)       NULL,
    CONSTRAINT [PK_BreadcrumbsTb] PRIMARY KEY CLUSTERED ([BreadcrumbID] ASC)
);


GO
PRINT N'Creating [dbo].[r_Reports]...';


GO
CREATE TABLE [dbo].[r_Reports] (
    [rReportsID]         INT            NOT NULL,
    [ReportDisplayName]  VARCHAR (50)   NULL,
    [ReportDate]         DATE           NULL,
    [ReportInactiveDate] DATE           NULL,
    [ReportType]         VARCHAR (25)   NULL,
    [ReportSPName]       VARCHAR (100)  NULL,
    [ReportDescription]  VARCHAR (1000) NULL,
    [Parm]               VARCHAR (200)  NULL,
    [ParmInspector]      BIT            NULL,
    [ParmDropDown]       BIT            NULL,
    [ParmDateOverride]   BIT            NULL,
    [ParmBetweenDate]    BIT            NULL,
    [ParmDate]           BIT            NULL,
    [Export]             BIT            NULL,
    [RoleLevel]          INT            NULL,
    [Revision]           INT            NULL,
    [ActiveFlag]         BIT            NULL
);


GO
PRINT N'Creating [dbo].[rDivision]...';


GO
CREATE TABLE [dbo].[rDivision] (
    [rDivisionID]        INT           IDENTITY (1, 1) NOT NULL,
    [DivisionUID]        VARCHAR (100) NULL,
    [ProjectID]          INT           NULL,
    [CreatedUserUID]     VARCHAR (100) NULL,
    [ModifiedUserUID]    VARCHAR (100) NULL,
    [CreatedDateTime]    DATETIME      NULL,
    [ModifiedDateTime]   DATETIME      NULL,
    [Region]             VARCHAR (50)  NULL,
    [Division]           VARCHAR (50)  NULL,
    [DCode2]             VARCHAR (50)  NULL,
    [DCode3]             VARCHAR (50)  NULL,
    [MappingOffice]      VARCHAR (50)  NULL,
    [FunctionalLocation] VARCHAR (100) NULL,
    [Revision]           INT           NULL,
    [ActiveFlag]         BIT           NULL
);


GO
PRINT N'Creating [dbo].[rDropDown]...';


GO
CREATE TABLE [dbo].[rDropDown] (
    [DropDownID]         INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [DropDownUID]        VARCHAR (100)  NULL,
    [ProjectID]          INT            NULL,
    [CreatedUserUID]     VARCHAR (100)  NULL,
    [ModifiedUserUID]    VARCHAR (100)  NULL,
    [CreateDTLT]         DATETIME       NULL,
    [ModifiedDTLT]       DATETIME       NULL,
    [InactiveDTLT]       DATETIME       NULL,
    [Comments]           VARCHAR (2000) NULL,
    [Revision]           INT            NULL,
    [ActiveFlag]         BIT            NULL,
    [DropDownType]       VARCHAR (50)   NULL,
    [FilterName]         VARCHAR (50)   NULL,
    [SortSeq]            INT            NULL,
    [FieldDisplay]       VARCHAR (200)  NULL,
    [FieldDescription]   VARCHAR (200)  NULL,
    [FieldType]          VARCHAR (200)  NULL,
    [FieldValue]         VARCHAR (200)  NULL,
    [DefaultFlag]        BIT            NULL,
    [DefaultType]        VARCHAR (200)  NULL,
    [DefaultValue]       VARCHAR (200)  NULL,
    [BreadcrumbFreq]     INT            NULL,
    [SurveyModeFlag]     BIT            NULL,
    [AdditionalStrData1] VARCHAR (50)   NULL,
    [AdditionalIntData1] INT            NULL,
    [AdditionalStrData2] VARCHAR (50)   NULL,
    [AdditionalIntData2] INT            NULL,
    [OutValueNeededFlag] BIT            NULL,
    [SpecialFlag]        BIT            NULL,
    [OutValue]           VARCHAR (200)  NULL,
    [InValue]            VARCHAR (200)  NULL,
    [AltValue]           VARCHAR (200)  NULL,
    [StartDate]          DATE           NULL,
    [InactiveDate]       DATE           NULL,
    CONSTRAINT [PK_r_DropDowns] PRIMARY KEY CLUSTERED ([DropDownID] ASC)
);


GO
PRINT N'Creating [dbo].[rDropDown_Old]...';


GO
CREATE TABLE [dbo].[rDropDown_Old] (
    [DropDownID]         INT            IDENTITY (1, 1) NOT NULL,
    [DropDownUID]        VARCHAR (100)  NULL,
    [ProjectID]          INT            NULL,
    [CreatedUserUID]     VARCHAR (100)  NULL,
    [ModifiedUserUID]    VARCHAR (100)  NULL,
    [CreateDTLT]         DATETIME       NULL,
    [ModifiedDTLT]       DATETIME       NULL,
    [InactiveDTLT]       DATETIME       NULL,
    [Comments]           VARCHAR (2000) NULL,
    [Revision]           INT            NULL,
    [ActiveFlag]         BIT            NULL,
    [DropDownType]       VARCHAR (50)   NULL,
    [FilterName]         VARCHAR (50)   NULL,
    [SortSeq]            INT            NULL,
    [FieldDisplay]       VARCHAR (200)  NULL,
    [FieldDescription]   VARCHAR (200)  NULL,
    [FieldType]          VARCHAR (200)  NULL,
    [FieldValue]         VARCHAR (200)  NULL,
    [DefaultFlag]        BIT            NULL,
    [DefaultType]        VARCHAR (200)  NULL,
    [DefaultValue]       VARCHAR (200)  NULL,
    [BreadcrumbFreq]     INT            NULL,
    [SurveyModeFlag]     BIT            NULL,
    [AdditionalStrData1] VARCHAR (50)   NULL,
    [AdditionalIntData1] INT            NULL,
    [AdditionalStrData2] VARCHAR (50)   NULL,
    [AdditionalIntData2] INT            NULL
);


GO
PRINT N'Creating [dbo].[rFilter]...';


GO
CREATE TABLE [dbo].[rFilter] (
    [rFilterID]        INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [FilterUID]        VARCHAR (100)  NOT NULL,
    [ProjectID]        INT            NOT NULL,
    [SourceID]         VARCHAR (50)   NOT NULL,
    [CreatedUserUID]   VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]  VARCHAR (100)  NOT NULL,
    [CreateDTLT]       DATETIME       NOT NULL,
    [ModifiedDTLT]     DATETIME       NOT NULL,
    [Comments]         VARCHAR (2000) NULL,
    [RevisionComments] VARCHAR (500)  NULL,
    [Revision]         INT            NOT NULL,
    [ActiveFlag]       BIT            NOT NULL,
    [StatusType]       VARCHAR (200)  NOT NULL,
    [FilterSizeType]   VARCHAR (200)  NULL,
    [FilterMfgType]    VARCHAR (200)  NULL,
    [FilterModelType]  VARCHAR (200)  NULL,
    CONSTRAINT [PK_rFilter] PRIMARY KEY CLUSTERED ([rFilterID] ASC)
);


GO
PRINT N'Creating [dbo].[rFormParameter]...';


GO
CREATE TABLE [dbo].[rFormParameter] (
    [FormParametersID]             INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [FormParameterUID]             VARCHAR (100)  NOT NULL,
    [ProjectID]                    INT            NOT NULL,
    [CreatedUserUID]               VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]              VARCHAR (100)  NOT NULL,
    [CreateDTLT]                   DATETIME       NULL,
    [ModifiedDTLT]                 DATETIME       NULL,
    [InactiveDTLT]                 DATETIME       NULL,
    [Comments]                     VARCHAR (2000) NULL,
    [Revision]                     INT            NOT NULL,
    [ActiveFlag]                   BIT            NOT NULL,
    [FormName]                     VARCHAR (200)  NULL,
    [FormArea]                     INT            NULL,
    [FieldName]                    VARCHAR (100)  NULL,
    [FieldDisplayName]             VARCHAR (100)  NULL,
    [FieldType]                    VARCHAR (200)  NULL,
    [FieldDisplayFormatType]       VARCHAR (200)  NULL,
    [FieldDropDownType]            VARCHAR (200)  NULL,
    [FieldRequiredFlag]            BIT            NULL,
    [FieldConditionalFlag]         BIT            NULL,
    [FieldConditionaSortSeq]       INT            NULL,
    [FieldConditionalBusinessRule] VARCHAR (2000) NULL,
    [FieldActive]                  BIT            NULL,
    CONSTRAINT [PK_r_FormParameters] PRIMARY KEY CLUSTERED ([FormParametersID] ASC)
);


GO
PRINT N'Creating [dbo].[rgMapGridLog]...';


GO
CREATE TABLE [dbo].[rgMapGridLog] (
    [rgMapGridID]         INT              IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [MapGridUID]          VARCHAR (100)    NOT NULL,
    [ProjectID]           INT              NOT NULL,
    [SourceID]            VARCHAR (50)     NOT NULL,
    [CreatedUserUID]      VARCHAR (100)    NOT NULL,
    [ModifiedUserUID]     VARCHAR (100)    NOT NULL,
    [CreateDTLT]          DATETIME         NOT NULL,
    [ModifiedDTLT]        DATETIME         NOT NULL,
    [Comments]            VARCHAR (2000)   NULL,
    [RevisionComments]    VARCHAR (500)    NULL,
    [Revision]            INT              NOT NULL,
    [ActiveFlag]          BIT              NOT NULL,
    [StatusType]          VARCHAR (200)    NOT NULL,
    [SAPObjectID]         VARCHAR (100)    NULL,
    [OfficeCode]          VARCHAR (200)    NULL,
    [FLOC]                VARCHAR (200)    NULL,
    [FuncLocMWC]          VARCHAR (4)      NULL,
    [FuncLocMapBoundary]  VARCHAR (4)      NULL,
    [FuncLocPlatSuffix]   CHAR (1)         NULL,
    [FuncLocMap]          VARCHAR (4)      NULL,
    [FuncLocPlat]         VARCHAR (4)      NULL,
    [FuncLocPlatPrefix]   CHAR (1)         NULL,
    [FuncLocPlatNo]       INT              NULL,
    [CentroidLat]         FLOAT (53)       NULL,
    [CentroidLong]        FLOAT (53)       NULL,
    [TotalVertices]       INT              NULL,
    [MaxDistance]         FLOAT (53)       NULL,
    [GeoBufferWithDrift]  INT              NULL,
    [LastLeakSurvey]      DATETIME         NULL,
    [ScheduledSurvey]     DATETIME         NULL,
    [LeakSurveyFrequency] VARCHAR (50)     NULL,
    [Last6MoSurveyDate1]  DATETIME         NULL,
    [Next6MoSurveyDate1]  DATETIME         NULL,
    [Last6MoSurveyDate2]  DATETIME         NULL,
    [Next6MoSurveyDate2]  DATETIME         NULL,
    [Last1YrSurveyDate]   DATETIME         NULL,
    [Next1YrSurveyDate]   DATETIME         NULL,
    [Last3YrSurveyDate]   DATETIME         NULL,
    [Next3YrSurveyDate]   DATETIME         NULL,
    [ObjectID]            INT              NULL,
    [SHAPE]               [sys].[geometry] NULL,
    CONSTRAINT [PK_rgMapGridLog] PRIMARY KEY CLUSTERED ([rgMapGridID] ASC)
);


GO
PRINT N'Creating [dbo].[rgMapGridLog].[NonClusteredIndex-MapGridUID]...';


GO
CREATE NONCLUSTERED INDEX [NonClusteredIndex-MapGridUID]
    ON [dbo].[rgMapGridLog]([MapGridUID] ASC);


GO
PRINT N'Creating [dbo].[rgMapGridLog_OLD]...';


GO
CREATE TABLE [dbo].[rgMapGridLog_OLD] (
    [rgMapGridID]            INT              IDENTITY (1, 1) NOT NULL,
    [MapGridsUID]            VARCHAR (100)    NOT NULL,
    [ProjectID]              INT              NOT NULL,
    [SourceID]               VARCHAR (50)     NOT NULL,
    [CreatedUserUID]         VARCHAR (100)    NOT NULL,
    [ModifiedUserUID]        VARCHAR (100)    NOT NULL,
    [CreateDTLT]             DATETIME         NOT NULL,
    [ModifiedDTLT]           DATETIME         NOT NULL,
    [Comments]               VARCHAR (2000)   NULL,
    [RevisionComments]       VARCHAR (500)    NULL,
    [Revision]               INT              NOT NULL,
    [ActiveFlag]             BIT              NOT NULL,
    [StatusType]             VARCHAR (200)    NOT NULL,
    [SAPObjectID]            VARCHAR (100)    NULL,
    [Division]               VARCHAR (200)    NULL,
    [District]               VARCHAR (200)    NULL,
    [OfficeCode]             VARCHAR (200)    NULL,
    [WorkCenter]             VARCHAR (200)    NULL,
    [County]                 VARCHAR (200)    NULL,
    [WallMap]                VARCHAR (50)     NULL,
    [MapNumber]              VARCHAR (50)     NULL,
    [PlatNumber]             VARCHAR (50)     NULL,
    [PlatMapNumber]          VARCHAR (50)     NULL,
    [WorkCenterAbbreviation] VARCHAR (4)      NULL,
    [FLOC]                   VARCHAR (200)    NULL,
    [FuncLocMWC]             VARCHAR (4)      NULL,
    [FuncLocMapBoundary]     VARCHAR (4)      NULL,
    [FuncLocPlatSuffix]      CHAR (1)         NULL,
    [FuncLocMap]             VARCHAR (4)      NULL,
    [FuncLocPlat]            VARCHAR (4)      NULL,
    [FuncLocPlatChar1]       CHAR (1)         NULL,
    [FuncLocPlatChar2]       CHAR (1)         NULL,
    [FuncLocPlatChar3]       CHAR (1)         NULL,
    [FuncLocPlatChar4]       CHAR (1)         NULL,
    [CentroidLat]            FLOAT (53)       NULL,
    [CentroidLong]           FLOAT (53)       NULL,
    [TotalVertices]          INT              NULL,
    [MaxDistance]            FLOAT (53)       NULL,
    [GeoBufferWithDrift]     INT              NULL,
    [LastLeakSurvey]         DATETIME         NULL,
    [ScheduledSurvey]        DATETIME         NULL,
    [LeakSurveyFrequency]    VARCHAR (50)     NULL,
    [Last6MoSurveyDate1]     DATETIME         NULL,
    [Next6MoSurveyDate1]     DATETIME         NULL,
    [Last6MoSurveyDate2]     DATETIME         NULL,
    [Next6MoSurveyDate2]     DATETIME         NULL,
    [Last1YrSurveyDate]      DATETIME         NULL,
    [Next1YrSurveyDate]      DATETIME         NULL,
    [Last3YrSurveyDate]      DATETIME         NULL,
    [Next3YrSurveyDate]      DATETIME         NULL,
    [ObjectID]               INT              NULL,
    [SHAPE]                  [sys].[geometry] NULL
);


GO
PRINT N'Creating [dbo].[rgMapGridPipeline]...';


GO
CREATE TABLE [dbo].[rgMapGridPipeline] (
    [FUNCTIONALLOCATION]   NVARCHAR (50)   NULL,
    [WORKCENTER]           NVARCHAR (10)   NULL,
    [OPERATION_AREA]       NVARCHAR (254)  NULL,
    [ROUTE_NAME]           NVARCHAR (254)  NULL,
    [FEATURE_TYPE]         NVARCHAR (561)  NULL,
    [LONG_ROUTE_NAME]      NVARCHAR (254)  NULL,
    [STATION_SERIES_ID]    NUMERIC (38, 8) NULL,
    [BEGIN_STATION]        NUMERIC (38, 8) NULL,
    [END_STATION]          NUMERIC (38, 8) NULL,
    [INSTALL_DATE]         DATETIME2 (7)   NULL,
    [INSTALL_JOB]          NVARCHAR (50)   NULL,
    [MATERIAL]             NVARCHAR (1525) NULL,
    [ROUTE_ID]             NUMERIC (38, 8) NULL,
    [LINE_ID]              NUMERIC (38, 8) NULL,
    [Lat_Begin]            NUMERIC (38, 8) NULL,
    [Long_Begin]           NUMERIC (38, 8) NULL,
    [Lat_End]              NUMERIC (38, 8) NULL,
    [Long_End]             NUMERIC (38, 8) NULL,
    [FID_LeakSurveyGrid]   INT             NULL,
    [MAPNUMBER]            NVARCHAR (10)   NULL,
    [PLATNUMBER]           NVARCHAR (10)   NULL,
    [MAPTYPE]              INT             NULL,
    [DISTRICT]             NVARCHAR (2)    NULL,
    [COUNTY]               NVARCHAR (15)   NULL,
    [PLATMAPNUMBER]        NVARCHAR (50)   NULL,
    [DIVISION]             INT             NULL,
    [LEGACYCOORDSYSWKID]   INT             NULL,
    [MAPNAME]              NVARCHAR (50)   NULL,
    [MAPTEMPLATE]          NVARCHAR (30)   NULL,
    [OFFICECODE]           NVARCHAR (3)    NULL,
    [SAPOBJECTID]          NVARCHAR (50)   NULL,
    [WALLMAP]              NVARCHAR (10)   NULL,
    [LASTLEAKSURVEY]       DATETIME2 (7)   NULL,
    [SCHEDULEDSURVEY]      DATETIME2 (7)   NULL,
    [LEAKSURVEYFREQUENCY]  NVARCHAR (20)   NULL,
    [METNAME]              NVARCHAR (50)   NULL,
    [SAPMAINTENANCESTATUS] NVARCHAR (10)   NULL
);


GO
PRINT N'Creating [dbo].[rGroup]...';


GO
CREATE TABLE [dbo].[rGroup] (
    [rGroupID]         INT           IDENTITY (1, 1) NOT NULL,
    [GroupUID]         VARCHAR (100) NULL,
    [ProjectID]        INT           NULL,
    [CreatedUserUID]   VARCHAR (100) NULL,
    [ModifiedUserUID]  VARCHAR (100) NULL,
    [CreatedDateTime]  DATETIME      NULL,
    [ModifiedDateTime] DATETIME      NULL,
    [Group]            VARCHAR (50)  NULL,
    [Revision]         INT           NULL,
    [ActiveFlag]       BIT           NULL
);


GO
PRINT N'Creating [dbo].[rLightHouseMenu]...';


GO
CREATE TABLE [dbo].[rLightHouseMenu] (
    [LightHouseMenuID]  INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [LightHouseMenuUID] VARCHAR (100)  NULL,
    [ProjectID]         INT            NOT NULL,
    [CreatedUserUID]    VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]   VARCHAR (100)  NOT NULL,
    [CreateDTLT]        DATETIME       NULL,
    [ModifiedDTLT]      DATETIME       NULL,
    [InactiveDTLT]      DATETIME       NULL,
    [Comments]          VARCHAR (2000) NULL,
    [Revision]          INT            NOT NULL,
    [ActiveFlag]        BIT            NOT NULL,
    [MenuName]          VARCHAR (50)   NULL,
    [ParentUID]         VARCHAR (100)  NULL,
    [SortSeq]           INT            NULL,
    [DisplayType]       VARCHAR (50)   NULL,
    [Action]            VARCHAR (200)  NULL,
    CONSTRAINT [PK_r_LightHouseMenus] PRIMARY KEY CLUSTERED ([LightHouseMenuID] ASC)
);


GO
PRINT N'Creating [dbo].[rMeter]...';


GO
CREATE TABLE [dbo].[rMeter] (
    [rMeterID]         INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [MeterUID]         VARCHAR (100)  NOT NULL,
    [ProjectID]        INT            NOT NULL,
    [SourceID]         VARCHAR (50)   NOT NULL,
    [CreatedUserUID]   VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]  VARCHAR (100)  NOT NULL,
    [CreateDTLT]       DATETIME       NOT NULL,
    [ModifiedDTLT]     DATETIME       NOT NULL,
    [Comments]         VARCHAR (2000) NULL,
    [RevisionComments] VARCHAR (500)  NULL,
    [Revision]         INT            NOT NULL,
    [ActiveFlag]       BIT            NOT NULL,
    [StatusType]       VARCHAR (200)  NOT NULL,
    [MeterType]        VARCHAR (200)  NULL,
    [MeterMfgType]     VARCHAR (200)  NULL,
    [MeterModelType]   VARCHAR (200)  NULL,
    CONSTRAINT [PK_rMeter] PRIMARY KEY CLUSTERED ([rMeterID] ASC)
);


GO
PRINT N'Creating [dbo].[rRegulator]...';


GO
CREATE TABLE [dbo].[rRegulator] (
    [rRegulatorID]       INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [RegulatorUID]       VARCHAR (100)  NOT NULL,
    [ProjectID]          INT            NOT NULL,
    [SourceID]           VARCHAR (50)   NOT NULL,
    [CreatedUserUID]     VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]    VARCHAR (100)  NOT NULL,
    [CreateDTLT]         DATETIME       NOT NULL,
    [ModifiedDTLT]       DATETIME       NOT NULL,
    [Comments]           VARCHAR (2000) NULL,
    [RevisionComments]   VARCHAR (500)  NULL,
    [Revision]           INT            NOT NULL,
    [ActiveFlag]         BIT            NOT NULL,
    [StatusType]         VARCHAR (200)  NOT NULL,
    [RegulatorSizeType]  VARCHAR (200)  NULL,
    [RegulatorMfgType]   VARCHAR (200)  NULL,
    [RegulatorModelType] VARCHAR (200)  NULL,
    CONSTRAINT [PK_rRegulator] PRIMARY KEY CLUSTERED ([rRegulatorID] ASC)
);


GO
PRINT N'Creating [dbo].[rReport]...';


GO
CREATE TABLE [dbo].[rReport] (
    [ReportID]             INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [ReportUID]            VARCHAR (100)  NOT NULL,
    [ProjectID]            INT            NOT NULL,
    [CreatedUserUID]       VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]      VARCHAR (100)  NOT NULL,
    [CreateDTLT]           DATETIME       NULL,
    [ModifiedDTLT]         DATETIME       NULL,
    [InactiveDTLT]         DATETIME       NULL,
    [Comments]             VARCHAR (2000) NULL,
    [Revision]             INT            NOT NULL,
    [ActiveFlag]           BIT            NOT NULL,
    [ReportDisplayName]    VARCHAR (100)  NULL,
    [ReportDate]           DATE           NULL,
    [ReportInactiveDate]   DATE           NULL,
    [ReportType]           VARCHAR (200)  NULL,
    [ReportSPName]         VARCHAR (200)  NULL,
    [ReportDescription]    VARCHAR (2000) NULL,
    [ReportSortSeq]        INT            NULL,
    [Parm]                 VARCHAR (500)  NULL,
    [ParmInspectorFlag]    BIT            NULL,
    [ParmDropDownFlag]     BIT            NULL,
    [ParmDateOverrideFlag] BIT            NULL,
    [ParmBetweenDateFlag]  BIT            NULL,
    [ParmDateFlag]         BIT            NULL,
    [ExportFlag]           BIT            NULL,
    CONSTRAINT [PK_r_Reports] PRIMARY KEY CLUSTERED ([ReportID] ASC)
);


GO
PRINT N'Creating [dbo].[rReportingGroup]...';


GO
CREATE TABLE [dbo].[rReportingGroup] (
    [rReportingGroupID] INT           IDENTITY (1, 1) NOT NULL,
    [ReportingGroupUID] VARCHAR (100) NULL,
    [ProjectID]         INT           NULL,
    [CreatedUserUID]    VARCHAR (100) NULL,
    [ModifiedUserUID]   VARCHAR (100) NULL,
    [CreatedDateTime]   DATETIME      NULL,
    [ModifiedDateTime]  DATETIME      NULL,
    [GroupName]         VARCHAR (50)  NULL,
    [Revision]          INT           NULL,
    [ActiveFlag]        BIT           NULL,
    [IsGroupFlag]       BIT           NULL
);


GO
PRINT N'Creating [dbo].[rRole]...';


GO
CREATE TABLE [dbo].[rRole] (
    [rRoleID]         INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [RoleUID]         VARCHAR (100)  NULL,
    [ProjectID]       INT            NULL,
    [CreatedUserUID]  VARCHAR (1100) NULL,
    [ModifiedUserUID] VARCHAR (100)  NULL,
    [CreateDTLT]      DATETIME       NULL,
    [ModifiedDTLT]    DATETIME       NULL,
    [Comments]        VARCHAR (2000) NULL,
    [Revision]        INT            NOT NULL,
    [ActiveFlag]      BIT            NOT NULL,
    [RoleLevelType]   VARCHAR (50)   NULL,
    [RoleName]        VARCHAR (50)   NULL,
    [RoleDescription] VARCHAR (500)  NULL,
    [RoleSortSeq]     SMALLINT       NULL,
    CONSTRAINT [PK_r_Roles] PRIMARY KEY CLUSTERED ([rRoleID] ASC)
);


GO
PRINT N'Creating [dbo].[rUser]...';


GO
CREATE TABLE [dbo].[rUser] (
    [rUserID]           INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [UserUID]           VARCHAR (100)  NULL,
    [ProjectID]         INT            NULL,
    [CreatedUserUID]    VARCHAR (100)  NULL,
    [ModifiedUserUID]   VARCHAR (100)  NULL,
    [CreateDTLT]        DATETIME       NULL,
    [ModifiedDTLT]      DATETIME       NULL,
    [InactiveDTLT]      DATETIME       NULL,
    [Comments]          VARCHAR (2000) NULL,
    [Revision]          INT            NULL,
    [ActiveFlag]        BIT            NULL,
    [UserInActiveFlag]  BIT            NULL,
    [UserLoginID]       VARCHAR (50)   NULL,
    [FirstName]         VARCHAR (50)   NULL,
    [LastName]          VARCHAR (50)   NULL,
    [LANID]             VARCHAR (20)   NULL,
    [Password]          VARCHAR (20)   NULL,
    [EmployeeType]      VARCHAR (200)  NULL,
    [EmployeePhone]     VARCHAR (20)   NULL,
    [CompanyName]       VARCHAR (200)  NULL,
    [CompanyPhone]      VARCHAR (20)   NULL,
    [SupervisorUserUID] VARCHAR (100)  NULL,
    [Salt]              VARCHAR (MAX)  NULL,
    [Hash]              VARCHAR (MAX)  NULL,
    [UserName]          VARCHAR (100)  NULL,
    [UserAppRoleType]   VARCHAR (50)   NULL,
    [UserActiveFlag]    BIT            NULL,
    [UserArchiveFlag]   BIT            NULL,
    [UserCreatedDate]   DATETIME       NULL,
    [UserCreatedBy]     INT            NULL,
    [UserModifiedDate]  DATETIME       NULL,
    [UserModifiedBy]    INT            NULL,
    CONSTRAINT [PK_r_Users] PRIMARY KEY CLUSTERED ([rUserID] ASC)
);


GO
PRINT N'Creating [dbo].[rWorkCenter]...';


GO
CREATE TABLE [dbo].[rWorkCenter] (
    [rWorkCenterID]              INT            IDENTITY (1, 1) NOT NULL,
    [WorkCenterUID]              VARCHAR (100)  NULL,
    [ProjectID]                  INT            NULL,
    [CreatedUserUID]             VARCHAR (100)  NULL,
    [ModifiedUserUID]            VARCHAR (100)  NULL,
    [CreatedDTLT]                DATETIME       NULL,
    [ModifiedDTLT]               DATETIME       NULL,
    [Comments]                   VARCHAR (2000) NULL,
    [RevisionComments]           VARCHAR (500)  NULL,
    [Revision]                   INT            NOT NULL,
    [ActiveFlag]                 BIT            NOT NULL,
    [StatusType]                 VARCHAR (100)  NULL,
    [WorkCenter]                 VARCHAR (50)   NULL,
    [WorkCenterAbbreviation]     VARCHAR (8)    NULL,
    [WorkCenterAbbreviationFLOC] CHAR (4)       NULL,
    [Division]                   VARCHAR (50)   NULL,
    [DivisionCode]               CHAR (2)       NULL,
    [DivisionNo]                 INT            NULL,
    [Region]                     VARCHAR (50)   NULL,
    [Office]                     VARCHAR (50)   NULL,
    [OfficeAbbreviation]         CHAR (3)       NULL,
    [EZTechClientCode]           VARCHAR (10)   NULL,
    CONSTRAINT [PK_rWorkCenter] PRIMARY KEY CLUSTERED ([rWorkCenterID] ASC)
);


GO
PRINT N'Creating [dbo].[rWorkCenter_Old]...';


GO
CREATE TABLE [dbo].[rWorkCenter_Old] (
    [rWorkCenterID]          INT           IDENTITY (1, 1) NOT NULL,
    [WorkCenterUID]          VARCHAR (100) NULL,
    [ProjectID]              INT           NULL,
    [CreatedUserUID]         VARCHAR (100) NULL,
    [ModifiedUserUID]        VARCHAR (100) NULL,
    [CreatedDateTime]        DATETIME      NULL,
    [ModifiedDateTime]       DATETIME      NULL,
    [Region]                 VARCHAR (50)  NULL,
    [Division]               VARCHAR (50)  NULL,
    [DCode2]                 VARCHAR (50)  NULL,
    [DCode3]                 VARCHAR (50)  NULL,
    [WorkCenter]             VARCHAR (50)  NULL,
    [MappingOffice]          VARCHAR (50)  NULL,
    [FunctionalLocation]     VARCHAR (100) NULL,
    [WorkCenterAbbreviation] VARCHAR (10)  NULL,
    [Revision]               INT           NULL,
    [ActiveFlag]             BIT           NULL
);


GO
PRINT N'Creating [dbo].[tAssignedWorkQueue]...';


GO
CREATE TABLE [dbo].[tAssignedWorkQueue] (
    [AssignedWorkQueueID]          INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssignedWorkQueueUID]         VARCHAR (100)      NULL,
    [ProjectID]                    INT                NULL,
    [SourceID]                     VARCHAR (100)      NULL,
    [CreatedUserUID]               VARCHAR (100)      NOT NULL,
    [ModifiedUserUID]              VARCHAR (100)      NOT NULL,
    [SrvCreatedDTLT]               DATETIME           NULL,
    [SrvCreatedDTLTOffset]         DATETIMEOFFSET (7) NULL,
    [SrvModifiedDTLT]              DATETIME           NULL,
    [SrvModifiedDTLTOffset]        DATETIMEOFFSET (7) NULL,
    [Comments]                     VARCHAR (2000)     NULL,
    [RevisionComments]             VARCHAR (500)      NULL,
    [Revision]                     INT                NOT NULL,
    [ActiveFlag]                   BIT                NOT NULL,
    [AssignedInspectionRequestUID] VARCHAR (100)      NULL,
    [AssignedUserUID]              VARCHAR (100)      NULL,
    [AssignedDate]                 DATE               NULL,
    [AcceptedDate]                 DATE               NULL,
    [AcceptedFlag]                 BIT                NULL,
    [LockedFlag]                   BIT                NULL,
    [PendingDeleteFlag]            BIT                NULL,
    [DispatchMethod]               VARCHAR (20)       NULL,
    CONSTRAINT [PK_t_AssignedWorkQueue] PRIMARY KEY CLUSTERED ([AssignedWorkQueueID] ASC)
);


GO
PRINT N'Creating [dbo].[tEquipmentLog]...';


GO
CREATE TABLE [dbo].[tEquipmentLog] (
    [tEquipmentLogID]     INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [EquipmentLogUID]     VARCHAR (100)  NULL,
    [ProjectID]           INT            NULL,
    [SourceID]            VARCHAR (100)  NULL,
    [CreatedUserUID]      VARCHAR (100)  NULL,
    [ModifiedUserUID]     VARCHAR (100)  NULL,
    [CreateDTLT]          DATETIME       NULL,
    [ModifiedDTLT]        DATETIME       NULL,
    [Comments]            VARCHAR (2000) NULL,
    [RevisionComments]    VARCHAR (500)  NULL,
    [Revision]            INT            NULL,
    [ActiveFlag]          BIT            NULL,
    [PrNtfNo]             VARCHAR (50)   NULL,
    [SAPEqID]             VARCHAR (50)   NULL,
    [EqObjType]           VARCHAR (50)   NULL,
    [EqSerNo]             VARCHAR (50)   NULL,
    [MWC]                 VARCHAR (50)   NULL,
    [CalbDate]            DATE           NULL,
    [LastCalbStat]        VARCHAR (50)   NULL,
    [MPRNo]               VARCHAR (50)   NULL,
    [UpdateFlag]          VARCHAR (50)   NULL,
    [FileCount]           INT            NULL,
    [CalbTime]            TIME (7)       NULL,
    [CalbStat]            VARCHAR (50)   NULL,
    [SrvyLanID]           VARCHAR (50)   NULL,
    [SpvrLanID]           VARCHAR (50)   NULL,
    [CalbHrs]             DECIMAL (6, 2) NULL,
    [FirstUsedFlag]       BIT            NULL,
    [DPIRTestOK]          VARCHAR (50)   NULL,
    [DPIRReadPPM]         DECIMAL (6, 2) NULL,
    [DPIRAlrmPPM]         DECIMAL (6, 2) NULL,
    [RMLDTestOk]          VARCHAR (50)   NULL,
    [RMLDLaserCal]        VARCHAR (50)   NULL,
    [RMLDReadPPM]         DECIMAL (6, 2) NULL,
    [RMLDAlrmPPM]         DECIMAL (6, 2) NULL,
    [FPMKReadPPM]         DECIMAL (6, 2) NULL,
    [OMDExmnQty]          DECIMAL (6, 2) NULL,
    [OMDReadPPM]          DECIMAL (6, 2) NULL,
    [SCOPMethod]          VARCHAR (50)   NULL,
    [SCOPStationPass]     VARCHAR (50)   NULL,
    [SCOPTestKit]         VARCHAR (50)   NULL,
    [SCOPPlelRdg]         DECIMAL (6, 2) NULL,
    [SCOPPgasRdg]         DECIMAL (6, 2) NULL,
    [MPRFlag]             BIT            NULL,
    [MPRRptBy]            VARCHAR (50)   NULL,
    [MPRAsgnTo]           VARCHAR (50)   NULL,
    [MPRLoc]              VARCHAR (50)   NULL,
    [MPRRptDate]          DATE           NULL,
    [MPRCat]              VARCHAR (50)   NULL,
    [MPRDftType]          VARCHAR (50)   NULL,
    [MPRDftOthr]          VARCHAR (50)   NULL,
    [MPRMnf]              VARCHAR (50)   NULL,
    [MPRMatType]          VARCHAR (50)   NULL,
    [MPRMatAge]           VARCHAR (50)   NULL,
    [MPRSftyIsu]          VARCHAR (50)   NULL,
    [MPRMatQty]           VARCHAR (50)   NULL,
    [MPRCausePrblm]       VARCHAR (50)   NULL,
    [MPRDesc]             VARCHAR (150)  NULL,
    [SubmittedFlag]       BIT            NULL,
    [SubmittedStatusType] VARCHAR (200)  NULL,
    [SubmittedUserUID]    VARCHAR (100)  NULL,
    [SubmittedDTLT]       DATETIME       NULL,
    CONSTRAINT [PK_tEquipmentLog] PRIMARY KEY CLUSTERED ([tEquipmentLogID] ASC)
);


GO
PRINT N'Creating [dbo].[tEquipmentLog_Old]...';


GO
CREATE TABLE [dbo].[tEquipmentLog_Old] (
    [tEquipmentLogID]                  INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [EquipmentLogUID]                  VARCHAR (100)  NOT NULL,
    [ProjectID]                        INT            NOT NULL,
    [SourceID]                         VARCHAR (100)  NULL,
    [CreatedUserUID]                   VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]                  VARCHAR (100)  NOT NULL,
    [CreateDTLT]                       DATETIME       NULL,
    [ModifiedDTLT]                     DATETIME       NULL,
    [Comments]                         VARCHAR (2000) NULL,
    [RevisionComments]                 VARCHAR (500)  NULL,
    [Revision]                         INT            NOT NULL,
    [ActiveFlag]                       BIT            NOT NULL,
    [SAPPrintFNO]                      VARCHAR (50)   NULL,
    [SAPEquipmentID]                   VARCHAR (100)  NULL,
    [SAPEquipmentType]                 VARCHAR (50)   NULL,
    [SAPEquipmentDescription]          VARCHAR (50)   NULL,
    [SAPSerialNumber]                  VARCHAR (50)   NULL,
    [SAPCalibrationDate]               DATE           NULL,
    [SAPCalibrationTime]               TIME (7)       NULL,
    [SAPEquipmentCalibrationPercent]   FLOAT (53)     NULL,
    [SAPEquipmentCalibrationLowRange]  FLOAT (53)     NULL,
    [SAPEquipmentCalibrationHighRange] FLOAT (53)     NULL,
    [SAPWorkCenter]                    VARCHAR (100)  NULL,
    [SurveyerUserUID]                  VARCHAR (100)  NULL,
    [SupervisorUserUID]                NCHAR (10)     NULL,
    [UsedFlag]                         BIT            NOT NULL,
    [FirstUserUID]                     VARCHAR (100)  NULL,
    [CalibrationLevel]                 VARCHAR (10)   NULL,
    [CalibrationVerificationFlag]      BIT            NULL,
    [MPRFlag]                          BIT            NOT NULL,
    [MPRType]                          VARCHAR (200)  NULL,
    [MPRComments]                      VARCHAR (2000) NULL,
    [SubmittedFlag]                    BIT            NULL,
    [SubmittedStatusType]              VARCHAR (200)  NULL,
    [SubmittedUserUID]                 VARCHAR (100)  NULL,
    [SubmittedDTLT]                    DATETIME       NULL,
    CONSTRAINT [PK_t_Equipment] PRIMARY KEY CLUSTERED ([tEquipmentLogID] ASC)
);


GO
PRINT N'Creating [dbo].[tEquipmentMRP]...';


GO
CREATE TABLE [dbo].[tEquipmentMRP] (
    [EquipmentMRPID]          INT            IDENTITY (1, 1) NOT NULL,
    [EquipmentLogUID]         VARCHAR (100)  NULL,
    [SAPEquipmentType]        VARCHAR (50)   NULL,
    [SAPInstrumentType]       VARBINARY (50) NULL,
    [CreatedUserUID]          VARCHAR (100)  NULL,
    [ModifiedUserUID]         VARCHAR (100)  NULL,
    [CreatedDateTime]         DATETIME       NULL,
    [ModifiedDateTime]        DATETIME       NULL,
    [SourceDateTime]          DATETIME       NULL,
    [Revision]                INT            NULL,
    [ActiveFlag]              BIT            NULL,
    [WorkCenterSupervisorUID] VARCHAR (100)  NULL,
    [Location]                VARCHAR (50)   NULL,
    [CatagoryType]            VARCHAR (200)  NULL,
    [DefectiveType]           VARCHAR (200)  NULL,
    [DefectiveOtherType]      VARCHAR (200)  NULL,
    [Manufacture]             VARCHAR (100)  NULL,
    [ManufactureType]         VARCHAR (200)  NULL,
    [EquipmentAge]            INT            NULL,
    [SafetyIssueType]         VARCHAR (200)  NULL,
    [ManufactureQuanity]      INT            NULL,
    [CauseProblemType]        VARCHAR (200)  NULL,
    [MPRDescription]          VARCHAR (MAX)  NULL,
    [ApprovedFlag]            BIT            NULL,
    [ApprovedByUserUID]       VARCHAR (100)  NULL,
    [ApprovedDateTime]        DATETIME       NULL
);


GO
PRINT N'Creating [dbo].[tgActivity]...';


GO
CREATE TABLE [dbo].[tgActivity] (
    [gActivityID]     INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [ActivityUID]     VARCHAR (100)      NULL,
    [ProjectID]       INT                NULL,
    [SourceID]        VARCHAR (100)      NULL,
    [CreatedUserUID]  VARCHAR (100)      NULL,
    [ModifiedUserUID] VARCHAR (100)      NULL,
    [SrvDTLT]         DATETIME           NULL,
    [SrvDTLTOffset]   DATETIMEOFFSET (7) NULL,
    [SrcDTLT]         DATETIME           NULL,
    [GPSType]         VARCHAR (100)      NULL,
    [GPSSentence]     VARCHAR (400)      NULL,
    [Latitude]        FLOAT (53)         NULL,
    [Longitude]       FLOAT (53)         NULL,
    [SHAPE]           [sys].[geography]  NULL,
    [Comments]        VARCHAR (500)      NULL,
    [ActivityType]    VARCHAR (200)      NULL,
    [BatteryLevel]    FLOAT (53)         NULL,
    [StartDTLT]       DATETIME           NULL,
    [StopDTLT]        DATETIME           NULL,
    [ElapsedSec]      INT                NULL,
    CONSTRAINT [PK_t_Activity] PRIMARY KEY CLUSTERED ([gActivityID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAsset]...';


GO
CREATE TABLE [dbo].[tgAsset] (
    [AssetID]                  INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssetUID]                 VARCHAR (100)      NULL,
    [MapGridUID]               VARCHAR (100)      NULL,
    [ProjectID]                INT                NULL,
    [SourceID]                 VARCHAR (100)      NULL,
    [CreatedUserUID]           VARCHAR (100)      NULL,
    [ModifiedUserUID]          VARCHAR (100)      NULL,
    [SrcDTLT]                  DATETIME           NULL,
    [SrvDTLT]                  DATETIME           NULL,
    [SrvDTLTOffset]            DATETIMEOFFSET (7) NULL,
    [SrcOpenDTLT]              DATETIME           NULL,
    [SrcClosedDTLT]            DATETIME           NULL,
    [GPSType]                  VARCHAR (100)      NULL,
    [GPSSentence]              VARCHAR (400)      NULL,
    [Latitude]                 FLOAT (53)         NULL,
    [Longitude]                FLOAT (53)         NULL,
    [SHAPE]                    [sys].[geography]  NULL,
    [Comments]                 VARCHAR (2000)     NULL,
    [RevisionComments]         VARCHAR (500)      NULL,
    [Revision]                 INT                NULL,
    [ActiveFlag]               BIT                NULL,
    [StatusType]               VARCHAR (100)      NULL,
    [NewAssetFlag]             BIT                NULL,
    [NonAssetLocationFlag]     BIT                NULL,
    [CGEFlag]                  BIT                NULL,
    [AOCFlag]                  BIT                NULL,
    [InspectFlag]              BIT                NULL,
    [LeakIndicationFlag]       BIT                NULL,
    [OtherIndicationFlag]      BIT                NULL,
    [Photo1]                   VARCHAR (250)      NULL,
    [Photo2]                   VARCHAR (250)      NULL,
    [Photo3]                   VARCHAR (250)      NULL,
    [OptionalData1]            VARCHAR (250)      NULL,
    [OptionalData2]            VARCHAR (250)      NULL,
    [OptionalData3]            VARCHAR (250)      NULL,
    [OptionalData4]            VARCHAR (250)      NULL,
    [OptionalData5]            VARCHAR (250)      NULL,
    [OptionalData6]            VARCHAR (250)      NULL,
    [OptionalData7]            VARCHAR (250)      NULL,
    [OptionalData8]            VARCHAR (250)      NULL,
    [OptionalData9]            VARCHAR (250)      NULL,
    [OptionalData10]           VARCHAR (250)      NULL,
    [OptionalData11]           VARCHAR (250)      NULL,
    [OptionalData12]           VARCHAR (250)      NULL,
    [ApprovedFlag]             BIT                NULL,
    [ApprovedByUserUID]        VARCHAR (100)      NULL,
    [ApprovedDTLT]             DATETIME           NULL,
    [SubmittedFlag]            BIT                NULL,
    [SubmittedStatusType]      VARCHAR (200)      NULL,
    [SubmittedUserUID]         VARCHAR (100)      NULL,
    [SubmittedDTLT]            DATETIME           NULL,
    [ResponseStatusType]       VARCHAR (200)      NULL,
    [Response]                 VARCHAR (500)      NULL,
    [ResponceErrorDescription] VARCHAR (500)      NULL,
    [ResponseDTLT]             DATETIME           NULL,
    [CompletedFlag]            BIT                NULL,
    [CompletedDTLT]            DATETIME           NULL,
    CONSTRAINT [PK_g_Assets] PRIMARY KEY CLUSTERED ([AssetID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAssetAddress]...';


GO
CREATE TABLE [dbo].[tgAssetAddress] (
    [AssetAddressID]                  INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssetAddressUID]                 VARCHAR (100)      NULL,
    [AssetUID]                        VARCHAR (100)      NULL,
    [AssetInspectionUID]              VARCHAR (100)      NULL,
    [MapGridUID]                      VARCHAR (100)      NULL,
    [ProjectID]                       INT                NULL,
    [SourceID]                        VARCHAR (100)      NULL,
    [CreatedUserUID]                  VARCHAR (100)      NULL,
    [ModifiedUserUID]                 VARCHAR (100)      NULL,
    [SrcDTLT]                         DATETIME           NULL,
    [SrvDTLT]                         DATETIME           NULL,
    [SrvDTLTOffset]                   DATETIMEOFFSET (7) NULL,
    [GPSType]                         VARCHAR (100)      NULL,
    [GPSSentence]                     VARCHAR (400)      NULL,
    [Latitude]                        FLOAT (53)         NULL,
    [Longitude]                       FLOAT (53)         NULL,
    [SHAPE]                           [sys].[geography]  NULL,
    [Comments]                        VARCHAR (2000)     NULL,
    [RevisionComments]                VARCHAR (500)      NULL,
    [Revision]                        INT                NULL,
    [ActiveFlag]                      BIT                NULL,
    [StatusType]                      VARCHAR (100)      NULL,
    [NewAssetFlag]                    BIT                NULL,
    [NonAssetLocationFlag]            BIT                NULL,
    [AssetAddessCorrectionFlag]       BIT                NULL,
    [AssetIDNumberCorrectionFlag]     BIT                NULL,
    [AssetConfirmFlag]                BIT                NULL,
    [RouteNo]                         VARCHAR (200)      NULL,
    [RouteSeq]                        INT                NULL,
    [SortOrder]                       INT                NULL,
    [AssetAccountNo]                  VARCHAR (100)      NULL,
    [AssetAccountName]                VARCHAR (100)      NULL,
    [AssetName]                       VARCHAR (50)       NULL,
    [AssetLocationID]                 VARCHAR (200)      NULL,
    [AssetLocationCode]               VARCHAR (50)       NULL,
    [AssetIDStatus]                   VARCHAR (50)       NULL,
    [AssetIDNo]                       VARCHAR (50)       NULL,
    [AssetIDNoCorection]              VARCHAR (50)       NULL,
    [ReverseGeoHouseNo]               VARCHAR (50)       NULL,
    [ReverseGeoStreet1]               VARCHAR (100)      NULL,
    [ReverseGeoCity]                  VARCHAR (100)      NULL,
    [ReverseGeoState]                 VARCHAR (2)        NULL,
    [ReverseGeoZip]                   VARCHAR (10)       NULL,
    [ReverseGeoLat]                   FLOAT (53)         NULL,
    [ReverseGeoLong]                  FLOAT (53)         NULL,
    [ReverseGeoQuality]               VARCHAR (250)      NULL,
    [HouseNoNAFlag]                   BIT                NULL,
    [HouseNo]                         VARCHAR (100)      NULL,
    [Street1]                         VARCHAR (100)      NULL,
    [Street2]                         VARCHAR (100)      NULL,
    [AptSuite]                        VARCHAR (20)       NULL,
    [AptDesc]                         VARCHAR (50)       NULL,
    [Apt]                             VARCHAR (50)       NULL,
    [City]                            VARCHAR (50)       NULL,
    [State]                           VARCHAR (2)        NULL,
    [ZIP]                             VARCHAR (10)       NULL,
    [County]                          VARCHAR (255)      NULL,
    [CountyCode]                      VARCHAR (255)      NULL,
    [Photo1]                          VARCHAR (250)      NULL,
    [Photo2]                          VARCHAR (250)      NULL,
    [Photo3]                          VARCHAR (250)      NULL,
    [ApprovedFlag]                    BIT                NULL,
    [ApprovedByUserUID]               VARCHAR (100)      NULL,
    [ApprovedDTLT]                    DATETIME           NULL,
    [SubmittedFlag]                   BIT                NULL,
    [SubmittedStatusType]             VARCHAR (200)      NULL,
    [SubmittedUserUID]                INT                NULL,
    [SubmittedDTLT]                   DATETIME           NULL,
    [ResponseStatusType]              VARCHAR (200)      NULL,
    [Response]                        VARCHAR (500)      NULL,
    [ResponceErrorDescription]        VARCHAR (500)      NULL,
    [ResponseDTLT]                    DATETIME           NULL,
    [CompletedFlag]                   BIT                NULL,
    [CompletedDTLT]                   DATETIME           NULL,
    [GPSSource]                       VARCHAR (20)       NULL,
    [GPSTime]                         VARCHAR (10)       NULL,
    [FixQuality]                      INT                NULL,
    [NumberOfSatellites]              INT                NULL,
    [HDOP]                            FLOAT (53)         NULL,
    [AltitudemetersAboveMeanSeaLevel] FLOAT (53)         NULL,
    [HeightofGeoid]                   FLOAT (53)         NULL,
    [TimeSecondsSinceLastDGPS]        FLOAT (53)         NULL,
    [ChecksumData]                    VARCHAR (10)       NULL,
    [Bearing]                         FLOAT (53)         NULL,
    [Speed]                           FLOAT (53)         NULL,
    [GPSStatus]                       VARCHAR (20)       NULL,
    [NumberOfGPSAttempts]             INT                NULL,
    [AOCFlag]                         BIT                NULL,
    [CGIFlag]                         BIT                NULL,
    [InspectionRequestUID]            VARCHAR (100)      NULL,
    [MasterLeakLogUID]                VARCHAR (100)      NULL,
    [ActivityUID]                     VARCHAR (100)      NULL,
    [SrcOpenDTLT]                     DATETIME           NULL,
    [ReverseGeoLocationString]        VARCHAR (200)      NULL,
    CONSTRAINT [PK_g_AssetAddress] PRIMARY KEY CLUSTERED ([AssetAddressID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAssetAddressAOC]...';


GO
CREATE TABLE [dbo].[tgAssetAddressAOC] (
    [AssetAddressAOCID]               INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssetAddressAOCUID]              VARCHAR (100)      NULL,
    [AssetAddressUID]                 VARCHAR (100)      NULL,
    [AssetInspectionUID]              VARCHAR (100)      NULL,
    [InspectionRequestUID]            VARCHAR (100)      NULL,
    [MapGridUID]                      VARCHAR (100)      NULL,
    [ProjectID]                       INT                NULL,
    [SourceID]                        VARCHAR (10)       NULL,
    [CreatedUserUID]                  VARCHAR (100)      NULL,
    [ModifiedUserUID]                 VARCHAR (100)      NULL,
    [SrcDTLT]                         DATETIME           NULL,
    [SrvDTLT]                         DATETIME           NULL,
    [SrvDTLTOffset]                   DATETIMEOFFSET (7) NULL,
    [SrcOpenDTLT]                     DATETIME           NULL,
    [SrcClosedDTLT]                   DATETIME           NULL,
    [GPSType]                         VARCHAR (100)      NULL,
    [GPSSentence]                     VARCHAR (400)      NULL,
    [Latitude]                        FLOAT (53)         NULL,
    [Longitude]                       FLOAT (53)         NULL,
    [SHAPE]                           [sys].[geography]  NULL,
    [Comments]                        VARCHAR (2000)     NULL,
    [RevisionComments]                VARCHAR (500)      NULL,
    [Revision]                        INT                NULL,
    [ActiveFlag]                      BIT                NULL,
    [StatusType]                      VARCHAR (50)       NULL,
    [AOCType]                         VARCHAR (200)      NULL,
    [AOCReasonType]                   VARCHAR (200)      NULL,
    [AOCOther]                        VARCHAR (200)      NULL,
    [Photo1]                          VARCHAR (250)      NULL,
    [Photo2]                          VARCHAR (250)      NULL,
    [Photo3]                          VARCHAR (250)      NULL,
    [OptionalData1]                   VARCHAR (250)      NULL,
    [OptionalData2]                   VARCHAR (250)      NULL,
    [OptionalData3]                   VARCHAR (250)      NULL,
    [OptionalData4]                   VARCHAR (250)      NULL,
    [OptionalData5]                   VARCHAR (250)      NULL,
    [ApprovedFlag]                    BIT                NULL,
    [ApprovedByUserUID]               VARCHAR (200)      NULL,
    [ApprovedDTLT]                    DATETIME           NULL,
    [SubmittedFlag]                   BIT                NULL,
    [SubmittedStatusType]             VARCHAR (200)      NULL,
    [SubmittedUserUID]                VARCHAR (100)      NULL,
    [SubmittedDTLT]                   DATETIME           NULL,
    [ResponseStatusType]              VARCHAR (200)      NULL,
    [Responsecomments]                VARCHAR (500)      NULL,
    [ResponceErrorComments]           VARCHAR (500)      NULL,
    [ResponseDTLT]                    DATETIME           NULL,
    [CompletedFlag]                   BIT                NULL,
    [CompletedDTLT]                   DATETIME           NULL,
    [DateFound]                       DATETIME           NULL,
    [MeterNumber]                     VARCHAR (50)       NULL,
    [GPSSource]                       VARCHAR (20)       NULL,
    [GPSTime]                         VARCHAR (10)       NULL,
    [FixQuality]                      INT                NULL,
    [NumberOfSatellites]              INT                NULL,
    [HDOP]                            FLOAT (53)         NULL,
    [AltitudemetersAboveMeanSeaLevel] FLOAT (53)         NULL,
    [HeightOfGeoid]                   FLOAT (53)         NULL,
    [TimeSecondsSinceLastDGPS]        FLOAT (53)         NULL,
    [ChecksumData]                    VARCHAR (10)       NULL,
    [Bearing]                         FLOAT (53)         NULL,
    [Speed]                           FLOAT (53)         NULL,
    [GPSStatus]                       VARCHAR (20)       NULL,
    [NumberOfGPSAttempts]             INT                NULL,
    [MasterLeakLogUID]                VARCHAR (100)      NULL,
    [ActivityUID]                     VARCHAR (100)      NULL,
    CONSTRAINT [PK_g_AssetAOCs] PRIMARY KEY CLUSTERED ([AssetAddressAOCID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAssetAddressCGE]...';


GO
CREATE TABLE [dbo].[tgAssetAddressCGE] (
    [AssetAddressCGEID]               INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssetAddressCGEUID]              VARCHAR (100)      NOT NULL,
    [AssetAddressUID]                 VARCHAR (100)      NOT NULL,
    [AssetInspectionUID]              VARCHAR (100)      NULL,
    [MasterLeakLogUID]                VARCHAR (100)      NOT NULL,
    [MapGridUID]                      VARCHAR (100)      NOT NULL,
    [ProjectID]                       INT                NULL,
    [SourceID]                        VARCHAR (100)      NULL,
    [CreatedUserUID]                  VARCHAR (100)      NOT NULL,
    [ModifiedUserUID]                 VARCHAR (100)      NOT NULL,
    [SrcDTLT]                         DATETIME           NULL,
    [SrvDTLT]                         DATETIME           NULL,
    [SrvDTLTOffset]                   DATETIMEOFFSET (7) NULL,
    [SrcOpenDTLT]                     DATETIME           NULL,
    [SrcClosedDTLT]                   DATETIME           NULL,
    [GPSType]                         VARCHAR (100)      NULL,
    [GPSSentence]                     VARCHAR (400)      NULL,
    [Latitude]                        FLOAT (53)         NULL,
    [Longitude]                       FLOAT (53)         NULL,
    [SHAPE]                           [sys].[geography]  NULL,
    [Comments]                        VARCHAR (2000)     NULL,
    [RevisionComments]                VARCHAR (500)      NULL,
    [Revision]                        INT                NULL,
    [ActiveFlag]                      BIT                NULL,
    [StatusType]                      VARCHAR (100)      NULL,
    [CGENIFType]                      VARCHAR (200)      NULL,
    [CGEReasonType]                   VARCHAR (200)      NULL,
    [NIFReasonType]                   VARCHAR (200)      NULL,
    [CGECardFlag]                     BIT                NULL,
    [CGECardNo]                       VARCHAR (100)      NULL,
    [Photo1]                          VARCHAR (250)      NULL,
    [Photo2]                          VARCHAR (250)      NULL,
    [Photo3]                          VARCHAR (250)      NULL,
    [ApprovedFlag]                    BIT                NULL,
    [ApprovedByUserUID]               VARCHAR (100)      NULL,
    [ApprovedDTLT]                    DATETIME           NULL,
    [SubmittedFlag]                   BIT                NULL,
    [SubmittedStatusType]             VARCHAR (200)      NULL,
    [SubmittedUserUID]                VARCHAR (100)      NULL,
    [SubmittedDTLT]                   DATETIME           NULL,
    [ResponseStatusType]              VARCHAR (200)      NULL,
    [Response]                        VARCHAR (500)      NULL,
    [ResponceErrorDescription]        VARCHAR (500)      NULL,
    [ResponseDTLT]                    DATETIME           NULL,
    [CompletedFlag]                   BIT                NULL,
    [CompletedDTLT]                   DATETIME           NULL,
    [GPSSource]                       VARCHAR (20)       NULL,
    [GPSTime]                         VARCHAR (10)       NULL,
    [FixQuality]                      INT                NULL,
    [NumberOfSatellites]              INT                NULL,
    [HDOP]                            FLOAT (53)         NULL,
    [AltitudemetersAboveMeanSeaLevel] FLOAT (53)         NULL,
    [HeightOfGeoid]                   FLOAT (53)         NULL,
    [TimeSecondsSinceLastDGPS]        FLOAT (53)         NULL,
    [ChecksumData]                    VARCHAR (10)       NULL,
    [Bearing]                         FLOAT (53)         NULL,
    [Speed]                           FLOAT (53)         NULL,
    [GPSStatus]                       VARCHAR (20)       NULL,
    [NumberOfGPSAttempts]             INT                NULL,
    [InspectionRequestUID]            VARCHAR (100)      NULL,
    [ActivityUID]                     VARCHAR (100)      NULL,
    CONSTRAINT [PK_g_AssetCGEs] PRIMARY KEY CLUSTERED ([AssetAddressCGEID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAssetAddressIndication]...';


GO
CREATE TABLE [dbo].[tgAssetAddressIndication] (
    [AssetAddressIndicationsID]              INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssetAddressIndicationUID]              VARCHAR (100)      NULL,
    [AssetAddressUID]                        VARCHAR (100)      NULL,
    [InspectionRequestUID]                   VARCHAR (100)      NULL,
    [MapGridUID]                             VARCHAR (100)      NULL,
    [MasterLeakLogUID]                       VARCHAR (100)      NULL,
    [ProjectID]                              INT                NULL,
    [SourceID]                               VARCHAR (100)      NULL,
    [CreatedUserUID]                         VARCHAR (100)      NOT NULL,
    [ModifiedUserUID]                        VARCHAR (100)      NOT NULL,
    [SrcDTLT]                                DATETIME           NOT NULL,
    [SrvDTLT]                                DATETIME           NULL,
    [SrvDTLTOffset]                          DATETIMEOFFSET (7) NULL,
    [SrcOpenDTLT]                            DATETIME           NULL,
    [SrcClosedDTLT]                          DATETIME           NULL,
    [GPSType]                                VARCHAR (100)      NULL,
    [GPSSentence]                            VARCHAR (400)      NULL,
    [Latitude]                               FLOAT (53)         NULL,
    [Longitude]                              FLOAT (53)         NULL,
    [SHAPE]                                  [sys].[geography]  NULL,
    [Comments]                               VARCHAR (2000)     NULL,
    [RevisionComments]                       VARCHAR (500)      NULL,
    [Revision]                               INT                NULL,
    [ActiveFlag]                             BIT                NULL,
    [StatusType]                             VARCHAR (50)       NULL,
    [ManualMapPlat]                          VARCHAR (200)      NULL,
    [PipelineType]                           VARCHAR (200)      NULL,
    [SurveyType]                             VARCHAR (200)      NULL,
    [Map]                                    VARCHAR (200)      NULL,
    [Plat]                                   VARCHAR (200)      NULL,
    [RecordedMap]                            VARCHAR (200)      NULL,
    [RecordedPlat]                           VARCHAR (200)      NULL,
    [RecordedBlock]                          VARCHAR (200)      NULL,
    [LandmarkType]                           VARCHAR (200)      NULL,
    [Route]                                  VARCHAR (200)      NULL,
    [Line]                                   VARCHAR (200)      NULL,
    [HouseNoNAFlag]                          BIT                NULL,
    [HouseNo]                                VARCHAR (100)      NULL,
    [Street1]                                VARCHAR (100)      NULL,
    [City]                                   VARCHAR (50)       NULL,
    [DescriptionReadingLocation]             VARCHAR (100)      NULL,
    [County]                                 VARCHAR (255)      NULL,
    [CountyCode]                             VARCHAR (255)      NULL,
    [FacilityType]                           VARCHAR (200)      NULL,
    [LocationType]                           VARCHAR (200)      NULL,
    [InitialLeakSourceType]                  VARCHAR (200)      NULL,
    [ReportedByType]                         VARCHAR (200)      NULL,
    [LeakNo]                                 VARCHAR (100)      NULL,
    [SAPNo]                                  VARCHAR (200)      NULL,
    [PavedType]                              VARCHAR (200)      NULL,
    [SORLType]                               VARCHAR (200)      NULL,
    [SORLOther]                              VARCHAR (200)      NULL,
    [Within5FeetOfBuildingType]              VARCHAR (200)      NULL,
    [SuspectedCopperType]                    VARCHAR (255)      NULL,
    [EquipmentFoundByUID]                    VARCHAR (100)      NULL,
    [FoundBy]                                VARCHAR (100)      NULL,
    [FoundBySerialNumber]                    VARCHAR (50)       NULL,
    [InstrumentTypeGradeByType]              VARCHAR (200)      NULL,
    [EquipmentGradeByUID]                    VARCHAR (100)      NULL,
    [GradeBy]                                VARCHAR (100)      NULL,
    [GradeBySerialNumber]                    VARCHAR (50)       NULL,
    [ReadingGrade]                           FLOAT (53)         NULL,
    [GradeType]                              VARCHAR (200)      NULL,
    [InfoCodesType]                          VARCHAR (200)      NULL,
    [PotentialHCAType]                       VARCHAR (200)      NULL,
    [Grade2PlusRequested]                    DATE               NULL,
    [TwoPercentOrLessSuspectCopperFlag]      BIT                NULL,
    [LeakDownGradedFlag]                     VARCHAR (255)      NULL,
    [HCAConstructionSupervisorUserUID]       VARCHAR (100)      NULL,
    [HCADistributionPlanningEngineerUserUID] VARCHAR (100)      NULL,
    [HCAPipelineEngineerUserUID]             VARCHAR (100)      NULL,
    [Photo1]                                 VARCHAR (250)      NULL,
    [Photo2]                                 VARCHAR (250)      NULL,
    [Photo3]                                 VARCHAR (250)      NULL,
    [OptionalData1]                          VARCHAR (250)      NULL,
    [OptionalData2]                          VARCHAR (250)      NULL,
    [OptionalData3]                          VARCHAR (250)      NULL,
    [OptionalData4]                          VARCHAR (250)      NULL,
    [OptionalData5]                          VARCHAR (250)      NULL,
    [OptionalData6]                          VARCHAR (250)      NULL,
    [OptionalData7]                          VARCHAR (250)      NULL,
    [OptionalData8]                          VARCHAR (250)      NULL,
    [OptionalData9]                          VARCHAR (250)      NULL,
    [OptionalData10]                         VARCHAR (250)      NULL,
    [OptionalData11]                         VARCHAR (250)      NULL,
    [OptionalData12]                         VARCHAR (250)      NULL,
    [ApprovedFlag]                           BIT                NULL,
    [ApprovedByUserUID]                      VARCHAR (100)      NULL,
    [ApprovedDTLT]                           DATETIME           NULL,
    [SubmittedFlag]                          BIT                NULL,
    [SubmittedStatusType]                    VARCHAR (200)      NULL,
    [SubmittedUserUID]                       VARCHAR (100)      NULL,
    [SubmittedDTLT]                          DATETIME           NULL,
    [ResponseStatusType]                     VARCHAR (200)      NULL,
    [ResponseComments]                       VARCHAR (500)      NULL,
    [ResponceErrorComments]                  VARCHAR (500)      NULL,
    [ResponseDTLT]                           DATETIME           NULL,
    [CompletedFlag]                          BIT                NOT NULL,
    [CompletedDTLT]                          DATETIME           NULL,
    [AboveBelowGroundType]                   VARCHAR (200)      NULL,
    [FoundDateTime]                          DATETIME           NULL,
    [GPSSource]                              VARCHAR (20)       NULL,
    [GPSTime]                                VARCHAR (10)       NULL,
    [FixQuality]                             INT                NULL,
    [NumberOfSatellites]                     INT                NULL,
    [HDOP]                                   FLOAT (53)         NULL,
    [AltitudemetersAboveMeanSeaLevel]        FLOAT (53)         NULL,
    [HeightOfGeoid]                          FLOAT (53)         NULL,
    [TimeSecondsSinceLastDGPS]               FLOAT (53)         NULL,
    [ChecksumData]                           VARCHAR (10)       NULL,
    [Bearing]                                FLOAT (53)         NULL,
    [Speed]                                  FLOAT (53)         NULL,
    [GPSStatus]                              VARCHAR (20)       NULL,
    [NumberOfGPSAttempts]                    INT                NULL,
    [ActivityUID]                            VARCHAR (100)      NULL,
    [AssetInspectionUID]                     VARCHAR (100)      NULL,
    [MapPlatLeakNumber]                      INT                NULL,
    [LockedFlag]                             BIT                NULL,
    [SAPComments]                            VARCHAR (500)      NULL,
    CONSTRAINT [PK_g_AssetIndications] PRIMARY KEY CLUSTERED ([AssetAddressIndicationsID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAssetAddressInspection]...';


GO
CREATE TABLE [dbo].[tgAssetAddressInspection] (
    [AssetAddressInspectionID]        INT                IDENTITY (1, 1) NOT NULL,
    [AssetAddressInspectionUID]       VARCHAR (100)      NULL,
    [AssetAddressUID]                 VARCHAR (100)      NULL,
    [AssetInspectionUID]              VARCHAR (100)      NULL,
    [MapGridUID]                      VARCHAR (100)      NULL,
    [InspectionRequestUID]            VARCHAR (100)      NULL,
    [MasterLeakLogUID]                VARCHAR (100)      NULL,
    [CreatedUserUID]                  VARCHAR (100)      NULL,
    [ModifiedUserUID]                 VARCHAR (100)      NULL,
    [SourceID]                        VARCHAR (100)      NULL,
    [InGridFlag]                      BIT                NULL,
    [srvDTLT]                         DATETIME           NULL,
    [srvDTLTOffset]                   DATETIMEOFFSET (7) NULL,
    [srcDTLT]                         DATETIME           NULL,
    [Revision]                        INT                NULL,
    [ActiveFlag]                      BIT                NULL,
    [StatusType]                      VARCHAR (200)      NULL,
    [Latitude]                        FLOAT (53)         NULL,
    [Longitude]                       FLOAT (53)         NULL,
    [GPSSource]                       VARCHAR (20)       NULL,
    [GPSType]                         VARCHAR (20)       NULL,
    [GPSSentence]                     VARCHAR (400)      NULL,
    [GPSTime]                         VARCHAR (10)       NULL,
    [FixQuality]                      INT                NULL,
    [NumberOfSatellites]              INT                NULL,
    [HDOP]                            FLOAT (53)         NULL,
    [AltitudemetersAboveMeanSeaLevel] FLOAT (53)         NULL,
    [HeightofGeoid]                   FLOAT (53)         NULL,
    [TimeSecondsSinceLastDGPS]        FLOAT (53)         NULL,
    [ChecksumData]                    VARCHAR (10)       NULL,
    [Bearing]                         FLOAT (53)         NULL,
    [Speed]                           FLOAT (53)         NULL,
    [GPSStatus]                       VARCHAR (20)       NULL,
    [NumberOfGPSAttempts]             INT                NULL,
    [ActivityUID]                     VARCHAR (100)      NULL,
    [SrcOpenDTLT]                     DATETIME           NULL,
    CONSTRAINT [PK_tgAssetAddressInspection] PRIMARY KEY CLUSTERED ([AssetAddressInspectionID] ASC)
);


GO
PRINT N'Creating [dbo].[tgAssetInspection]...';


GO
CREATE TABLE [dbo].[tgAssetInspection] (
    [AssetInspectionID]     INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [AssetInspectionUID]    VARCHAR (100)      NULL,
    [AssetUID]              VARCHAR (100)      NULL,
    [MasterLeakLogsUID]     VARCHAR (100)      NULL,
    [MapGridUID]            VARCHAR (100)      NULL,
    [InspectionRequestUID]  VARCHAR (100)      NULL,
    [ProjectID]             INT                NULL,
    [SourceID]              VARCHAR (100)      NULL,
    [CreatedUserUID]        VARCHAR (100)      NULL,
    [ModifiedUserUID]       VARCHAR (100)      NULL,
    [SrcDTLT]               DATETIME           NULL,
    [SrvDTLT]               DATETIME           NULL,
    [SrvDTLTOffset]         DATETIMEOFFSET (7) NULL,
    [SrcOpenDTLT]           DATETIME           NULL,
    [SrcClosedDTLT]         DATETIME           NULL,
    [GPSType]               VARCHAR (100)      NULL,
    [GPSSentence]           VARCHAR (400)      NULL,
    [Latitude]              FLOAT (53)         NULL,
    [Longitude]             FLOAT (53)         NULL,
    [SHAPE]                 [sys].[geography]  NULL,
    [Comments]              VARCHAR (2000)     NULL,
    [RevisionComments]      VARCHAR (500)      NULL,
    [Revision]              INT                NULL,
    [ActiveFlag]            BIT                NULL,
    [StatusType]            VARCHAR (50)       NULL,
    [InspectionFlag]        BIT                NULL,
    [Photo1]                VARCHAR (250)      NULL,
    [Photo2]                VARCHAR (250)      NULL,
    [Photo3]                VARCHAR (250)      NULL,
    [OptionalData1]         VARCHAR (250)      NULL,
    [OptionalData2]         VARCHAR (250)      NULL,
    [OptionalData3]         VARCHAR (250)      NULL,
    [OptionalData4]         VARCHAR (250)      NULL,
    [OptionalData5]         VARCHAR (250)      NULL,
    [ApprovedFlag]          BIT                NULL,
    [ApprovedByUserUID]     VARCHAR (100)      NULL,
    [ApprovedDTLT]          DATETIME           NULL,
    [SubmittedFlag]         BIT                NULL,
    [SubmittedStatusType]   VARCHAR (200)      NULL,
    [SubmittedUserID]       INT                NULL,
    [SubmittedDTLT]         DATETIME           NULL,
    [ResponseStatusType]    VARCHAR (200)      NULL,
    [ResponseComments]      VARCHAR (500)      NULL,
    [ResponceErrorComments] VARCHAR (500)      NULL,
    [ResponseDTLT]          DATETIME           NULL,
    [CompletedFlag]         BIT                NULL,
    [CompletedDTLT]         DATETIME           NULL,
    [AdhocFlag]             BIT                NULL,
    [InspectionFreq]        VARCHAR (20)       NULL,
    CONSTRAINT [PK_g_AssetInspections] PRIMARY KEY CLUSTERED ([AssetInspectionID] ASC)
);


GO
PRINT N'Creating [dbo].[tgBreadcrumb]...';


GO
CREATE TABLE [dbo].[tgBreadcrumb] (
    [gBreadcrumbsID]  INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [BreadcrumbUID]   VARCHAR (100)      NOT NULL,
    [ActivityUID]     NCHAR (10)         NULL,
    [ProjectID]       INT                NOT NULL,
    [SourceID]        VARCHAR (100)      NULL,
    [CreatedUserUID]  VARCHAR (100)      NOT NULL,
    [SrcDTLT]         DATETIME           NOT NULL,
    [SrvDTLTOffset]   DATETIMEOFFSET (7) NULL,
    [SrvDTLT]         DATETIME           NULL,
    [GPSType]         VARCHAR (100)      NULL,
    [GPSSentence]     VARCHAR (400)      NULL,
    [Latitude]        FLOAT (53)         NULL,
    [Longitude]       FLOAT (53)         NULL,
    [SHAPE]           [sys].[geography]  NULL,
    [ActivityType]    VARCHAR (200)      NULL,
    [WorkQueueFilter] VARCHAR (200)      NULL,
    [BatteryLevel]    FLOAT (53)         NULL,
    [GPSTime]         DATETIME           NULL,
    [Speed]           FLOAT (53)         NULL,
    [Heading]         VARCHAR (50)       NULL,
    [GPSAccuracy]     VARCHAR (50)       NULL,
    [Satellites]      INT                NULL,
    [Altitude]        FLOAT (53)         NULL,
    CONSTRAINT [PK_g_Breadcrumbs] PRIMARY KEY CLUSTERED ([gBreadcrumbsID] ASC)
);


GO
PRINT N'Creating [dbo].[tgWindSpeed]...';


GO
CREATE TABLE [dbo].[tgWindSpeed] (
    [WindSpeedID]          INT                IDENTITY (1, 1) NOT NULL,
    [WindSpeedUID]         VARCHAR (100)      NULL,
    [InspectionRequestUID] VARCHAR (100)      NULL,
    [ProjectID]            INT                NULL,
    [SourceID]             VARCHAR (50)       NULL,
    [CreatedUserUID]       VARCHAR (100)      NULL,
    [ModifiedUserUID]      VARCHAR (100)      NULL,
    [srcDTLT]              DATETIME           NULL,
    [srvDTLT]              DATETIME           NULL,
    [srvDTLTOffset]        DATETIMEOFFSET (7) NULL,
    [Comments]             VARCHAR (500)      NULL,
    [Revision]             INT                NULL,
    [ActiveFlag]           BIT                NULL,
    [WindSpeed]            FLOAT (53)         NULL,
    [Latitude]             FLOAT (53)         NULL,
    [Longitude]            FLOAT (53)         NULL,
    [EntryTime]            TIME (7)           NULL,
    [MapPlat]              VARCHAR (20)       NULL,
    [MapGridUID]           VARCHAR (100)      NULL,
    [AlertFlag]            BIT                NULL,
    [SurveyType]           VARCHAR (200)      NULL
);


GO
PRINT N'Creating [dbo].[tInspectionRequest]...';


GO
CREATE TABLE [dbo].[tInspectionRequest] (
    [tInspectionRequestID]      INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [InspectionRequestUID]      VARCHAR (100)  NOT NULL,
    [MapGridUID]                VARCHAR (100)  NULL,
    [ProjectID]                 INT            NULL,
    [SourceID]                  VARCHAR (100)  NULL,
    [CreatedUserUID]            VARCHAR (100)  NOT NULL,
    [ModifiedUserUID]           VARCHAR (100)  NOT NULL,
    [CreateDTLT]                DATETIME       NULL,
    [ModifiedDTLT]              DATETIME       NULL,
    [Comments]                  VARCHAR (2000) NULL,
    [RevisionComments]          VARCHAR (500)  NULL,
    [Revision]                  INT            NOT NULL,
    [ActiveFlag]                BIT            NOT NULL,
    [StatusType]                VARCHAR (100)  NULL,
    [PipelineType]              VARCHAR (200)  NULL,
    [SurveyType]                VARCHAR (200)  NULL,
    [LsNtfNo]                   CHAR (12)      NULL,
    [OrderNo]                   VARCHAR (12)   NULL,
    [MapID]                     VARCHAR (9)    NULL,
    [Wall]                      VARCHAR (4)    NULL,
    [Plat]                      VARCHAR (4)    NULL,
    [MWC]                       VARCHAR (8)    NULL,
    [FLOC]                      VARCHAR (30)   NULL,
    [InspectionFrequencyType]   VARCHAR (200)  NULL,
    [ComplianceDueDate]         DATE           NULL,
    [ScheduledStartDate]        DATE           NULL,
    [ScheduledCompleteDate]     DATE           NULL,
    [ReleaseDate]               DATE           NULL,
    [PrevServ]                  BIGINT         NULL,
    [PrevFtOfMain]              BIGINT         NULL,
    [ReturnFlag]                BIT            NULL,
    [ReturnComments]            VARCHAR (2000) NULL,
    [FileCount]                 INT            NULL,
    [ApprovedFlag]              BIT            NULL,
    [ApprovedByUserUID]         VARCHAR (100)  NULL,
    [ApprovedDTLT]              DATETIME       NULL,
    [SubmittedFlag]             BIT            NULL,
    [SubmittedStatusType]       VARCHAR (200)  NULL,
    [SubmittedUserUID]          VARCHAR (100)  NULL,
    [SubmittedDTLT]             DATETIME       NULL,
    [ReturnedFlag]              BIT            NULL,
    [ReturnedFromPGEStatusType] VARCHAR (200)  NULL,
    [RetrunedFromPGEDTLT]       DATETIME       NULL,
    [CompletedFlag]             BIT            NULL,
    [CompletedDTLT]             DATETIME       NULL,
    [InspectionType]            VARCHAR (20)   NULL,
    [ActualStartDate]           DATE           NULL,
    CONSTRAINT [PK_tInspectionRequest] PRIMARY KEY CLUSTERED ([tInspectionRequestID] ASC)
);


GO
PRINT N'Creating [dbo].[tInspectionRequest_Older]...';


GO
CREATE TABLE [dbo].[tInspectionRequest_Older] (
    [InspectionRequestID]      INT           IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [InspectionRequestUID]     VARCHAR (100) NOT NULL,
    [MapGridUID]               VARCHAR (100) NOT NULL,
    [ProjectID]                INT           NOT NULL,
    [SourceID]                 VARCHAR (100) NULL,
    [CreatedUserUID]           VARCHAR (100) NOT NULL,
    [ModifiedUserUID]          VARCHAR (100) NOT NULL,
    [CreateDTLT]               DATETIME      NULL,
    [ModifiedDTLT]             DATETIME      NULL,
    [Comments]                 VARCHAR (500) NULL,
    [RevisionComments]         VARCHAR (500) NULL,
    [Revision]                 INT           NOT NULL,
    [ActiveFlag]               BIT           NOT NULL,
    [StatusType]               VARCHAR (200) NOT NULL,
    [CompanyNo]                VARCHAR (200) NULL,
    [Region]                   VARCHAR (200) NULL,
    [Division]                 VARCHAR (200) NULL,
    [Office]                   VARCHAR (200) NULL,
    [PipelineType]             VARCHAR (200) NULL,
    [SurveyType]               VARCHAR (200) NULL,
    [InspectionType]           VARCHAR (200) NULL,
    [InspectionFrequencyType]  VARCHAR (200) NULL,
    [MapGrid]                  VARCHAR (200) NULL,
    [RequestID]                VARCHAR (100) NULL,
    [ReleaseDate]              DATE          NULL,
    [ScheduledStartDate]       DATE          NULL,
    [ScheduledCompleteDate]    DATE          NULL,
    [ComplianceDueDate]        DATE          NULL,
    [Priority]                 VARCHAR (50)  NULL,
    [ApprovedFlag]             BIT           NULL,
    [ApprovedByUserUID]        VARCHAR (100) NULL,
    [ApprovedDTLT]             DATETIME      NULL,
    [SubmittedFlag]            BIT           NULL,
    [SubmittedStatusType]      VARCHAR (200) NULL,
    [SubmittedUserUID]         VARCHAR (100) NULL,
    [SubmittedDTLT]            DATETIME      NULL,
    [ResponseStatusType]       VARCHAR (200) NULL,
    [Response]                 VARCHAR (500) NULL,
    [ResponceErrorDescription] VARCHAR (500) NULL,
    [ResponseDTLT]             DATETIME      NULL,
    [CompletedFlag]            BIT           NOT NULL,
    [CompletedDTLT]            DATETIME      NULL,
    CONSTRAINT [PK_t_InspectionRequests] PRIMARY KEY CLUSTERED ([InspectionRequestID] ASC)
);


GO
PRINT N'Creating [dbo].[tInspectionsEquipment]...';


GO
CREATE TABLE [dbo].[tInspectionsEquipment] (
    [InspecitonEquipmentID]       INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [InspecitonEquipmentUID]      VARCHAR (100)      NULL,
    [InspectorOQLogUID]           VARCHAR (100)      NULL,
    [EquipmentLogUID]             VARCHAR (100)      NULL,
    [ProjectID]                   INT                NULL,
    [SourceID]                    VARCHAR (100)      NULL,
    [CreatedUserUID]              VARCHAR (100)      NULL,
    [ModifiedUserUID]             VARCHAR (100)      NULL,
    [SrcDTLT]                     DATETIME           NULL,
    [SrvDTLT]                     DATETIME           NULL,
    [SrvDTLTOffset]               DATETIMEOFFSET (7) NULL,
    [Comments]                    VARCHAR (2000)     NULL,
    [RevisionComments]            VARCHAR (500)      NULL,
    [Revision]                    INT                NULL,
    [ActiveFlag]                  BIT                NULL,
    [LastEquipmentDayFlag]        BIT                NULL,
    [EquipmentType]               VARCHAR (200)      NULL,
    [SerialNumber]                VARCHAR (50)       NULL,
    [CalibrationLevel]            FLOAT (53)         NULL,
    [CalibrationVerificationFlag] BIT                NULL,
    [AlarmLevel]                  FLOAT (53)         NULL,
    [MPRFlag]                     BIT                NULL,
    [PrNtfNo]                     VARCHAR (25)       NULL,
    [SAPEqID]                     VARCHAR (25)       NULL,
    [MWC]                         VARCHAR (25)       NULL,
    [CalbDate]                    DATETIME           NULL,
    [IsUsedToday]                 BIT                NULL,
    [MPRStatus]                   VARCHAR (10)       NULL,
    [SafteyIssue]                 VARCHAR (25)       NULL,
    [InstrumentAge]               VARCHAR (25)       NULL,
    [MasterLeakLogUID]            VARCHAR (100)      NULL,
    CONSTRAINT [PK_t_InspecitonsEquipment] PRIMARY KEY CLUSTERED ([InspecitonEquipmentID] ASC)
);


GO
PRINT N'Creating [dbo].[tInspectionService]...';


GO
CREATE TABLE [dbo].[tInspectionService] (
    [tInspectionServicesID]       INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [InspectionServicesUID]       VARCHAR (100)      NULL,
    [MasterLeakLogUID]            VARCHAR (100)      NULL,
    [MapGridUID]                  VARCHAR (100)      NULL,
    [InspectionRequestUID]        VARCHAR (100)      NULL,
    [InspectionEquipmentUID]      VARCHAR (100)      NULL,
    [ProjectID]                   INT                NULL,
    [SourceID]                    VARCHAR (100)      NULL,
    [CreatedUserUID]              VARCHAR (100)      NULL,
    [ModifiedUserUID]             VARCHAR (100)      NULL,
    [SrcDTLT]                     DATETIME           NULL,
    [SrvDTLT]                     DATETIME           NULL,
    [SrvDTLTOffset]               DATETIMEOFFSET (7) NULL,
    [Comments]                    VARCHAR (2000)     NULL,
    [RevisionComments]            VARCHAR (500)      NULL,
    [Revision]                    INT                NULL,
    [ActiveFlag]                  BIT                NULL,
    [StatusType]                  VARCHAR (100)      NULL,
    [EquipmentType]               VARCHAR (200)      NULL,
    [InstrumentType]              VARCHAR (200)      NULL,
    [SerialNumber]                VARCHAR (50)       NULL,
    [CalibrationLevel]            FLOAT (53)         NULL,
    [CalibrationVerificationFlag] BIT                NULL,
    [WindSpeedStart]              INT                NULL,
    [WindSpeedEnd]                INT                NULL,
    [EquipmentModeType]           VARCHAR (200)      NULL,
    [EstimatedFeet]               INT                NULL,
    [EstimatedServices]           INT                NULL,
    [EstimatedHours]              FLOAT (53)         NULL,
    [ApprovedFlag]                BIT                NULL,
    [ApprovedByUserUID]           VARCHAR (100)      NULL,
    [ApprovedDTLT]                DATETIME           NULL,
    [SubmittedFlag]               BIT                NULL,
    [SubmittedStatusType]         VARCHAR (200)      NULL,
    [SubmittedUserUID]            VARCHAR (100)      NULL,
    [SubmittedDTLT]               DATETIME           NULL,
    [ResponseStatusType]          VARCHAR (200)      NULL,
    [Response]                    VARCHAR (500)      NULL,
    [ResponceErrorDescription]    VARCHAR (500)      NULL,
    [ResponseDTLT]                DATETIME           NULL,
    [CompletedFlag]               BIT                NULL,
    [CompletedDTLT]               DATETIME           NULL,
    [SurveyMode]                  VARCHAR (10)       NULL,
    [PlaceHolderFlag]             BIT                NULL,
    [WindSpeedStartUID]           VARCHAR (100)      NULL,
    [WindSpeedMidUID]             VARCHAR (100)      NULL,
    [MapAreaNumber]               INT                NULL,
    [LockedFlag]                  BIT                NULL,
    CONSTRAINT [PK_t_InspecitonServices] PRIMARY KEY CLUSTERED ([tInspectionServicesID] ASC)
);


GO
PRINT N'Creating [dbo].[tInspectorOQLog]...';


GO
CREATE TABLE [dbo].[tInspectorOQLog] (
    [tInspectorOQLogID] INT            IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [InspectorOQLogUID] VARCHAR (100)  NULL,
    [ProjectID]         INT            NULL,
    [SourceID]          VARCHAR (100)  NULL,
    [CreatedUserUID]    VARCHAR (100)  NULL,
    [ModifiedUserUID]   VARCHAR (100)  NULL,
    [CreateDTLT]        DATETIME       NULL,
    [ModifiedDTLT]      DATETIME       NULL,
    [Comments]          VARCHAR (2000) NULL,
    [RevisionComments]  VARCHAR (500)  NULL,
    [StatusType]        VARCHAR (200)  NULL,
    [Revision]          INT            NOT NULL,
    [ActiveFlag]        BIT            NOT NULL,
    [UserUID]           VARCHAR (100)  NOT NULL,
    [OQSourceType]      VARCHAR (200)  NULL,
    [OQProfile]         VARCHAR (200)  NULL,
    [OQStartDate]       DATE           NULL,
    [OQEndDate]         DATE           NULL,
    [OQExpireDate]      DATE           NULL,
    CONSTRAINT [PK_t_InspectorOQLog] PRIMARY KEY CLUSTERED ([tInspectorOQLogID] ASC)
);


GO
PRINT N'Creating [dbo].[tMapStamp]...';


GO
CREATE TABLE [dbo].[tMapStamp] (
    [MapStampID]           INT           IDENTITY (1, 1) NOT NULL,
    [MapStampUID]          VARCHAR (100) NULL,
    [ProjectID]            INT           NULL,
    [InspectionRequestUID] VARCHAR (100) NULL,
    [CreatedDatetime]      DATETIME      NULL,
    [StatusType]           VARCHAR (200) NULL,
    [StatusDatetime]       DATETIME      NULL,
    [Revision]             INT           NULL,
    [ActiveFlag]           BIT           NULL,
    [PrintFlag]            BIT           NULL,
    [PrintDateTime]        DATETIME      NULL,
    [ApprovedFlag]         BIT           NULL,
    [ApprovedByUserUID]    VARCHAR (100) NULL,
    [ApprovedDateTime]     DATETIME      NULL,
    [SentFlag]             BIT           NULL,
    [SentDatetime]         DATETIME      NULL,
    [SAPResponse]          VARCHAR (500) NULL,
    [SAPStatusType]        VARCHAR (200) NULL,
    [SAPStatusDateTime]    DATETIME      NULL,
    [Map]                  VARCHAR (10)  NULL,
    [Plat]                 VARCHAR (10)  NULL,
    [InspectionType]       VARCHAR (200) NULL
);


GO
PRINT N'Creating [dbo].[tMapStampPicaro]...';


GO
CREATE TABLE [dbo].[tMapStampPicaro] (
    [MapStampPicaroID]     INT           IDENTITY (1, 1) NOT NULL,
    [MapStampPicaroUID]    VARCHAR (100) NULL,
    [InspectionRequestUID] VARCHAR (100) NULL,
    [MapStampUID]          VARCHAR (100) NULL,
    [ProjectID]            INT           NULL,
    [CreatedByUserUID]     VARCHAR (100) NULL,
    [ModifiedByUserUID]    VARCHAR (100) NULL,
    [CreatedDateTime]      DATETIME      NULL,
    [ModifiedDateTime]     DATETIME      NULL,
    [Revision]             INT           NULL,
    [ActiveFlag]           BIT           NULL,
    [PicaroEquipmentID]    VARCHAR (50)  NULL,
    [FeetOfMain]           FLOAT (53)    NULL,
    [Services]             INT           NULL,
    [WindSpeedStart]       FLOAT (53)    NULL,
    [WindSpeedMid]         FLOAT (53)    NULL,
    [StatusType]           VARCHAR (200) NULL,
    [SurveyorUID]          VARCHAR (100) NULL,
    [SurveyDate]           DATE          NULL,
    [Seq]                  INT           NULL
);


GO
PRINT N'Creating [dbo].[tMasterLeakLog]...';


GO
CREATE TABLE [dbo].[tMasterLeakLog] (
    [tMasterLeakLogsID]        INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [MasterLeakLogUID]         VARCHAR (100)      NULL,
    [InspectionRequestLogUID]  VARCHAR (100)      NULL,
    [MapGridUID]               VARCHAR (100)      NULL,
    [ServiceDate]              DATE               NULL,
    [ProjectID]                INT                NULL,
    [SourceID]                 VARCHAR (100)      NULL,
    [CreatedUserUID]           VARCHAR (100)      NULL,
    [ModifiedUserUID]          VARCHAR (100)      NULL,
    [SrcDTLT]                  DATETIME           NULL,
    [SrvDTLTOffset]            DATETIMEOFFSET (7) NULL,
    [SrvDTLT]                  DATETIME           NULL,
    [Comments]                 VARCHAR (2000)     NULL,
    [RevisionComments]         VARCHAR (500)      NULL,
    [Revision]                 INT                NULL,
    [ActiveFlag]               BIT                NULL,
    [StatusType]               VARCHAR (100)      NULL,
    [ApprovedFlag]             BIT                NULL,
    [ApprovedByUserUID]        VARCHAR (100)      NULL,
    [ApprovedDTLT]             DATETIME           NULL,
    [SubmittedFlag]            BIT                NULL,
    [SubmittedStatusType]      VARCHAR (200)      NULL,
    [SubmittedUserUID]         VARCHAR (100)      NULL,
    [SubmittedDTLT]            DATETIME           NULL,
    [ResponseStatusType]       VARCHAR (200)      NULL,
    [Response]                 VARCHAR (500)      NULL,
    [ResponceErrorDescription] VARCHAR (500)      NULL,
    [ResponseDTLT]             DATETIME           NULL,
    [CompletedFlag]            BIT                NULL,
    [CompletedDTLT]            DATETIME           NULL,
    CONSTRAINT [PK_t_MasterLeakLogs] PRIMARY KEY CLUSTERED ([tMasterLeakLogsID] ASC)
);


GO
PRINT N'Creating [dbo].[tSCErrorLog]...';


GO
CREATE TABLE [dbo].[tSCErrorLog] (
    [SCErrorLogID]     INT           IDENTITY (1, 1) NOT NULL,
    [ProjectID]        INT           NULL,
    [SouceID]          VARCHAR (50)  NULL,
    [UserUID]          VARCHAR (100) NULL,
    [ErrorNumber]      INT           NULL,
    [ErrorDescription] VARCHAR (500) NULL,
    [srcDTLT]          DATETIME      NULL,
    [svrDTLT]          DATETIME      NULL
);


GO
PRINT N'Creating [dbo].[tTabletDataInsertArchive]...';


GO
CREATE TABLE [dbo].[tTabletDataInsertArchive] (
    [TabletDataInsertArchiveID] INT                IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [CreatedUserUID]            VARCHAR (100)      NULL,
    [SvrDTLT]                   DATETIME           NULL,
    [SvrDTLTOffset]             DATETIMEOFFSET (7) NULL,
    [TransactionType]           VARCHAR (100)      NULL,
    [InsertedData]              VARCHAR (MAX)      NULL,
    CONSTRAINT [PK_t_TabletDataInsertArchive] PRIMARY KEY CLUSTERED ([TabletDataInsertArchiveID] ASC)
);


GO
PRINT N'Creating [dbo].[tTabletDataInsertBreadcrumbArchive]...';


GO
CREATE TABLE [dbo].[tTabletDataInsertBreadcrumbArchive] (
    [tTabletDataInsertArchiveBreadcrumbID] INT                IDENTITY (1, 1) NOT NULL,
    [ClientID]                             INT                NULL,
    [UserUID]                              VARCHAR (100)      NULL,
    [SvrDTLT]                              DATETIME           NULL,
    [SvrDTLT_Offset]                       DATETIMEOFFSET (7) NULL,
    [TransactionType]                      VARCHAR (50)       NULL,
    [InsertedData]                         VARCHAR (MAX)      NULL
);


GO
PRINT N'Creating [dbo].[tTabletDataInsertError]...';


GO
CREATE TABLE [dbo].[tTabletDataInsertError] (
    [tTabletDataInsertErrorID] INT                IDENTITY (1, 1) NOT NULL,
    [SvrDTLT]                  DATETIME           NULL,
    [SvrDTLT_Offset]           DATETIMEOFFSET (7) NULL,
    [InsertedData]             VARCHAR (MAX)      NULL,
    [Comments]                 VARCHAR (200)      NULL,
    [ErrorNumber]              INT                NULL,
    [ErrorMessage]             VARCHAR (500)      NULL,
    [Reprocessed]              BIT                NULL
);


GO
PRINT N'Creating [dbo].[tTabletJSONDataInsertError]...';


GO
CREATE TABLE [dbo].[tTabletJSONDataInsertError] (
    [tJSONDataInsertErrorID] INT                IDENTITY (1, 1) NOT NULL,
    [SvrDTLT]                DATETIME           NULL,
    [SvrDTLT_Offset]         DATETIMEOFFSET (7) NULL,
    [InsertedData]           VARCHAR (MAX)      NULL,
    [ErrorNumber]            INT                NULL,
    [ErrorMessage]           VARCHAR (500)      NULL
);


GO
PRINT N'Creating [dbo].[UserTb]...';


GO
CREATE TABLE [dbo].[UserTb] (
    [UserID]                 INT                IDENTITY (1, 1) NOT NULL,
    [UserUID]                VARCHAR (100)      NULL,
    [ProjectID]              INT                NULL,
    [UserCreatedUID]         VARCHAR (100)      NULL,
    [UserModifiedUID]        VARCHAR (100)      NULL,
    [UserCreatedDate]        DATETIME           NULL,
    [UserModifiedDate]       DATETIME           NULL,
    [UserInactiveDTLT]       DATETIME           NULL,
    [UserComments]           VARCHAR (2000)     NULL,
    [UserRevision]           INT                NULL,
    [UserActiveFlag]         BIT                NULL,
    [UserInActiveFlag]       BIT                NULL,
    [UserLoginID]            VARCHAR (50)       NULL,
    [UserFirstName]          VARCHAR (50)       NULL,
    [UserLastName]           VARCHAR (50)       NULL,
    [UserLANID]              VARCHAR (20)       NULL,
    [UserPassword]           VARCHAR (75)       NULL,
    [UserEmployeeType]       VARCHAR (50)       NULL,
    [UserCompanyName]        VARCHAR (200)      NULL,
    [UserCompanyPhone]       VARCHAR (20)       NULL,
    [UserSupervisorUserUID]  VARCHAR (100)      NULL,
    [UserName]               VARCHAR (100)      NULL,
    [UserAppRoleType]        VARCHAR (50)       NULL,
    [UserPhone]              VARCHAR (20)       NULL,
    [UserCreatedDTLTOffset]  DATETIMEOFFSET (7) NULL,
    [UserModifiedDTLTOffset] DATETIMEOFFSET (7) NULL,
    [UserInactiveDTLTOffset] DATETIMEOFFSET (7) NULL,
    [UserArchiveFlag]        BIT                NULL,
    [HomeWorkCenterUID]      VARCHAR (100)      NULL,
    CONSTRAINT [PK_UserTb] PRIMARY KEY CLUSTERED ([UserID] ASC)
);


GO
PRINT N'Creating [dbo].[xMenuRolexRef]...';


GO
CREATE TABLE [dbo].[xMenuRolexRef] (
    [rMenuRoleXrefID]   INT           IDENTITY (1, 1) NOT FOR REPLICATION NOT NULL,
    [LightHouseMenuUID] VARCHAR (100) NULL,
    [RoleUID]           VARCHAR (100) NULL,
    [ActiveFlag]        BIT           NOT NULL
);


GO
PRINT N'Creating [dbo].[xOQEquipmentTypexRef]...';


GO
CREATE TABLE [dbo].[xOQEquipmentTypexRef] (
    [OQEquipmentxRefID]     INT           IDENTITY (1, 1) NOT NULL,
    [OQProfile]             VARCHAR (10)  NULL,
    [SAPEquipmentType]      VARCHAR (50)  NULL,
    [EquipmentDisplayType]  VARCHAR (50)  NULL,
    [RequiredForLoginFlag]  BIT           NULL,
    [RequiredForLoginAndOr] VARCHAR (10)  NULL,
    [Revision]              INT           NULL,
    [ActiveFlag]            BIT           NULL,
    [Comments]              VARCHAR (500) NULL,
    [RequirementType1]      VARCHAR (10)  NULL,
    [RequirementType2]      VARCHAR (10)  NULL,
    [FootFlag]              BIT           NULL,
    [MobleFlag]             BIT           NULL,
    [FoundByFlag]           BIT           NULL,
    [GradeByFlag]           BIT           NULL,
    [EZTechEquipmentType]   VARCHAR (200) NULL
);


GO
PRINT N'Creating [dbo].[xReportingGroupAndWorkcenterxRef]...';


GO
CREATE TABLE [dbo].[xReportingGroupAndWorkcenterxRef] (
    [ReportingGroupAndWorkCenterID] INT           IDENTITY (1, 1) NOT NULL,
    [ReportingGroupUID]             VARCHAR (100) NULL,
    [WorkCenterUID]                 VARCHAR (100) NULL,
    [CreatedUserUID]                VARCHAR (100) NULL,
    [ModifiedUserUID]               VARCHAR (100) NULL,
    [CreateDatetime]                DATETIME      NULL,
    [ModifiedDatetime]              DATETIME      NULL,
    [Revision]                      INT           NULL,
    [ActiveFlag]                    BIT           NULL
);


GO
PRINT N'Creating [dbo].[xReportingGroupEmployeexRef]...';


GO
CREATE TABLE [dbo].[xReportingGroupEmployeexRef] (
    [ReportingGroupEmployeeID] INT           IDENTITY (1, 1) NOT NULL,
    [UserUID]                  VARCHAR (100) NULL,
    [ReportingGroupUID]        VARCHAR (100) NULL,
    [RoleUID]                  VARCHAR (100) NULL,
    [CreatedUserUID]           VARCHAR (100) NULL,
    [ModifiedUserUID]          VARCHAR (100) NULL,
    [CreateDatetime]           DATETIME      NULL,
    [ModifiedDatetime]         DATETIME      NULL,
    [Revision]                 INT           NULL,
    [ActiveFlag]               BIT           NULL
);


GO
PRINT N'Creating [dbo].[xWorkcenterEmployeexRef]...';


GO
CREATE TABLE [dbo].[xWorkcenterEmployeexRef] (
    [WorkcenterEmployeeID] INT           IDENTITY (1, 1) NOT NULL,
    [UserUID]              VARCHAR (100) NULL,
    [WorkCenterUID]        VARCHAR (100) NULL,
    [RoleUID]              VARCHAR (100) NULL,
    [CreatedUserUID]       VARCHAR (100) NULL,
    [ModifiedUserUID]      VARCHAR (100) NULL,
    [CreateDatetime]       DATETIME      NULL,
    [ModifiedDatetime]     DATETIME      NULL,
    [Revision]             INT           NULL,
    [ActiveFlag]           BIT           NULL
);


GO
PRINT N'Creating [dbo].[z_PGE_OQ_20160617]...';


GO
CREATE TABLE [dbo].[z_PGE_OQ_20160617] (
    [Name]               NVARCHAR (255) NULL,
    [UserID]             NVARCHAR (255) NULL,
    [OQ_ID]              NVARCHAR (255) NULL,
    [StartDate]          DATETIME       NULL,
    [EndDate]            DATETIME       NULL,
    [GracePeriodEndDate] DATETIME       NULL
);


GO
PRINT N'Creating [dbo].[z_UsersRolesxRef]...';


GO
CREATE TABLE [dbo].[z_UsersRolesxRef] (
    [rUserRolesxRefID] INT           IDENTITY (1, 1) NOT NULL,
    [UserUID]          VARCHAR (100) NULL,
    [RoleUID]          VARCHAR (100) NULL,
    [ActiveFlag]       BIT           NULL
);


GO
PRINT N'Creating [dbo].[zLandmarks]...';


GO
CREATE TABLE [dbo].[zLandmarks] (
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    [LandmarkName] VARCHAR (100) NULL,
    [Location]     VARCHAR (50)  NULL,
    [Latitude]     FLOAT (53)    NULL,
    [Longitude]    FLOAT (53)    NULL
);


GO
PRINT N'Creating [dbo].[zpgeDistributionPlatIntersetTransmissionMainExcelFile]...';


GO
CREATE TABLE [dbo].[zpgeDistributionPlatIntersetTransmissionMainExcelFile] (
    [ID]                            FLOAT (53)     NULL,
    [OPERATION_AREA]                NVARCHAR (255) NULL,
    [ROUTE_NAME]                    NVARCHAR (255) NULL,
    [LONG_ROUTE_NAME]               NVARCHAR (255) NULL,
    [STATION_SERIES_ID]             FLOAT (53)     NULL,
    [TRANS_DEF]                     NVARCHAR (255) NULL,
    [FACILITY_TYPE_DESC]            NVARCHAR (255) NULL,
    [FEATURE_TYPE]                  NVARCHAR (255) NULL,
    [BEGIN_STATION]                 FLOAT (53)     NULL,
    [END_STATION]                   FLOAT (53)     NULL,
    [PIPE_LENGTH]                   FLOAT (53)     NULL,
    [DOT_CLASS]                     NVARCHAR (255) NULL,
    [INSTALL_DATE]                  DATETIME       NULL,
    [INSTALL_JOB]                   FLOAT (53)     NULL,
    [MATERIAL]                      NVARCHAR (255) NULL,
    [OUTSIDE_DIAMETER]              FLOAT (53)     NULL,
    [WALL_THICKNESS]                FLOAT (53)     NULL,
    [SMYS]                          FLOAT (53)     NULL,
    [PIPE_GRADE]                    NVARCHAR (255) NULL,
    [LONG_SEAM]                     NVARCHAR (255) NULL,
    [MANUFACTURER]                  NVARCHAR (255) NULL,
    [ASSET_OWNER]                   NVARCHAR (255) NULL,
    [MAINT_ORG]                     NVARCHAR (255) NULL,
    [HCA_IMPACT_RADIUS]             FLOAT (53)     NULL,
    [LEAK_SURVEY_GROUP]             NVARCHAR (255) NULL,
    [LEAK_SURVEY_FREQUENCY]         NVARCHAR (255) NULL,
    [JOINT_TYPE]                    NVARCHAR (255) NULL,
    [BEND_RADIUS]                   NVARCHAR (255) NULL,
    [BEND_ORIENTATION]              NVARCHAR (255) NULL,
    [BEND_ANGLE]                    NVARCHAR (255) NULL,
    [PFL_COATING_TYPE]              NVARCHAR (255) NULL,
    [PFL_COATING_DATE]              DATETIME       NULL,
    [COATING_CONDITION]             NVARCHAR (255) NULL,
    [CP_SURVEY_GROUP]               NVARCHAR (255) NULL,
    [PFL_FILENAME]                  NVARCHAR (255) NULL,
    [PFL_FEATURE_NUM]               FLOAT (53)     NULL,
    [ROUTE_ID]                      FLOAT (53)     NULL,
    [Adjacent Plat East]            NVARCHAR (255) NULL,
    [Adjacent Plat North]           NVARCHAR (255) NULL,
    [Adjacent Plat Northeast]       NVARCHAR (255) NULL,
    [Adjacent Plat Northwest]       NVARCHAR (255) NULL,
    [Adjacent Plat South]           NVARCHAR (255) NULL,
    [Adjacent Plat Southeast]       NVARCHAR (255) NULL,
    [Adjacent Plat Southwest]       NVARCHAR (255) NULL,
    [Adjacent Plat West]            NVARCHAR (255) NULL,
    [Conversion ID]                 FLOAT (53)     NULL,
    [Conversion Work Package]       NVARCHAR (255) NULL,
    [Create Date]                   DATETIME       NULL,
    [Create User]                   NVARCHAR (255) NULL,
    [District]                      FLOAT (53)     NULL,
    [Functional Location]           NVARCHAR (255) NULL,
    [Legacy Coordinate System WKID] FLOAT (53)     NULL,
    [Map Name]                      NVARCHAR (255) NULL,
    [Map Template]                  NVARCHAR (255) NULL,
    [County]                        NVARCHAR (255) NULL,
    [Division]                      FLOAT (53)     NULL,
    [Map Type]                      FLOAT (53)     NULL,
    [Office Code]                   NVARCHAR (255) NULL,
    [Wall Map]                      FLOAT (53)     NULL,
    [Plat Number]                   NVARCHAR (255) NULL,
    [Plat Map Number]               NVARCHAR (255) NULL,
    [SAP ObjectID]                  NVARCHAR (255) NULL,
    [Update User]                   NVARCHAR (255) NULL,
    [Work Center]                   NVARCHAR (255) NULL,
    [Symbol Scale]                  FLOAT (53)     NULL,
    [Met Name]                      NVARCHAR (255) NULL,
    [100 Scale Plat Number]         NVARCHAR (255) NULL,
    [SAP Maintenance Status]        NVARCHAR (255) NULL,
    [Plat Map Hyperlink]            NVARCHAR (255) NULL,
    [Shape_Length]                  FLOAT (53)     NULL
);


GO
PRINT N'Creating [dbo].[zpgePICARROLEAKPOLYGON]...';


GO
CREATE TABLE [dbo].[zpgePICARROLEAKPOLYGON] (
    [OBJECTID]              INT              IDENTITY (1, 1) NOT NULL,
    [GLOBALID]              UNIQUEIDENTIFIER NOT NULL,
    [SOURCEACCURACY]        NVARCHAR (14)    NULL,
    [CONSTRUCTIONSTATUS]    NVARCHAR (10)    NULL,
    [LASTINSPECTIONDATE]    DATETIME2 (7)    NULL,
    [CONVERSIONID]          INT              NULL,
    [CONVERSIONWORKPACKAGE] NVARCHAR (40)    NULL,
    [LOCATIONDESCRIPTION]   NVARCHAR (255)   NULL,
    [MAPSCALE]              INT              NULL,
    [CREATEUSER]            NVARCHAR (30)    NULL,
    [CREATEDATE]            DATETIME2 (7)    NULL,
    [UPDATEUSER]            NVARCHAR (30)    NULL,
    [UPDATEDATE]            DATETIME2 (7)    NULL,
    [SYMBOLSCALE]           INT              NULL,
    [CAPNUMBER]             NVARCHAR (30)    NULL,
    [SHAPE]                 [sys].[geometry] NULL,
    PRIMARY KEY CLUSTERED ([OBJECTID] ASC)
);


GO
PRINT N'Creating [dbo].[zpgePICARROLEAKPOLYGON].[FDO_SHAPE]...';


GO
CREATE SPATIAL INDEX [FDO_SHAPE]
    ON [dbo].[zpgePICARROLEAKPOLYGON] ([SHAPE])
    USING GEOMETRY_GRID
    WITH  (
            BOUNDING_BOX = (XMAX = 20081600, XMIN = -16800800, YMAX = 32802000, YMIN = -32802000),
            GRIDS = (LEVEL_1 = MEDIUM, LEVEL_2 = MEDIUM, LEVEL_3 = MEDIUM, LEVEL_4 = MEDIUM)
          );


GO
PRINT N'Creating [dbo].[zpgeSERVICE]...';


GO
CREATE TABLE [dbo].[zpgeSERVICE] (
    [OBJECTID]                      INT              IDENTITY (1, 1) NOT NULL,
    [ENABLED]                       SMALLINT         NULL,
    [GLOBALID]                      UNIQUEIDENTIFIER NOT NULL,
    [SOURCEACCURACY]                NVARCHAR (14)    NULL,
    [CONSTRUCTIONSTATUS]            NVARCHAR (10)    NULL,
    [INSTALLEDJOBORDER]             NVARCHAR (40)    NULL,
    [INSTALLEDCOMPLETIONDATE]       DATETIME2 (7)    NULL,
    [CONVERSIONID]                  INT              NULL,
    [CONVERSIONWORKPACKAGE]         NVARCHAR (40)    NULL,
    [NOMINALDIAMETER]               NVARCHAR (10)    NULL,
    [COATINGTYPE]                   NVARCHAR (5)     NULL,
    [LOCATINGWIREINDICATOR]         NVARCHAR (3)     NULL,
    [PLASTICTYPE]                   NVARCHAR (10)    NULL,
    [MEASUREDLENGTH]                NUMERIC (38, 8)  NULL,
    [LENGTHSOURCE]                  NVARCHAR (5)     NULL,
    [MANUFACTURER]                  NVARCHAR (20)    NULL,
    [INSTALLATIONMETHOD]            NVARCHAR (20)    NULL,
    [GASTRACEWEIGHT]                INT              NULL,
    [BONDEDINDICATOR]               NVARCHAR (3)     NULL,
    [PRESSURECLASSIFICATION]        NVARCHAR (3)     NULL,
    [FIRSTCONDUITPIPESIZE]          NVARCHAR (4)     NULL,
    [FIRSTCONDUITPIPEMATERIAL]      NVARCHAR (3)     NULL,
    [SECONDCONDUITPIPESIZE]         NVARCHAR (4)     NULL,
    [SECONDCONDUITPIPEMATERIAL]     NVARCHAR (3)     NULL,
    [JOINTTRENCHINDICATOR]          NVARCHAR (3)     NULL,
    [LINEDINDICATOR]                NVARCHAR (3)     NULL,
    [MLXAGREEMENT]                  NVARCHAR (20)    NULL,
    [MLXDATE]                       DATETIME2 (7)    NULL,
    [CROSSINGTYPE]                  NVARCHAR (9)     NULL,
    [MATERIAL]                      INT              NULL,
    [SERVICEORDERNUMBER]            NVARCHAR (255)   NULL,
    [SERVICETYPE]                   NVARCHAR (20)    NULL,
    [CRITICALINDICATOR]             NVARCHAR (3)     NULL,
    [SPECIALFACILITIESDATE]         DATETIME2 (7)    NULL,
    [NONLOCATABLESTUB]              NVARCHAR (3)     NULL,
    [TENPCTERINDICATOR]             NVARCHAR (3)     NULL,
    [TENPCTERLASTREADDATE]          DATETIME2 (7)    NULL,
    [CORRODIBLERISERINDICATOR]      NVARCHAR (3)     NULL,
    [PGEREMOTEUNITNUMBER]           NVARCHAR (50)    NULL,
    [REMOTEINSTALLATIONDATE]        DATETIME2 (7)    NULL,
    [REMOTEMODEL]                   NVARCHAR (50)    NULL,
    [REMOTEPIPETOSOILSITEINDICATOR] NVARCHAR (3)     NULL,
    [INSERTIND]                     NVARCHAR (3)     NULL,
    [SPECIALFACILITYJOBORDER]       NVARCHAR (30)    NULL,
    [PHYSICALPLAT]                  NVARCHAR (10)    NULL,
    [MAPSCALE]                      INT              NULL,
    [DIVISION]                      INT              NULL,
    [COUNTY]                        NVARCHAR (15)    NULL,
    [ZIPCODE]                       NVARCHAR (15)    NULL,
    [CITY]                          NVARCHAR (50)    NULL,
    [PUBLICASSEMBLYINDICATOR]       NVARCHAR (3)     NULL,
    [CREATEUSER]                    NVARCHAR (30)    NULL,
    [CREATEDATE]                    DATETIME2 (7)    NULL,
    [UPDATEUSER]                    NVARCHAR (30)    NULL,
    [UPDATEDATE]                    DATETIME2 (7)    NULL,
    [EQUIPMENTID]                   NVARCHAR (50)    NULL,
    [SAPOBJECTID]                   NVARCHAR (50)    NULL,
    [EMERGENCYZONENAME1]            NVARCHAR (15)    NULL,
    [EMERGENCYZONENAME2]            NVARCHAR (15)    NULL,
    [EMERGENCYZONENAME3]            NVARCHAR (15)    NULL,
    [EMERGENCYZONENAME4]            NVARCHAR (15)    NULL,
    [HOUSEADDRESS]                  NVARCHAR (255)   NULL,
    [STREETNAME]                    NVARCHAR (255)   NULL,
    [WORKCENTER]                    NVARCHAR (10)    NULL,
    [LOCATIONDESCRIPTION]           NVARCHAR (255)   NULL,
    [APPLICANTINSTALLEXPDATE]       DATETIME2 (7)    NULL,
    [APPLICANTTRENCHEXPDATE]        DATETIME2 (7)    NULL,
    [RECORDEDPLAT]                  NVARCHAR (10)    NULL,
    [PHYSICALWALLMAP]               NVARCHAR (10)    NULL,
    [RECORDEDBLOCK]                 NVARCHAR (10)    NULL,
    [SPECIALFACILITIES]             NVARCHAR (3)     NULL,
    [EMMARKERINSTALLED]             NVARCHAR (3)     NULL,
    [RECORDEDWALLMAP]               NVARCHAR (10)    NULL,
    [HARDTOLOCATEINDICATOR]         NVARCHAR (3)     NULL,
    [THERMALBILLINGAREANAME]        NVARCHAR (100)   NULL,
    [SYMBOLSCALE]                   INT              NULL,
    [CAPNUMBER]                     NVARCHAR (30)    NULL,
    [COGENSERVICEINDICATOR]         NVARCHAR (3)     NULL,
    [CPANAME]                       NVARCHAR (50)    NULL,
    [CPSYSTEMSTATUS]                INT              NULL,
    [CPTYPE]                        NVARCHAR (25)    NULL,
    [FOREMANLANID]                  NVARCHAR (10)    NULL,
    [GASPRESSURESYSTEMNAME]         NVARCHAR (50)    NULL,
    [INSULATEDINDICATOR]            NVARCHAR (3)     NULL,
    [OVERHEADSERVICEINDIACOR]       NVARCHAR (3)     NULL,
    [PIPETYPE]                      NVARCHAR (5)     NULL,
    [PLANNINGMODELNAME]             NVARCHAR (50)    NULL,
    [SERVICEID]                     INT              NULL,
    [STATUS]                        NVARCHAR (3)     NULL,
    [SHAPE]                         [sys].[geometry] NULL,
    [OPERATIONALDATE]               DATETIME2 (7)    NULL,
    [RWNUMBER]                      INT              NULL,
    [ASBESTOSDETECTEDIND]           NVARCHAR (3)     NULL,
    [ASBESTOSTESTRPRTDAT]           DATETIME2 (7)    NULL,
    [ASBESTOSTESTRPRTLAB]           NVARCHAR (100)   NULL,
    [ASBESTOSTESTRPRTNUM]           NVARCHAR (50)    NULL,
    [SAPMAINTENANCESTATUS]          NVARCHAR (10)    NULL,
    [INTEGRITYMANAGEMENTAREA]       NVARCHAR (20)    NULL,
    [APPLICANTINSTALLNAME]          NVARCHAR (100)   NULL,
    [DATEOFMANUFACTURE]             DATETIME2 (7)    NULL,
    PRIMARY KEY CLUSTERED ([OBJECTID] ASC)
);


GO
PRINT N'Creating [dbo].[zpgeSERVICE].[I0SERVICEID]...';


GO
CREATE NONCLUSTERED INDEX [I0SERVICEID]
    ON [dbo].[zpgeSERVICE]([SERVICEID] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICE].[I0MATERIAL]...';


GO
CREATE NONCLUSTERED INDEX [I0MATERIAL]
    ON [dbo].[zpgeSERVICE]([MATERIAL] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICE].[G0GASPRESSURESYS]...';


GO
CREATE NONCLUSTERED INDEX [G0GASPRESSURESYS]
    ON [dbo].[zpgeSERVICE]([GASPRESSURESYSTEMNAME] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICE].[I0OBJECTID4]...';


GO
CREATE NONCLUSTERED INDEX [I0OBJECTID4]
    ON [dbo].[zpgeSERVICE]([OBJECTID] ASC, [CONSTRUCTIONSTATUS] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICE].[I0CPANAME]...';


GO
CREATE NONCLUSTERED INDEX [I0CPANAME]
    ON [dbo].[zpgeSERVICE]([CPANAME] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICE].[FDO_SHAPE]...';


GO
CREATE SPATIAL INDEX [FDO_SHAPE]
    ON [dbo].[zpgeSERVICE] ([SHAPE])
    USING GEOMETRY_GRID
    WITH  (
            BOUNDING_BOX = (XMAX = 20081600, XMIN = -16800800, YMAX = 32802000, YMIN = -32802000),
            GRIDS = (LEVEL_1 = MEDIUM, LEVEL_2 = MEDIUM, LEVEL_3 = MEDIUM, LEVEL_4 = MEDIUM)
          );


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION]...';


GO
CREATE TABLE [dbo].[zpgeSERVICELOCATION] (
    [OBJECTID]                       INT              IDENTITY (1, 1) NOT NULL,
    [ANCILLARYROLE]                  SMALLINT         NULL,
    [ENABLED]                        SMALLINT         NULL,
    [GLOBALID]                       UNIQUEIDENTIFIER NOT NULL,
    [SOURCEACCURACY]                 NVARCHAR (14)    NULL,
    [CONSTRUCTIONSTATUS]             NVARCHAR (10)    NULL,
    [INSTALLEDJOBORDER]              NVARCHAR (40)    NULL,
    [INSTALLEDCOMPLETIONDATE]        DATETIME2 (7)    NULL,
    [CONVERSIONID]                   INT              NULL,
    [CONVERSIONWORKPACKAGE]          NVARCHAR (40)    NULL,
    [SYMBOLROTATION]                 NUMERIC (38, 8)  NULL,
    [GASTRACEWEIGHT]                 INT              NULL,
    [HOUSEADDRESS]                   NVARCHAR (255)   NULL,
    [STREETNAME]                     NVARCHAR (255)   NULL,
    [CITY]                           NVARCHAR (50)    NULL,
    [ZIPCODE]                        NVARCHAR (15)    NULL,
    [DELIVERYLOAD]                   NUMERIC (38, 8)  NULL,
    [SCADAINDICATOR]                 NVARCHAR (3)     NULL,
    [STREETNAME2]                    NVARCHAR (255)   NULL,
    [APNNUMBER]                      NVARCHAR (255)   NULL,
    [CURBMETERINDICATOR]             NVARCHAR (3)     NULL,
    [LOCATIONDESCRIPTION]            NVARCHAR (255)   NULL,
    [STRUCTUREINFORMATION]           NVARCHAR (255)   NULL,
    [HOUSEADDRESSOLD]                NVARCHAR (20)    NULL,
    [SUBTYPECD]                      INT              NULL,
    [METERMANIFOLD]                  NVARCHAR (50)    NULL,
    [MAPSCALE]                       INT              NULL,
    [DIVISION]                       INT              NULL,
    [COUNTY]                         NVARCHAR (15)    NULL,
    [PLAT]                           NVARCHAR (10)    NULL,
    [WALLMAP]                        NVARCHAR (10)    NULL,
    [CREATEUSER]                     NVARCHAR (30)    NULL,
    [CREATEDATE]                     DATETIME2 (7)    NULL,
    [UPDATEUSER]                     NVARCHAR (30)    NULL,
    [UPDATEDATE]                     DATETIME2 (7)    NULL,
    [TENPERCENTERINDICATOR]          NVARCHAR (3)     NULL,
    [CPTYPE]                         NVARCHAR (25)    NULL,
    [CPANAME]                        NVARCHAR (50)    NULL,
    [FOURORMORESTORIESINDICATOR]     NVARCHAR (3)     NULL,
    [LAST10PERCENTERREADDATE]        DATETIME2 (7)    NULL,
    [METERPROTECTIONPROGRAMIND]      NVARCHAR (3)     NULL,
    [METERINSIDEINDICATOR]           NVARCHAR (3)     NULL,
    [NUMBEROFCURBMETERS]             SMALLINT         NULL,
    [NUMBEROFPGECUSTOMERSBYADDRESS]  SMALLINT         NULL,
    [PLANNINGMODELNAME]              NVARCHAR (50)    NULL,
    [SCADAFACILITYID]                NVARCHAR (50)    NULL,
    [THERMALBILLINGAREANAME]         NVARCHAR (100)   NULL,
    [TRACTNUMBER]                    NVARCHAR (10)    NULL,
    [SYMBOLSCALE]                    INT              NULL,
    [ASSESSEDCOATINGTYPE]            NVARCHAR (5)     NULL,
    [ASSESSEDDATEOFOPERATION]        DATETIME2 (7)    NULL,
    [ASSESSEDDIAMETER]               NVARCHAR (10)    NULL,
    [ASSESSEDLENGTH]                 INT              NULL,
    [ASSESSEDMATERIAL]               INT              NULL,
    [ASSESSEDPLASTICTYPE]            NVARCHAR (10)    NULL,
    [BLOCK]                          NVARCHAR (10)    NULL,
    [SERVICEID]                      INT              NULL,
    [SERVICETAPGUID]                 UNIQUEIDENTIFIER NULL,
    [CAPNUMBER]                      NVARCHAR (30)    NULL,
    [ASSESSEDMULTIMATERIALIDC]       NVARCHAR (3)     NULL,
    [ASSESSEDMULTISIZEIDC]           NVARCHAR (3)     NULL,
    [SAPOBJECTID]                    NVARCHAR (50)    NULL,
    [CRITICALINDICATOR]              NVARCHAR (3)     NULL,
    [EXPANSIONLOOPINDICATOR]         NVARCHAR (3)     NULL,
    [EXPANSIONLOOPTYPE]              NVARCHAR (5)     NULL,
    [HARDTOLOCATEINDICATOR]          NVARCHAR (3)     NULL,
    [LOCATINGWIREBONDEDTOMAININD]    NVARCHAR (3)     NULL,
    [LOCATINGWIREBONDEDTORISERIND]   NVARCHAR (3)     NULL,
    [LOCATINGWIREBONDEDTOSVCIND]     NVARCHAR (3)     NULL,
    [LOCATINGWIRENICOMAININD]        NVARCHAR (3)     NULL,
    [LOCATINGWIRESTRAPCASE]          NVARCHAR (3)     NULL,
    [LOCATINGWIRESTRAPPEDTORISERIND] NVARCHAR (3)     NULL,
    [LOCATINGWIRETERMCURBVALVE]      NVARCHAR (3)     NULL,
    [LOCATINGWIREWRAPAROUNDTEEIND]   NVARCHAR (3)     NULL,
    [MLXAGREEMENT]                   NVARCHAR (20)    NULL,
    [MLXDATE]                        DATETIME2 (7)    NULL,
    [NONCORRODIBLERISERINDICATOR]    NVARCHAR (3)     NULL,
    [PGEREMOTEUNITNUMBER]            NVARCHAR (50)    NULL,
    [PUBLICASSEMBLYINDICATOR]        NVARCHAR (3)     NULL,
    [REMOTEINSTALLATIONDATE]         DATETIME2 (7)    NULL,
    [REMOTEMODEL]                    NVARCHAR (50)    NULL,
    [REMOTEPIPETOSOILSITEINDICATOR]  NVARCHAR (3)     NULL,
    [RISERDATEOFMANUFACTURE]         DATETIME2 (7)    NULL,
    [RISERINSTALLATIONDATE]          DATETIME2 (7)    NULL,
    [RISERMANUFACTURER]              NVARCHAR (50)    NULL,
    [RISERSIZE]                      NVARCHAR (50)    NULL,
    [SPECIALFACILITIES]              NVARCHAR (3)     NULL,
    [SPECIALFACILITIESDATE]          DATETIME2 (7)    NULL,
    [SPECIALFACILITYJOBORDER]        NVARCHAR (30)    NULL,
    [TENPCTERLASTREADDATE]           DATETIME2 (7)    NULL,
    [WORKCENTER]                     NVARCHAR (10)    NULL,
    [SHAPE]                          [sys].[geometry] NULL,
    [RWNUMBER]                       INT              NULL,
    [DELIVERYPRESSURE]               NVARCHAR (20)    NULL,
    [SAPMAINTENANCESTATUS]           NVARCHAR (10)    NULL,
    PRIMARY KEY CLUSTERED ([OBJECTID] ASC)
);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[I0BLOCK]...';


GO
CREATE NONCLUSTERED INDEX [I0BLOCK]
    ON [dbo].[zpgeSERVICELOCATION]([BLOCK] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[I0HOUSEADDRESS7]...';


GO
CREATE NONCLUSTERED INDEX [I0HOUSEADDRESS7]
    ON [dbo].[zpgeSERVICELOCATION]([HOUSEADDRESS] ASC, [STREETNAME] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[I0SERVICETAPGUID]...';


GO
CREATE NONCLUSTERED INDEX [I0SERVICETAPGUID]
    ON [dbo].[zpgeSERVICELOCATION]([SERVICETAPGUID] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[I0SERVICEID]...';


GO
CREATE NONCLUSTERED INDEX [I0SERVICEID]
    ON [dbo].[zpgeSERVICELOCATION]([SERVICEID] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[I0RISERSIZE]...';


GO
CREATE NONCLUSTERED INDEX [I0RISERSIZE]
    ON [dbo].[zpgeSERVICELOCATION]([RISERSIZE] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[I0CPANAME]...';


GO
CREATE NONCLUSTERED INDEX [I0CPANAME]
    ON [dbo].[zpgeSERVICELOCATION]([CPANAME] ASC);


GO
PRINT N'Creating [dbo].[zpgeSERVICELOCATION].[FDO_SHAPE]...';


GO
CREATE SPATIAL INDEX [FDO_SHAPE]
    ON [dbo].[zpgeSERVICELOCATION] ([SHAPE])
    USING GEOMETRY_GRID
    WITH  (
            BOUNDING_BOX = (XMAX = 20081600, XMIN = -16800800, YMAX = 32802000, YMIN = -32802000),
            GRIDS = (LEVEL_1 = MEDIUM, LEVEL_2 = MEDIUM, LEVEL_3 = MEDIUM, LEVEL_4 = MEDIUM)
          );


GO
PRINT N'Creating [dbo].[zUsersAndRoles]...';


GO
CREATE TABLE [dbo].[zUsersAndRoles] (
    [First]            NVARCHAR (30) NULL,
    [Last]             NVARCHAR (30) NULL,
    [FirstLoginDate]   DATETIME      NULL,
    [LastLoginDate]    DATETIME      NULL,
    [LoginID]          INT           NULL,
    [LANID]            NVARCHAR (60) NULL,
    [PersonID]         INT           NOT NULL,
    [CometTrackerName] NVARCHAR (30) NULL,
    [CometMatch]       VARCHAR (3)   NOT NULL,
    [Division]         VARCHAR (200) NULL,
    [Role]             VARCHAR (100) NULL,
    [SurveyorType]     VARCHAR (100) NULL
);


GO
PRINT N'Creating [dbo].[zUsersAndRoles20160616]...';


GO
CREATE TABLE [dbo].[zUsersAndRoles20160616] (
    [First]            NVARCHAR (30) NULL,
    [Last]             NVARCHAR (30) NULL,
    [FirstLoginDate]   DATETIME      NULL,
    [LastLoginDate]    DATETIME      NULL,
    [LoginID]          INT           NULL,
    [LANID]            NVARCHAR (60) NULL,
    [PersonID]         INT           NOT NULL,
    [CometTrackerName] NVARCHAR (30) NULL,
    [CometMatch]       VARCHAR (3)   NOT NULL,
    [Division]         VARCHAR (200) NULL,
    [Role]             VARCHAR (100) NULL,
    [SurveyorType]     VARCHAR (100) NULL
);


GO
PRINT N'Creating [dbo].[DF_Activitytb_SrvDTLT]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_SrvDTLT] DEFAULT (getdate()) FOR [ActivitySrvDTLT];


GO
PRINT N'Creating [dbo].[DF_Activitytb_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [ActivitySrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_Activitytb_ActivityTitle]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_ActivityTitle] DEFAULT ('') FOR [ActivityTitle];


GO
PRINT N'Creating [dbo].[DF_Activitytb_ActivityBillingCode]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_ActivityBillingCode] DEFAULT ('') FOR [ActivityBillingCode];


GO
PRINT N'Creating [dbo].[DF_Activitytb_ActivityCode]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_ActivityCode] DEFAULT ('') FOR [ActivityCode];


GO
PRINT N'Creating [dbo].[DF_Activitytb_ActivityPayCode]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_ActivityPayCode] DEFAULT ('') FOR [ActivityPayCode];


GO
PRINT N'Creating [dbo].[DF_Activitytb_ActivityArchiveFlag]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_ActivityArchiveFlag] DEFAULT ((0)) FOR [ActivityArchiveFlag];


GO
PRINT N'Creating [dbo].[DF_Activitytb_ActivityCreateDate]...';


GO
ALTER TABLE [dbo].[ActivityTb]
    ADD CONSTRAINT [DF_Activitytb_ActivityCreateDate] DEFAULT (getdate()) FOR [ActivityCreateDate];


GO
PRINT N'Creating [dbo].[DF_BreadcrumbTb_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[BreadcrumbTb]
    ADD CONSTRAINT [DF_BreadcrumbTb_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [BreadcrumbSrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_BreadcrumbTb_SrvDTLT]...';


GO
ALTER TABLE [dbo].[BreadcrumbTb]
    ADD CONSTRAINT [DF_BreadcrumbTb_SrvDTLT] DEFAULT (getdate()) FOR [BreadcrumbSrvDTLT];


GO
PRINT N'Creating [dbo].[DF_BreadcrumbTb_BreadcrumbMapPlat]...';


GO
ALTER TABLE [dbo].[BreadcrumbTb]
    ADD CONSTRAINT [DF_BreadcrumbTb_BreadcrumbMapPlat] DEFAULT ('') FOR [BreadcrumbMapPlat];


GO
PRINT N'Creating [dbo].[DF_BreadcrumbTb_BreadcrumbArchiveFlag]...';


GO
ALTER TABLE [dbo].[BreadcrumbTb]
    ADD CONSTRAINT [DF_BreadcrumbTb_BreadcrumbArchiveFlag] DEFAULT ((0)) FOR [BreadcrumbArchiveFlag];


GO
PRINT N'Creating [dbo].[DF_BreadcrumbTb_BreadcrumbCreatedDate]...';


GO
ALTER TABLE [dbo].[BreadcrumbTb]
    ADD CONSTRAINT [DF_BreadcrumbTb_BreadcrumbCreatedDate] DEFAULT (getdate()) FOR [BreadcrumbCreatedDate];


GO
PRINT N'Creating [dbo].[DF_r_DropDowns_CreateDTLT]...';


GO
ALTER TABLE [dbo].[rDropDown]
    ADD CONSTRAINT [DF_r_DropDowns_CreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_r_DropDowns_Revision]...';


GO
ALTER TABLE [dbo].[rDropDown]
    ADD CONSTRAINT [DF_r_DropDowns_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_r_DropDowns_SortSeq]...';


GO
ALTER TABLE [dbo].[rDropDown]
    ADD CONSTRAINT [DF_r_DropDowns_SortSeq] DEFAULT ((0)) FOR [SortSeq];


GO
PRINT N'Creating [dbo].[DF_r_DropDowns_BreadcrumbFreq]...';


GO
ALTER TABLE [dbo].[rDropDown]
    ADD CONSTRAINT [DF_r_DropDowns_BreadcrumbFreq] DEFAULT ((60)) FOR [BreadcrumbFreq];


GO
PRINT N'Creating [dbo].[DF_r_DropDowns_SurveyMode]...';


GO
ALTER TABLE [dbo].[rDropDown]
    ADD CONSTRAINT [DF_r_DropDowns_SurveyMode] DEFAULT ((0)) FOR [SurveyModeFlag];


GO
PRINT N'Creating [dbo].[DF_rFilterCreatedUserID]...';


GO
ALTER TABLE [dbo].[rFilter]
    ADD CONSTRAINT [DF_rFilterCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_rFilterCreateDTLT]...';


GO
ALTER TABLE [dbo].[rFilter]
    ADD CONSTRAINT [DF_rFilterCreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_rFilterRevision]...';


GO
ALTER TABLE [dbo].[rFilter]
    ADD CONSTRAINT [DF_rFilterRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rFilterStatusType]...';


GO
ALTER TABLE [dbo].[rFilter]
    ADD CONSTRAINT [DF_rFilterStatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_r_FormParameters_CreateDTLTOffset]...';


GO
ALTER TABLE [dbo].[rFormParameter]
    ADD CONSTRAINT [DF_r_FormParameters_CreateDTLTOffset] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_r_FormParameters_Revision]...';


GO
ALTER TABLE [dbo].[rFormParameter]
    ADD CONSTRAINT [DF_r_FormParameters_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rgMapGridLogCreatedUserID]...';


GO
ALTER TABLE [dbo].[rgMapGridLog]
    ADD CONSTRAINT [DF_rgMapGridLogCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_rgMapGridLogCreateDTLT]...';


GO
ALTER TABLE [dbo].[rgMapGridLog]
    ADD CONSTRAINT [DF_rgMapGridLogCreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_rgMapGridLogRevision]...';


GO
ALTER TABLE [dbo].[rgMapGridLog]
    ADD CONSTRAINT [DF_rgMapGridLogRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rgMapGridLogStatusType]...';


GO
ALTER TABLE [dbo].[rgMapGridLog]
    ADD CONSTRAINT [DF_rgMapGridLogStatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_r_LightHouseMenus_CreateDTLT]...';


GO
ALTER TABLE [dbo].[rLightHouseMenu]
    ADD CONSTRAINT [DF_r_LightHouseMenus_CreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_r_LightHouseMenus_Revision]...';


GO
ALTER TABLE [dbo].[rLightHouseMenu]
    ADD CONSTRAINT [DF_r_LightHouseMenus_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rMeterCreatedUserID]...';


GO
ALTER TABLE [dbo].[rMeter]
    ADD CONSTRAINT [DF_rMeterCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_rMeterCreateDTLT]...';


GO
ALTER TABLE [dbo].[rMeter]
    ADD CONSTRAINT [DF_rMeterCreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_rMeterRevision]...';


GO
ALTER TABLE [dbo].[rMeter]
    ADD CONSTRAINT [DF_rMeterRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rMeterStatusType]...';


GO
ALTER TABLE [dbo].[rMeter]
    ADD CONSTRAINT [DF_rMeterStatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_rRegulatorCreatedUserID]...';


GO
ALTER TABLE [dbo].[rRegulator]
    ADD CONSTRAINT [DF_rRegulatorCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_rRegulatorCreateDTLT]...';


GO
ALTER TABLE [dbo].[rRegulator]
    ADD CONSTRAINT [DF_rRegulatorCreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_rRegulatorRevision]...';


GO
ALTER TABLE [dbo].[rRegulator]
    ADD CONSTRAINT [DF_rRegulatorRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rRegulatorStatusType]...';


GO
ALTER TABLE [dbo].[rRegulator]
    ADD CONSTRAINT [DF_rRegulatorStatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_r_Reports_CreateDTLTOffset]...';


GO
ALTER TABLE [dbo].[rReport]
    ADD CONSTRAINT [DF_r_Reports_CreateDTLTOffset] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_r_Reports_Revision]...';


GO
ALTER TABLE [dbo].[rReport]
    ADD CONSTRAINT [DF_r_Reports_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_r_Reports_SortSeq]...';


GO
ALTER TABLE [dbo].[rReport]
    ADD CONSTRAINT [DF_r_Reports_SortSeq] DEFAULT ((0)) FOR [ReportSortSeq];


GO
PRINT N'Creating [dbo].[DF_rReportingGroup_CreatedDateTime]...';


GO
ALTER TABLE [dbo].[rReportingGroup]
    ADD CONSTRAINT [DF_rReportingGroup_CreatedDateTime] DEFAULT (getdate()) FOR [CreatedDateTime];


GO
PRINT N'Creating [dbo].[DF_rReportingGroup_Revision]...';


GO
ALTER TABLE [dbo].[rReportingGroup]
    ADD CONSTRAINT [DF_rReportingGroup_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rReportingGroup_ActiveFlag]...';


GO
ALTER TABLE [dbo].[rReportingGroup]
    ADD CONSTRAINT [DF_rReportingGroup_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_rReportingGroup_IsGroupFlag]...';


GO
ALTER TABLE [dbo].[rReportingGroup]
    ADD CONSTRAINT [DF_rReportingGroup_IsGroupFlag] DEFAULT ((0)) FOR [IsGroupFlag];


GO
PRINT N'Creating [dbo].[DF_rRole_CreatedUserUID]...';


GO
ALTER TABLE [dbo].[rRole]
    ADD CONSTRAINT [DF_rRole_CreatedUserUID] DEFAULT (getdate()) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_r_Roles_CreateDate]...';


GO
ALTER TABLE [dbo].[rRole]
    ADD CONSTRAINT [DF_r_Roles_CreateDate] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_r_Roles_Revision]...';


GO
ALTER TABLE [dbo].[rRole]
    ADD CONSTRAINT [DF_r_Roles_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_r_Roles_ActiveFlag]...';


GO
ALTER TABLE [dbo].[rRole]
    ADD CONSTRAINT [DF_r_Roles_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_r_Users_ModifiedUseruID]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_r_Users_ModifiedUseruID] DEFAULT ('') FOR [ModifiedUserUID];


GO
PRINT N'Creating [dbo].[DF_r_Users_CreateDate]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_r_Users_CreateDate] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_r_Users_Revision]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_r_Users_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_r_Users_ActiveFlag]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_r_Users_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_r_Users_InActiveFlag]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_r_Users_InActiveFlag] DEFAULT ((0)) FOR [UserInActiveFlag];


GO
PRINT N'Creating [dbo].[DF_rUser_UserName]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_rUser_UserName] DEFAULT ('') FOR [UserName];


GO
PRINT N'Creating [dbo].[DF_rUser_UserAppRoleType]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_rUser_UserAppRoleType] DEFAULT ('') FOR [UserAppRoleType];


GO
PRINT N'Creating [dbo].[DF_rUser_UserActiveFlag]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_rUser_UserActiveFlag] DEFAULT ((1)) FOR [UserActiveFlag];


GO
PRINT N'Creating [dbo].[DF_rUser_UserArchiveFlag]...';


GO
ALTER TABLE [dbo].[rUser]
    ADD CONSTRAINT [DF_rUser_UserArchiveFlag] DEFAULT ((0)) FOR [UserArchiveFlag];


GO
PRINT N'Creating [dbo].[DF_rWorkCenterCreatedUserID]...';


GO
ALTER TABLE [dbo].[rWorkCenter]
    ADD CONSTRAINT [DF_rWorkCenterCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_rWorkCenterCreateDTLT]...';


GO
ALTER TABLE [dbo].[rWorkCenter]
    ADD CONSTRAINT [DF_rWorkCenterCreateDTLT] DEFAULT (getdate()) FOR [CreatedDTLT];


GO
PRINT N'Creating [dbo].[DF_rWorkCenterRevision]...';


GO
ALTER TABLE [dbo].[rWorkCenter]
    ADD CONSTRAINT [DF_rWorkCenterRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_rWorkCenter_EZTechClientCode]...';


GO
ALTER TABLE [dbo].[rWorkCenter]
    ADD CONSTRAINT [DF_rWorkCenter_EZTechClientCode] DEFAULT ('') FOR [EZTechClientCode];


GO
PRINT N'Creating [dbo].[DF_r_WorkCenter_Revision]...';


GO
ALTER TABLE [dbo].[rWorkCenter_Old]
    ADD CONSTRAINT [DF_r_WorkCenter_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_r_WorkCenter_ActiveFlag]...';


GO
ALTER TABLE [dbo].[rWorkCenter_Old]
    ADD CONSTRAINT [DF_r_WorkCenter_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_t_AssignedWorkQueues_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_t_AssignedWorkQueues_SrvDTLT] DEFAULT (getdate()) FOR [SrvCreatedDTLT];


GO
PRINT N'Creating [dbo].[DF_t_AssignedWorkQueues_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_t_AssignedWorkQueues_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvCreatedDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_t_AssignedWorkQueues_Revision]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_t_AssignedWorkQueues_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tAssignedWorkQueue_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_tAssignedWorkQueue_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_t_AssignedWorkQueues_AcceptedFlag]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_t_AssignedWorkQueues_AcceptedFlag] DEFAULT ((0)) FOR [AcceptedFlag];


GO
PRINT N'Creating [dbo].[DF_t_AssignedWorkQueues_Locked]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_t_AssignedWorkQueues_Locked] DEFAULT ((0)) FOR [LockedFlag];


GO
PRINT N'Creating [dbo].[DF_t_AssignedWorkQueues_PendingReassignFlag]...';


GO
ALTER TABLE [dbo].[tAssignedWorkQueue]
    ADD CONSTRAINT [DF_t_AssignedWorkQueues_PendingReassignFlag] DEFAULT ((0)) FOR [PendingDeleteFlag];


GO
PRINT N'Creating [dbo].[DF_tEquipmentLogCreatedUserID]...';


GO
ALTER TABLE [dbo].[tEquipmentLog]
    ADD CONSTRAINT [DF_tEquipmentLogCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_tEquipmentLogCreateDTLT]...';


GO
ALTER TABLE [dbo].[tEquipmentLog]
    ADD CONSTRAINT [DF_tEquipmentLogCreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_tEquipmentLogRevision]...';


GO
ALTER TABLE [dbo].[tEquipmentLog]
    ADD CONSTRAINT [DF_tEquipmentLogRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_t_EquipmentLog_CreateDTLT]...';


GO
ALTER TABLE [dbo].[tEquipmentLog_Old]
    ADD CONSTRAINT [DF_t_EquipmentLog_CreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_t_EquipmentLog_Revision]...';


GO
ALTER TABLE [dbo].[tEquipmentLog_Old]
    ADD CONSTRAINT [DF_t_EquipmentLog_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_t_EquipmentLog_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tEquipmentLog_Old]
    ADD CONSTRAINT [DF_t_EquipmentLog_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tEquipmentMRP_CreatedDateTime]...';


GO
ALTER TABLE [dbo].[tEquipmentMRP]
    ADD CONSTRAINT [DF_tEquipmentMRP_CreatedDateTime] DEFAULT (getdate()) FOR [CreatedDateTime];


GO
PRINT N'Creating [dbo].[DF_tEquipmentMRP_Revision]...';


GO
ALTER TABLE [dbo].[tEquipmentMRP]
    ADD CONSTRAINT [DF_tEquipmentMRP_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tEquipmentMRP_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tEquipmentMRP]
    ADD CONSTRAINT [DF_tEquipmentMRP_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tEquipmentMRP_ManufactureQuanity]...';


GO
ALTER TABLE [dbo].[tEquipmentMRP]
    ADD CONSTRAINT [DF_tEquipmentMRP_ManufactureQuanity] DEFAULT ((1)) FOR [ManufactureQuanity];


GO
PRINT N'Creating [dbo].[DF_tEquipmentMRP_ApprovedFlag]...';


GO
ALTER TABLE [dbo].[tEquipmentMRP]
    ADD CONSTRAINT [DF_tEquipmentMRP_ApprovedFlag] DEFAULT ((0)) FOR [ApprovedFlag];


GO
PRINT N'Creating [dbo].[DF_g_Activity_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgActivity]
    ADD CONSTRAINT [DF_g_Activity_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_Activity_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgActivity]
    ADD CONSTRAINT [DF_g_Activity_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_Assets_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_Assets_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_Assets_Revision]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAsset_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_tgAsset_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_StatusType]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_g_Assets_NewAssetFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_NewAssetFlag] DEFAULT ((0)) FOR [NewAssetFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_NonAssetLocationFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_NonAssetLocationFlag] DEFAULT ((0)) FOR [NonAssetLocationFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_CGEFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_CGEFlag] DEFAULT ((0)) FOR [CGEFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_AOCFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_AOCFlag] DEFAULT ((0)) FOR [AOCFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_InspectFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_InspectFlag] DEFAULT ((0)) FOR [InspectFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_LeakIndicationFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_LeakIndicationFlag] DEFAULT ((0)) FOR [LeakIndicationFlag];


GO
PRINT N'Creating [dbo].[DF_g_Assets_OtherIndicationFlag]...';


GO
ALTER TABLE [dbo].[tgAsset]
    ADD CONSTRAINT [DF_g_Assets_OtherIndicationFlag] DEFAULT ((0)) FOR [OtherIndicationFlag];


GO
PRINT N'Creating [dbo].[DF_g_Address_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_Address_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_Revision]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddress_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_tgAssetAddress_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_StatusType]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_NewAssetFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_NewAssetFlag] DEFAULT ((0)) FOR [NewAssetFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_NonAssetLocationFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_NonAssetLocationFlag] DEFAULT ((0)) FOR [NonAssetLocationFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_AssetCorrectionFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_AssetCorrectionFlag] DEFAULT ((0)) FOR [AssetAddessCorrectionFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_AssetIDNumberCorrectionFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_AssetIDNumberCorrectionFlag] DEFAULT ((0)) FOR [AssetIDNumberCorrectionFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAddress_AssetConfirmFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_g_AssetAddress_AssetConfirmFlag] DEFAULT ((0)) FOR [AssetConfirmFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddress_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_tgAssetAddress_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddress_AOCFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_tgAssetAddress_AOCFlag] DEFAULT ((0)) FOR [AOCFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddress_CGIFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddress]
    ADD CONSTRAINT [DF_tgAssetAddress_CGIFlag] DEFAULT ((0)) FOR [CGIFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAOCs_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_g_AssetAOCs_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_AssetAOCs_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_g_AssetAOCs_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_AssetAOCs_Revision]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_g_AssetAOCs_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressAOC_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_tgAssetAddressAOC_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetAOCs_StatusType]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_g_AssetAOCs_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressAOC_ApprovedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_tgAssetAddressAOC_ApprovedFlag] DEFAULT ((0)) FOR [ApprovedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressAOC_SubmittedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_tgAssetAddressAOC_SubmittedFlag] DEFAULT ((0)) FOR [SubmittedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressAOC_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressAOC]
    ADD CONSTRAINT [DF_tgAssetAddressAOC_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressCGE_ModifiedUserUID]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_tgAssetAddressCGE_ModifiedUserUID] DEFAULT ('') FOR [ModifiedUserUID];


GO
PRINT N'Creating [dbo].[DF_g_AssetCGEs_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_g_AssetCGEs_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_AssetCGEs_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_g_AssetCGEs_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_AssetCGEs_Revision]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_g_AssetCGEs_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressCGE_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_tgAssetAddressCGE_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetCGEs_StatusType]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_g_AssetCGEs_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressCGE_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressCGE]
    ADD CONSTRAINT [DF_tgAssetAddressCGE_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressIndication_ModifiedUserUID]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_tgAssetAddressIndication_ModifiedUserUID] DEFAULT ('') FOR [ModifiedUserUID];


GO
PRINT N'Creating [dbo].[DF_g_AssetIndications_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_g_AssetIndications_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_AssetIndications_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_g_AssetIndications_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_AssetIndications_Revision]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_g_AssetIndications_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressIndication_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_tgAssetAddressIndication_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetIndications_StatusType]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_g_AssetIndications_StatusType] DEFAULT ('In Progress') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressIndication_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_tgAssetAddressIndication_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressIndication_LockedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressIndication]
    ADD CONSTRAINT [DF_tgAssetAddressIndication_LockedFlag] DEFAULT ((1)) FOR [LockedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressInspection_InGridFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressInspection]
    ADD CONSTRAINT [DF_tgAssetAddressInspection_InGridFlag] DEFAULT ((0)) FOR [InGridFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressInspection_srvDTLT]...';


GO
ALTER TABLE [dbo].[tgAssetAddressInspection]
    ADD CONSTRAINT [DF_tgAssetAddressInspection_srvDTLT] DEFAULT (getdate()) FOR [srvDTLT];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressInspection_srvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAssetAddressInspection]
    ADD CONSTRAINT [DF_tgAssetAddressInspection_srvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [srvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressInspection_Revision]...';


GO
ALTER TABLE [dbo].[tgAssetAddressInspection]
    ADD CONSTRAINT [DF_tgAssetAddressInspection_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressInspection_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAssetAddressInspection]
    ADD CONSTRAINT [DF_tgAssetAddressInspection_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetAddressInspection_StatusType]...';


GO
ALTER TABLE [dbo].[tgAssetAddressInspection]
    ADD CONSTRAINT [DF_tgAssetAddressInspection_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_g_AssetInspections_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_g_AssetInspections_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_g_AssetInspections_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_g_AssetInspections_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_AssetInspections_Revision]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_g_AssetInspections_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgAssetInspection_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_tgAssetInspection_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_g_AssetInspections_StatusType]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_g_AssetInspections_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tgAssetInspection_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_tgAssetInspection_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetInspection_AdhocFlag]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_tgAssetInspection_AdhocFlag] DEFAULT ((0)) FOR [AdhocFlag];


GO
PRINT N'Creating [dbo].[DF_tgAssetInspection_InspectionFreq]...';


GO
ALTER TABLE [dbo].[tgAssetInspection]
    ADD CONSTRAINT [DF_tgAssetInspection_InspectionFreq] DEFAULT ('') FOR [InspectionFreq];


GO
PRINT N'Creating [dbo].[DF_g_Breadcrumbs_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgBreadcrumb]
    ADD CONSTRAINT [DF_g_Breadcrumbs_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_g_Breadcrumbs_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tgBreadcrumb]
    ADD CONSTRAINT [DF_g_Breadcrumbs_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_tgWindSpeed_srvDTLT]...';


GO
ALTER TABLE [dbo].[tgWindSpeed]
    ADD CONSTRAINT [DF_tgWindSpeed_srvDTLT] DEFAULT (getdate()) FOR [srvDTLT];


GO
PRINT N'Creating [dbo].[DF_tgWindSpeed_srvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tgWindSpeed]
    ADD CONSTRAINT [DF_tgWindSpeed_srvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [srvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_tgWindSpeed_Revision]...';


GO
ALTER TABLE [dbo].[tgWindSpeed]
    ADD CONSTRAINT [DF_tgWindSpeed_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tgWindSpeed_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tgWindSpeed]
    ADD CONSTRAINT [DF_tgWindSpeed_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequestCreatedUserID]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequestCreatedUserID] DEFAULT ((999)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequestCreateDTLT]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequestCreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequestRevision]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequestRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequest_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequest_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequestStatusType]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequestStatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequestPipelineType]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequestPipelineType] DEFAULT ('GD') FOR [PipelineType];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequest_ApprovedFlag]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequest_ApprovedFlag] DEFAULT ((0)) FOR [ApprovedFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequest_SubmittedFlag]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequest_SubmittedFlag] DEFAULT ((0)) FOR [SubmittedFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequest_ReturnedFlag]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequest_ReturnedFlag] DEFAULT ((0)) FOR [ReturnedFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequest_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequest_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionRequest_InspectionType]...';


GO
ALTER TABLE [dbo].[tInspectionRequest]
    ADD CONSTRAINT [DF_tInspectionRequest_InspectionType] DEFAULT ('TR') FOR [InspectionType];


GO
PRINT N'Creating [dbo].[DF_t_InspectionRequestsLog_CreatedUserID]...';


GO
ALTER TABLE [dbo].[tInspectionRequest_Older]
    ADD CONSTRAINT [DF_t_InspectionRequestsLog_CreatedUserID] DEFAULT ((0)) FOR [CreatedUserUID];


GO
PRINT N'Creating [dbo].[DF_t_InspectionRequestsLog_CreateDTLT]...';


GO
ALTER TABLE [dbo].[tInspectionRequest_Older]
    ADD CONSTRAINT [DF_t_InspectionRequestsLog_CreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_t_InspectionRequestsLog_Revision]...';


GO
ALTER TABLE [dbo].[tInspectionRequest_Older]
    ADD CONSTRAINT [DF_t_InspectionRequestsLog_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_t_InspectionRequestsLog_StatusType]...';


GO
ALTER TABLE [dbo].[tInspectionRequest_Older]
    ADD CONSTRAINT [DF_t_InspectionRequestsLog_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_t_InspectionRequestsLog_PipelineType]...';


GO
ALTER TABLE [dbo].[tInspectionRequest_Older]
    ADD CONSTRAINT [DF_t_InspectionRequestsLog_PipelineType] DEFAULT ('GD') FOR [PipelineType];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonsEquipment_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tInspectionsEquipment]
    ADD CONSTRAINT [DF_t_InspecitonsEquipment_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonsEquipment_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tInspectionsEquipment]
    ADD CONSTRAINT [DF_t_InspecitonsEquipment_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonsEquipment_Revision]...';


GO
ALTER TABLE [dbo].[tInspectionsEquipment]
    ADD CONSTRAINT [DF_t_InspecitonsEquipment_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tInspectionsEquipment_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tInspectionsEquipment]
    ADD CONSTRAINT [DF_tInspectionsEquipment_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_Revision]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_StatusType]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_EstFeet]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_EstFeet] DEFAULT ((0)) FOR [EstimatedFeet];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_EstServices]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_EstServices] DEFAULT ((0)) FOR [EstimatedServices];


GO
PRINT N'Creating [dbo].[DF_t_InspecitonServices_EstHours]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_t_InspecitonServices_EstHours] DEFAULT ((0)) FOR [EstimatedHours];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_PlaceHolderFlag]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_PlaceHolderFlag] DEFAULT ((0)) FOR [PlaceHolderFlag];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_WindSpeedStartUID]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_WindSpeedStartUID] DEFAULT ('') FOR [WindSpeedStartUID];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_WindSpeedMidUID]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_WindSpeedMidUID] DEFAULT ('') FOR [WindSpeedMidUID];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_MapAreaNumber]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_MapAreaNumber] DEFAULT ((0)) FOR [MapAreaNumber];


GO
PRINT N'Creating [dbo].[DF_tInspectionService_LockedFlag]...';


GO
ALTER TABLE [dbo].[tInspectionService]
    ADD CONSTRAINT [DF_tInspectionService_LockedFlag] DEFAULT ((0)) FOR [LockedFlag];


GO
PRINT N'Creating [dbo].[DF_t_InspectorsOQLog_CreateDTLT]...';


GO
ALTER TABLE [dbo].[tInspectorOQLog]
    ADD CONSTRAINT [DF_t_InspectorsOQLog_CreateDTLT] DEFAULT (getdate()) FOR [CreateDTLT];


GO
PRINT N'Creating [dbo].[DF_tInspectorOQLog_StatusType]...';


GO
ALTER TABLE [dbo].[tInspectorOQLog]
    ADD CONSTRAINT [DF_tInspectorOQLog_StatusType] DEFAULT ('Active') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_t_InspectorsOQ_Revision]...';


GO
ALTER TABLE [dbo].[tInspectorOQLog]
    ADD CONSTRAINT [DF_t_InspectorsOQ_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_t_InspectorsOQLog_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tInspectorOQLog]
    ADD CONSTRAINT [DF_t_InspectorsOQLog_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tMapStamp_CreatedDatetime]...';


GO
ALTER TABLE [dbo].[tMapStamp]
    ADD CONSTRAINT [DF_tMapStamp_CreatedDatetime] DEFAULT (getdate()) FOR [CreatedDatetime];


GO
PRINT N'Creating [dbo].[DF_tMapStamp_StatusDatetime]...';


GO
ALTER TABLE [dbo].[tMapStamp]
    ADD CONSTRAINT [DF_tMapStamp_StatusDatetime] DEFAULT (getdate()) FOR [StatusDatetime];


GO
PRINT N'Creating [dbo].[DF_tMapStamp_Revision]...';


GO
ALTER TABLE [dbo].[tMapStamp]
    ADD CONSTRAINT [DF_tMapStamp_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_CreatedDateTime]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_CreatedDateTime] DEFAULT (getdate()) FOR [CreatedDateTime];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_Revision]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_PicaroEquipmentID]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_PicaroEquipmentID] DEFAULT ('') FOR [PicaroEquipmentID];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_FeetOfMain]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_FeetOfMain] DEFAULT ((0)) FOR [FeetOfMain];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_Services]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_Services] DEFAULT ((0)) FOR [Services];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_WindSpeedStart]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_WindSpeedStart] DEFAULT ((0)) FOR [WindSpeedStart];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_WindSpeedMid]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_WindSpeedMid] DEFAULT ((0)) FOR [WindSpeedMid];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_StatusType]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_StatusType] DEFAULT ('Not Approved') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_SurveyorUID]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_SurveyorUID] DEFAULT ('') FOR [SurveyorUID];


GO
PRINT N'Creating [dbo].[DF_tMapStampPicaro_SurveyDate]...';


GO
ALTER TABLE [dbo].[tMapStampPicaro]
    ADD CONSTRAINT [DF_tMapStampPicaro_SurveyDate] DEFAULT (getdate()) FOR [SurveyDate];


GO
PRINT N'Creating [dbo].[DF_t_MasterLeakLogs_SrvDTLTOffset]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_t_MasterLeakLogs_SrvDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SrvDTLTOffset];


GO
PRINT N'Creating [dbo].[DF_t_MasterLeakLog_SrvDTLT]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_t_MasterLeakLog_SrvDTLT] DEFAULT (getdate()) FOR [SrvDTLT];


GO
PRINT N'Creating [dbo].[DF_t_MasterLeakLogs_Revision]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_t_MasterLeakLogs_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_tMasterLeakLog_ActiveFlag]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_tMasterLeakLog_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_t_MasterLeakLogs_StatusType]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_t_MasterLeakLogs_StatusType] DEFAULT ('Not Approved') FOR [StatusType];


GO
PRINT N'Creating [dbo].[DF_tMasterLeakLog_ApprovedFlag]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_tMasterLeakLog_ApprovedFlag] DEFAULT ((0)) FOR [ApprovedFlag];


GO
PRINT N'Creating [dbo].[DF_tMasterLeakLog_SubmittedFlag]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_tMasterLeakLog_SubmittedFlag] DEFAULT ((0)) FOR [SubmittedFlag];


GO
PRINT N'Creating [dbo].[DF_tMasterLeakLog_CompletedFlag]...';


GO
ALTER TABLE [dbo].[tMasterLeakLog]
    ADD CONSTRAINT [DF_tMasterLeakLog_CompletedFlag] DEFAULT ((0)) FOR [CompletedFlag];


GO
PRINT N'Creating [dbo].[DF_tSCErrorLog_svrDTLT]...';


GO
ALTER TABLE [dbo].[tSCErrorLog]
    ADD CONSTRAINT [DF_tSCErrorLog_svrDTLT] DEFAULT (getdate()) FOR [svrDTLT];


GO
PRINT N'Creating [dbo].[DF_t_TabletDataInsertArchive_SvrDTLT]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertArchive]
    ADD CONSTRAINT [DF_t_TabletDataInsertArchive_SvrDTLT] DEFAULT (getdate()) FOR [SvrDTLT];


GO
PRINT N'Creating [dbo].[DF_t_TabletDataInsertArchive_SvrDTLTOffset]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertArchive]
    ADD CONSTRAINT [DF_t_TabletDataInsertArchive_SvrDTLTOffset] DEFAULT (sysdatetimeoffset()) FOR [SvrDTLTOffset];


GO
PRINT N'Creating [dbo].[DFtTabletDataInsertArchiveBC_SvrDTLT]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertBreadcrumbArchive]
    ADD CONSTRAINT [DFtTabletDataInsertArchiveBC_SvrDTLT] DEFAULT (getdate()) FOR [SvrDTLT];


GO
PRINT N'Creating [dbo].[DFtTabletDataInsertArchiveBC_SvrDTLT_Offset]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertBreadcrumbArchive]
    ADD CONSTRAINT [DFtTabletDataInsertArchiveBC_SvrDTLT_Offset] DEFAULT (sysdatetimeoffset()) FOR [SvrDTLT_Offset];


GO
PRINT N'Creating [dbo].[DFtTabletDataInsertErrorSvrDTLT]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertError]
    ADD CONSTRAINT [DFtTabletDataInsertErrorSvrDTLT] DEFAULT (getdate()) FOR [SvrDTLT];


GO
PRINT N'Creating [dbo].[DFtTabletDataInsertErrorSvrDTLT_Offset]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertError]
    ADD CONSTRAINT [DFtTabletDataInsertErrorSvrDTLT_Offset] DEFAULT (sysdatetimeoffset()) FOR [SvrDTLT_Offset];


GO
PRINT N'Creating [dbo].[DFtTabletDataInsertErrorReprocessed]...';


GO
ALTER TABLE [dbo].[tTabletDataInsertError]
    ADD CONSTRAINT [DFtTabletDataInsertErrorReprocessed] DEFAULT ((0)) FOR [Reprocessed];


GO
PRINT N'Creating [dbo].[DF_tTabletJSONDataInsertError_SvrDTLT]...';


GO
ALTER TABLE [dbo].[tTabletJSONDataInsertError]
    ADD CONSTRAINT [DF_tTabletJSONDataInsertError_SvrDTLT] DEFAULT (getdate()) FOR [SvrDTLT];


GO
PRINT N'Creating [dbo].[DF_tTabletJSONDataInsertError_SvrDTLT_Offset]...';


GO
ALTER TABLE [dbo].[tTabletJSONDataInsertError]
    ADD CONSTRAINT [DF_tTabletJSONDataInsertError_SvrDTLT_Offset] DEFAULT (sysdatetimeoffset()) FOR [SvrDTLT_Offset];


GO
PRINT N'Creating [dbo].[DF_UserTb_UserArchiveFlag]...';


GO
ALTER TABLE [dbo].[UserTb]
    ADD CONSTRAINT [DF_UserTb_UserArchiveFlag] DEFAULT ((0)) FOR [UserArchiveFlag];


GO
PRINT N'Creating [dbo].[DF_UserTb_HomeWorkCenterUID]...';


GO
ALTER TABLE [dbo].[UserTb]
    ADD CONSTRAINT [DF_UserTb_HomeWorkCenterUID] DEFAULT ('') FOR [HomeWorkCenterUID];


GO
PRINT N'Creating [dbo].[DF_OQ_EquipmentxRefID_RequiredForLoginFlag]...';


GO
ALTER TABLE [dbo].[xOQEquipmentTypexRef]
    ADD CONSTRAINT [DF_OQ_EquipmentxRefID_RequiredForLoginFlag] DEFAULT ((0)) FOR [RequiredForLoginFlag];


GO
PRINT N'Creating [dbo].[DF_OQ_EquipmentxRefID_Revision]...';


GO
ALTER TABLE [dbo].[xOQEquipmentTypexRef]
    ADD CONSTRAINT [DF_OQ_EquipmentxRefID_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_OQ_EquipmentxRefID_ActiveFlag]...';


GO
ALTER TABLE [dbo].[xOQEquipmentTypexRef]
    ADD CONSTRAINT [DF_OQ_EquipmentxRefID_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DFxReportingGroupAndDivisionxRefCreateDatetime]...';


GO
ALTER TABLE [dbo].[xReportingGroupAndWorkcenterxRef]
    ADD CONSTRAINT [DFxReportingGroupAndDivisionxRefCreateDatetime] DEFAULT (getdate()) FOR [CreateDatetime];


GO
PRINT N'Creating [dbo].[DFxReportingGroupAndDivisionxRefRevision]...';


GO
ALTER TABLE [dbo].[xReportingGroupAndWorkcenterxRef]
    ADD CONSTRAINT [DFxReportingGroupAndDivisionxRefRevision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DFxReportingGroupAndDivisionxRefActiveFlag]...';


GO
ALTER TABLE [dbo].[xReportingGroupAndWorkcenterxRef]
    ADD CONSTRAINT [DFxReportingGroupAndDivisionxRefActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_xReportingGroupEmployeexRef_CreateDatetime]...';


GO
ALTER TABLE [dbo].[xReportingGroupEmployeexRef]
    ADD CONSTRAINT [DF_xReportingGroupEmployeexRef_CreateDatetime] DEFAULT (getdate()) FOR [CreateDatetime];


GO
PRINT N'Creating [dbo].[DF_xReportingGroupEmployeexRef_Revision]...';


GO
ALTER TABLE [dbo].[xReportingGroupEmployeexRef]
    ADD CONSTRAINT [DF_xReportingGroupEmployeexRef_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_xReportingGroupEmployeexRef_ActiveFlag]...';


GO
ALTER TABLE [dbo].[xReportingGroupEmployeexRef]
    ADD CONSTRAINT [DF_xReportingGroupEmployeexRef_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating [dbo].[DF_xWorkcenterEmployeexRef_CreateDatetime]...';


GO
ALTER TABLE [dbo].[xWorkcenterEmployeexRef]
    ADD CONSTRAINT [DF_xWorkcenterEmployeexRef_CreateDatetime] DEFAULT (getdate()) FOR [CreateDatetime];


GO
PRINT N'Creating [dbo].[DF_xWorkcenterEmployeexRef_Revision]...';


GO
ALTER TABLE [dbo].[xWorkcenterEmployeexRef]
    ADD CONSTRAINT [DF_xWorkcenterEmployeexRef_Revision] DEFAULT ((0)) FOR [Revision];


GO
PRINT N'Creating [dbo].[DF_xWorkcenterEmployeexRef_ActiveFlag]...';


GO
ALTER TABLE [dbo].[xWorkcenterEmployeexRef]
    ADD CONSTRAINT [DF_xWorkcenterEmployeexRef_ActiveFlag] DEFAULT ((1)) FOR [ActiveFlag];


GO
PRINT N'Creating unnamed constraint on [dbo].[auth_assignment]...';


GO
ALTER TABLE [dbo].[auth_assignment]
    ADD FOREIGN KEY ([item_name]) REFERENCES [dbo].[auth_item] ([name]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating unnamed constraint on [dbo].[auth_item]...';


GO
ALTER TABLE [dbo].[auth_item]
    ADD FOREIGN KEY ([rule_name]) REFERENCES [dbo].[auth_rule] ([name]);


GO
PRINT N'Creating unnamed constraint on [dbo].[auth_item_child]...';


GO
ALTER TABLE [dbo].[auth_item_child]
    ADD FOREIGN KEY ([child]) REFERENCES [dbo].[auth_item] ([name]);


GO
PRINT N'Creating unnamed constraint on [dbo].[auth_item_child]...';


GO
ALTER TABLE [dbo].[auth_item_child]
    ADD FOREIGN KEY ([parent]) REFERENCES [dbo].[auth_item] ([name]);


GO
PRINT N'Creating [dbo].[fnGetDistance]...';


GO


CREATE FUNCTION [dbo].[fnGetDistance] 
( 
       @Lat1		Decimal(18, 9)  
      ,@Long1		Decimal(18, 9)
      ,@Lat2		Decimal(18, 9) 
      ,@Long2		Decimal(18, 9) 
      ,@ReturnType	VARCHAR(10) 
)
--RETURNS FLOAT(18) AS
RETURNS DECIMAL(20,3) AS


/*****************************************************************************************************************
	NAME:		[fnGetDistance]
	AUTHOR:		Chris Bowker
	CREATED:	20140225

	**** REVISION HISTORY ***
	Developer		Date		    Description
	Chris Bowker	20140225		Initial Build


	**** TEST BLOCK ***

	DECLARE @Lat1			FLOAT(18)
	DECLARE @Long1			FLOAT(18)
	DECLARE @Lat2			FLOAT(18) 
	DECLARE @Long2			FLOAT(18)  
	DECLARE @ReturnType		VARCHAR(10)  -- ('Miles', 'Kilometers', 'Feet', 'Meters')


	SET @Lat1       = 37.77645			-- SCTP - San Ramon
	SET @Long1      = -121.9725
	SET @Lat2       = 37.78023			-- PG&E San Ramon Training Center
	SET @Long2      = -121.967409
	SET @ReturnType = 'Feet'

	SELECT [dbo].[fnGetDistance](@Lat1,@Long1,@Lat2,@Long2,@ReturnType)

******************************************************************************************************************/

BEGIN
    DECLARE 
	 @R Decimal(18, 9)
    ,@dLat Float(18)
    ,@dLon Float(18) 
    ,@a Float(18)
    ,@c Float(18) 
    ,@d Float(18)
	,@StartPoint geography
	,@EndPoint geography
	,@Distance Decimal(18, 9)
	
	SET @StartPoint = geography::Point(@Lat1, @Long1, 4326)
	SET @EndPoint= geography::Point(@Lat2, @Long2, 4326)

	Set @Distance = @StartPoint.STDistance(@EndPoint)

    SET @R =  
        CASE @ReturnType  
			WHEN 'Miles' THEN .000621371  
			WHEN 'Kilometers' THEN .001
			WHEN 'Feet' THEN 3.28084
			WHEN 'Meters' THEN 1
		ELSE 3.28084 -- Default feet (Garmin rel elev) 
        END

    
	/*SET @dLat	= RADIANS(@lat2 - @lat1)
    SET @dLon	= RADIANS(@long2 - @long1)
    SET @a		=   SIN(@dLat / 2)  
				  * SIN(@dLat / 2)  
		          + COS(RADIANS(@lat1)) 
			      * COS(RADIANS(@lat2))  
				  * SIN(@dLon / 2)  
				  * SIN(@dLon / 2)
    SET @c		= 2 * ASIN(MIN(SQRT(@a)))
	SET @d		= @R * @c
	*/
	
	RETURN Cast(@Distance * @R as Decimal(18, 3))

END
GO
PRINT N'Creating [dbo].[JSON_ParseDate_Str]...';


GO





CREATE FUNCTION [dbo].[JSON_ParseDate_Str]
(
	-- Add the parameters for the function here
	@myDate varchar(50)
	
)
RETURNS varchar(50)
AS
BEGIN
	-- Declare the return variable here
	DECLARE @ResultVar varchar(50)
-- Select [dbo].[JSON_ParseDate_Str]('2014-07-22 13:48:07')
	
	set @myDate = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(@myDate, '-', ''),'/',''),':',''), ' ',''), '\', '')

	--Select @ResultVar = Left(@myDate, 4) + '-' + SUBSTRING(@myDate,5,2) + '-' + SUBSTRING(@myDate,7,2) + ' ' + SUBSTRING(@myDate,9,2) + ':' + SUBSTRING(@myDate,11,2) + ':' + SUBSTRING(@myDate,13,2)

	Select @ResultVar = SUBSTRING(@myDate,5,2) + '/' + SUBSTRING(@myDate,7,2) + '/' +  Left(@myDate, 4) + ' ' + SUBSTRING(@myDate,9,2) + ':' + SUBSTRING(@myDate,11,2) + ':' + SUBSTRING(@myDate,13,2)

	
	-- Return the result of the function
	RETURN @ResultVar

END
GO
PRINT N'Creating [dbo].[fnTabletIR]...';


GO





CREATE FUNCTION [dbo].[fnTabletIR](	@UserUID varchar(100) )


RETURNS @TempIR TABLE
(
	IRUID varchar(100) NULL
	,Division varchar(20) NULL
	,WorkCenter varchar(20) NULL
	,SurveyType varchar(20) NULL
	,MapPlat varchar(20) NULL
	,[NotificationID] varchar(20) NULL
	,ComplianceDueDate varchar(20) NULL
	,[SAPReleased] varchar(20) NULL
	,ComplianceYearMonth varchar(20) NULL
	,AssignedUserUID varchar(100) NULL
	,DispatchMethod varchar(100) NULL
	,IRStatus varchar(100)
	,MapGridUID varchar(100)
	,AssignedWorkQueueUID varchar(100)
	,AssignedDate datetime
	,SortOrder int
)

AS
BEGIN

/*

Select * From fnTabletIR('User_57590026_20160822135947_Postman') Order by SortOrder, WorkCenter

*/

--Declare @UserUID varchar(100) = 'User_57590026_20160822135947_Postman'


	Insert Into @TempIR
	SELECT DISTINCT
	 ir.InspectionRequestUID
	,wc.Division
	,wc.WorkCenter
	,ir.SurveyType
	,Replace(ir.MapID, '-', '/') as [MapPlat]
	,ir.LsNtfNo AS [NotificationID]
	,ir.ComplianceDueDate
	,ir.ReleaseDate AS [SAPReleased]
	,CAST(YEAR(ir.ComplianceDueDate) AS CHAR(4)) + ' - ' + DATENAME(mm, ir.ComplianceDueDate) AS ComplianceYearMonth
	, CASE WHEN awq.AssignedUserUID = @UserUID THEN awq.AssignedUserUID ELSE '' END [AssignedUserUID]
	, CASE WHEN awq.AssignedUserUID = @UserUID THEN awq.DispatchMethod ELSE '' END [DispatchMethod]
	, IR.StatusType
	, IR.MapGridUID
	, ISNULL(awq.AssignedWorkQueueUID, '') [AssignedWorkQueueUID]
	, awq.AssignedDate
	,CASE WHEN u.UserName is NULL THEN 99 else 0 END SortOrder
	FROM [dbo].[rgMapGridLog] mg
	INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
	INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
	LEFT JOIN (SELECT * From  [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
	Left Join (Select * from UserTb where UserActiveFlag = 1 and ISNULL(UserInActiveFlag, 0) = 0 and UserUID = @UserUID) u on u.UserUID = awq.AssignedUserUID
	WHERE ir.StatusType <> 'Completed' AND ISNULL(ir.LsNtfNo, '') <> ''

	Update t set sortOrder = 50
	From @TempIR t
	Join 
	(
	select u.UserUID, wc.WorkCenter, wc.WorkCenterAbbreviation, wc.WorkCenterAbbreviationFLOC from 
	(SELECT * From  UserTb where UserActiveFlag = 1 and ISNULL(UserInActiveFlag, 0) = 0 and UserUID = @UserUID) u
	Join [dbo].[xReportingGroupEmployeexRef] xRG on xrg.UserUID = u.UserUID
	Join [dbo].[rReportingGroup] rg on rg.ReportingGroupUID = xrg.ReportingGroupUID
	Join [dbo].[xReportingGroupAndWorkcenterxRef] xWC on xWC.ReportingGroupUID = rg.ReportingGroupUID
	Join [dbo].[rWorkCenter] wc on wc.WorkCenterUID = xWC.WorkCenterUID
	) U on t.WorkCenter = u.WorkCenter


	--select * from #TempIR order by SortOrder, WorkCenter

	--Drop Table #TempIR

	RETURN

END
GO
PRINT N'Creating [dbo].[fnWebManagementAvailableUserByIR]...';


GO






CREATE FUNCTION [dbo].[fnWebManagementAvailableUserByIR](@IRUID varchar(100) )


RETURNS @TempUsers TABLE
(
	UserUID varchar(100)
	, UserFirstName  varchar(50)
	, UserLastName varchar(50)
	, Surveyor varchar(50)
)

AS
BEGIN

/*

Select * From fnTabletIR('User_57590026_20160822135947_Postman') Order by SortOrder, WorkCenter

*/

--Declare @UserUID varchar(100) = 'User_57590026_20160822135947_Postman'


	Insert Into @TempUsers
	select UserUID, UserFirstName, UserLastName, UserLastName + ', ' + UserFirstName [Surveyor] 
	from [dbo].[UserTb] u
	Left Join (Select AssignedUserUID from  [dbo].[tAssignedWorkQueue] Where AssignedInspectionRequestUID = @IRUID) awq on u.UserUID = awq.AssignedUserUID
	where awq.AssignedUserUID is null

	RETURN

END
GO
PRINT N'Creating [dbo].[parseJSON]...';


GO





CREATE FUNCTION [dbo].[parseJSON]( @JSON VARCHAR(MAX))

RETURNS @hierarchy TABLE

   (

   element_id INT IDENTITY(1, 1) NOT NULL, /* internal surrogate primary key gives the order of parsing and the list order */

   sequenceNo [int] NULL, /* the place in the sequence for the element */

   parent_ID INT Null,/* if the element has a parent then it is in this column. The document is the ultimate parent, so you can get the structure from recursing from the document */

    Object_ID INT Null,/* each list or object has an object id. This ties all elements to a parent. Lists are treated as objects here */

   NAME VARCHAR(2000) Null,/* the name of the object */

   StringValue VARCHAR(MAX) NULL,/*the string representation of the value of the element. */

   ValueType VARCHAR(40) Null /* the declared type of the value represented as a string in StringValue*/
   
   --Contents VARCHAR(500) NULL 

  )

AS

BEGIN

   DECLARE

    @FirstObject BIGINT, --the index of the first open bracket found in the JSON string

    @OpenDelimiter BIGINT,--the index of the next open bracket found in the JSON string

    @NextOpenDelimiter BIGINT,--the index of subsequent open bracket found in the JSON string

    @NextCloseDelimiter BIGINT,--the index of subsequent close bracket found in the JSON string

    @Type VARCHAR(40),--whether it denotes an object or an array

    @NextCloseDelimiterChar CHAR(1),--either a '}' or a ']'

    @Contents VARCHAR(MAX), --the unparsed contents of the bracketed expression

    @Start BIGINT, --index of the start of the token that you are parsing

    @end BIGINT,--index of the end of the token that you are parsing

    @param BIGINT,--the parameter at the end of the next Object/Array token

    @EndOfName BIGINT,--the index of the start of the parameter at end of Object/Array token

    @token VARCHAR(MAX),--either a string or object

    @value VARCHAR(MAX), -- the value as a string

    @SequenceNo BIGINT, -- the sequence number within a list

    @name VARCHAR(MAX), --the name as a string

    @parent_ID BIGINT,--the next parent ID to allocate

    @lenJSON BIGINT,--the current length of the JSON String

    @characters NCHAR(36),--used to convert hex to decimal

    @result BIGINT,--the value of the hex symbol being parsed

    @index SMALLINT,--used for parsing the hex value

    @Escape BIGINT --the index of the next escape character

     

 

   DECLARE @Strings TABLE /* in this temporary table we keep all strings, even the names of the elements, since they are 'escaped' in a different way, and may contain, unescaped, brackets denoting objects or lists. These are replaced in the JSON string by tokens representing the string */

    (

     String_ID INT IDENTITY(1, 1),

     StringValue VARCHAR(MAX)

     )

   SELECT--initialise the characters to convert hex to ascii

    @characters='0123456789abcdefghijklmnopqrstuvwxyz',

    @SequenceNo=0, --set the sequence no. to something sensible.

  /* firstly we process all strings. This is done because [{} and ] aren't escaped in strings, which complicates an iterative parse. */

    @parent_ID=0;

   WHILE 1=1 --forever until there is nothing more to do

     BEGIN

       SELECT

        @start=PATINDEX('%[^a-zA-Z]["]%', @json collate SQL_Latin1_General_CP850_Bin);--next delimited string

       IF @start=0 BREAK --no more so drop through the WHILE loop

       IF SUBSTRING(@json, @start+1, 1)='"' 

        BEGIN --Delimited Name

          SET @start=@Start+1;

          SET @end=PATINDEX('%[^\]["]%', RIGHT(@json, LEN(@json+'|')-@start) collate SQL_Latin1_General_CP850_Bin);

        END

       IF @end=0 --no end delimiter to last string

        BREAK --no more

       SELECT @token=SUBSTRING(@json, @start+1, @end-1)

       --now put in the escaped control characters

       SELECT @token=REPLACE(@token, FROMString, TOString)

       FROM

        (SELECT

          '\"' AS FromString, '"' AS ToString

         UNION ALL SELECT '\\', '\'

         UNION ALL SELECT '\/', '/'

         UNION ALL SELECT '\b', CHAR(08)

         UNION ALL SELECT '\f', CHAR(12)

         UNION ALL SELECT '\n', CHAR(10)

         UNION ALL SELECT '\r', CHAR(13)

         UNION ALL SELECT '\t', CHAR(09)

        ) substitutions

       SELECT @result=0, @escape=1

   --Begin to take out any hex escape codes

       WHILE @escape>0

        BEGIN

          SELECT @index=0,

          --find the next hex escape sequence

          @escape=PATINDEX('%\x[0-9a-f][0-9a-f][0-9a-f][0-9a-f]%', @token collate SQL_Latin1_General_CP850_Bin)

          IF @escape>0 --if there is one

            BEGIN

              WHILE @index<4  --there are always four digits to a \x sequence    

                BEGIN 

                  SELECT --determine its value

                    @result=@result+POWER(16, @index)

                    *(CHARINDEX(SUBSTRING(@token, @escape+2+3-@index, 1),

                                @characters)-1), @index=@index+1 ;

         

                END

                -- and replace the hex sequence by its unicode value

              SELECT @token=STUFF(@token, @escape, 6, NCHAR(@result))

            END

        END

       --now store the string away 

       INSERT INTO @Strings  (StringValue) SELECT @token

       -- and replace the string with a token

       SELECT @JSON=STUFF(@json, @start, @end+1,

                    '@string'+CONVERT(NVARCHAR(5), @@identity))

     END

  -- all strings are now removed. Now we find the first leaf.   

   WHILE 1=1   --forever until there is nothing more to do

   BEGIN

 

   SELECT @parent_ID=@parent_ID+1

   --find the first object or list by looking for the open bracket

   SELECT @FirstObject=PATINDEX('%[{[[]%', @json collate SQL_Latin1_General_CP850_Bin)--object or array

  IF @FirstObject = 0 BREAK

  IF (SUBSTRING(@json, @FirstObject, 1)='{') 

     SELECT @NextCloseDelimiterChar='}', @type='object'

  ELSE 

     SELECT @NextCloseDelimiterChar=']', @type='array'

   SELECT @OpenDelimiter=@firstObject

 

   WHILE 1=1 --find the innermost object or list...

     BEGIN

       SELECT

        @lenJSON=LEN(@JSON+'|')-1

   --find the matching close-delimiter proceeding after the open-delimiter

       SELECT

        @NextCloseDelimiter=CHARINDEX(@NextCloseDelimiterChar, @json,

                                      @OpenDelimiter+1)

   --is there an intervening open-delimiter of either type

       SELECT @NextOpenDelimiter=PATINDEX('%[{[[]%',

             RIGHT(@json, @lenJSON-@OpenDelimiter)collate SQL_Latin1_General_CP850_Bin)--object

       IF @NextOpenDelimiter=0 

        BREAK

       SELECT @NextOpenDelimiter=@NextOpenDelimiter+@OpenDelimiter

       IF @NextCloseDelimiter<@NextOpenDelimiter 

        BREAK

       IF SUBSTRING(@json, @NextOpenDelimiter, 1)='{' 

        SELECT @NextCloseDelimiterChar='}', @type='object'

       ELSE 

        SELECT @NextCloseDelimiterChar=']', @type='array'

       SELECT @OpenDelimiter=@NextOpenDelimiter

     END

   ---and parse out the list or name/value pairs

  SELECT

   @contents=SUBSTRING(@json, @OpenDelimiter+1,

                   @NextCloseDelimiter-@OpenDelimiter-1)

   SELECT

    @JSON=STUFF(@json, @OpenDelimiter,

                @NextCloseDelimiter-@OpenDelimiter+1,

                '@'+@type+CONVERT(NVARCHAR(5), @parent_ID))

   WHILE (PATINDEX('%[A-Za-z0-9@+.e]%', @contents collate SQL_Latin1_General_CP850_Bin))<>0 

     BEGIN

       IF @Type='Object' --it will be a 0-n list containing a string followed by a string, number,boolean, or null

        BEGIN

          SELECT

            @SequenceNo=0,@end=CHARINDEX(':', ' '+@contents)--if there is anything, it will be a string-based name.

          SELECT  @start=PATINDEX('%[^A-Za-z@][@]%', ' '+@contents collate SQL_Latin1_General_CP850_Bin)--AAAAAAAA

         SELECT @token=SUBSTRING(' '+@contents, @start+1, @End-@Start-1),

            @endofname=PATINDEX('%[0-9]%', @token collate SQL_Latin1_General_CP850_Bin),

            @param=RIGHT(@token, LEN(@token)-@endofname+1)

          SELECT

            @token=LEFT(@token, @endofname-1),

            @Contents=RIGHT(' '+@contents, LEN(' '+@contents+'|')-@end-1)

          SELECT  @name=stringvalue FROM @strings

            WHERE string_id=@param --fetch the name

        END

       ELSE 

        SELECT @Name=null,@SequenceNo=@SequenceNo+1 

       SELECT

        @end=CHARINDEX(',', @contents)-- a string-token, object-token, list-token, number,boolean, or null

       IF @end=0 

        SELECT  @end=PATINDEX('%[A-Za-z0-9@+.e][^A-Za-z0-9@+.e]%', @Contents+' ' collate SQL_Latin1_General_CP850_Bin)

          +1

        SELECT

        @start=PATINDEX('%[^A-Za-z0-9@+.e][A-Za-z0-9@+.e]%', ' '+@contents collate SQL_Latin1_General_CP850_Bin)

       --select @start,@end, LEN(@contents+'|'), @contents  

       SELECT

        @Value=RTRIM(SUBSTRING(@contents, @start, @End-@Start)),

        @Contents=RIGHT(@contents+' ', LEN(@contents+'|')-@end)

       IF SUBSTRING(@value, 1, 7)='@object' 

        INSERT INTO @hierarchy

          (NAME, SequenceNo, parent_ID, StringValue, Object_ID, ValueType)

          SELECT @name, @SequenceNo, @parent_ID, SUBSTRING(@value, 8, 5),

            SUBSTRING(@value, 8, 5), 'object' 

       ELSE 

        IF SUBSTRING(@value, 1, 6)='@array' 

          INSERT INTO @hierarchy

            (NAME, SequenceNo, parent_ID, StringValue, Object_ID, ValueType)

            SELECT @name, @SequenceNo, @parent_ID, SUBSTRING(@value, 7, 5),

              SUBSTRING(@value, 7, 5), 'array' 

        ELSE 

          IF SUBSTRING(@value, 1, 7)='@string' 

            INSERT INTO @hierarchy

              (NAME, SequenceNo, parent_ID, StringValue, ValueType)

              SELECT @name, @SequenceNo, @parent_ID, stringvalue,  'string'

              FROM @strings

              WHERE string_id=SUBSTRING(@value, 8, 5)

         ELSE 

            IF @value IN  ('true', 'false') 

              INSERT INTO @hierarchy

                (NAME, SequenceNo, parent_ID, StringValue, ValueType)

                SELECT @name, @SequenceNo, @parent_ID, @value, 'boolean'

            ELSE 

              IF @value='null' 

                INSERT INTO @hierarchy

                  (NAME, SequenceNo, parent_ID, StringValue, ValueType)

                  SELECT @name, @SequenceNo, @parent_ID, @value, 'null'

              ELSE 

                IF PATINDEX('%[^0-9]%', @value collate SQL_Latin1_General_CP850_Bin)>0 

                  INSERT INTO @hierarchy

                    (NAME, SequenceNo, parent_ID, StringValue, ValueType)

                    SELECT @name, @SequenceNo, @parent_ID, @value, 'real'

                ELSE 

                  INSERT INTO @hierarchy

                    (NAME, SequenceNo, parent_ID, StringValue, ValueType)

                    SELECT @name, @SequenceNo, @parent_ID, @value, 'int'

       if @Contents=' ' Select @SequenceNo=0

     END

  END

INSERT INTO @hierarchy (NAME, SequenceNo, parent_ID, StringValue, Object_ID, ValueType)

   SELECT '-',1, NULL, '', @parent_id-1, @type

--

    RETURN
	

	
END
GO
PRINT N'Creating [dbo].[v_01_Test_Geometry_NAD_83_UTM_Z10N]...';


GO

CREATE VIEW dbo.v_01_Test_Geometry_NAD_83_UTM_Z10N AS 

SELECT 
 ROW_NUMBER() OVER(ORDER BY [Latitude], [Longitude]) AS ObjectID
,[LandmarkName]
,[Location]
,[Latitude]
,[Longitude]
,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 26910) AS Shape_Geometry_NAD83_UTM_Z10N
--,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 4326) AS Shape_Geometry_WGS84
--,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography__NAD83_UTM_Z10N
--,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography_WGS84
FROM [dbo].[zLandmarks]
WHERE Location like '%CA'
GO
PRINT N'Creating [dbo].[v_02_Test_Geometry_WGS84]...';


GO

CREATE VIEW dbo.v_02_Test_Geometry_WGS84 AS 

SELECT 
 ROW_NUMBER() OVER(ORDER BY [Latitude], [Longitude]) AS ObjectID
,[LandmarkName]
,[Location]
,[Latitude]
,[Longitude]
--,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 26910) AS Shape_Geometry_NAD83_UTM_Z10N
,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 4326) AS Shape_Geometry_WGS84
--,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography__NAD83_UTM_Z10N
--,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography_WGS84
FROM [dbo].[zLandmarks]
WHERE Location like '%CA'
GO
PRINT N'Creating [dbo].[v_03_Test_Geography_NAD_83_UTM_Z10N]...';


GO



CREATE VIEW [dbo].[v_03_Test_Geography_NAD_83_UTM_Z10N] AS 

SELECT 
 ROW_NUMBER() OVER(ORDER BY [Latitude], [Longitude]) AS ObjectID
,[LandmarkName]
,[Location]
,[Latitude]
,[Longitude]
--,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 26910) AS Shape_Geometry_NAD83_UTM_Z10N
--,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 4326) AS Shape_Geometry_WGS84
,GEOGRAPHY::Point([Longitude], [Latitude], 26910) AS Shape_Geography__NAD83_UTM_Z10N
--,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography_WGS84
FROM [dbo].[zLandmarks]
WHERE Location like '%CA'
GO
PRINT N'Creating [dbo].[v_04_Test_Geography_WGS84]...';


GO
CREATE VIEW dbo.v_04_Test_Geography_WGS84 AS 

SELECT 
 ROW_NUMBER() OVER(ORDER BY [Latitude], [Longitude]) AS ObjectID
,[LandmarkName]
,[Location]
,[Latitude]
,[Longitude]
--,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 26910) AS Shape_Geometry_NAD83_UTM_Z10N
--,GEOMETRY::STPointFromText('POINT(' + CAST([Longitude] AS VARCHAR(20)) + ' ' + CAST([Latitude] AS VARCHAR(20)) + ')', 4326) AS Shape_Geometry_WGS84
--,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography__NAD83_UTM_Z10N
,GEOGRAPHY::Point([Longitude], [Latitude], 4326) AS Shape_Geography_WGS84
FROM [dbo].[zLandmarks]
WHERE Location like '%CA'
GO
PRINT N'Creating [dbo].[v_GetRandom]...';


GO
Create View [dbo].[v_GetRandom]
As

Select Rand() As RandomNumber
GO
PRINT N'Creating [dbo].[vDropDowns]...';


GO


CREATE View [dbo].[vDropDowns]
AS
select *
from [dbo].[rDropDown]
Where StartDate <= Cast(GetDate() As Date)
And ISNULL(InactiveDate, DateAdd(Day, 7, Getdate())) >= Cast(GetDate() As Date)
AND ActiveFlag = 1
GO
PRINT N'Creating [dbo].[vTabletDropDownEquipment]...';


GO
Create View vTabletDropDownEquipment
AS
select u.UserUID
, u.UserLoginID
, u.UserLANID
, u.UserFirstName
, u.UserLastName
, UserEquip.EquipmentLogUID
, UserEquip.EquipmentDisplayType
, UserEquip.SAPEquipmentType
, UserEquip.EqSerNo
, UserEquip.WCAbbrev
, CASE WHEN UserWC.UserUID is null THEN 99 ELSE 10 END [SortOrder]
From UserTb U
Join 
(
	select u.UserUID, OQ.OQProfile, x.EquipmentDisplayType, x.SAPEquipmentType, e.EquipmentLogUID, e.EqSerNo, e.MWC [WCAbbrev]
	from UserTb u
	Join (Select * from [dbo].[tInspectorOQLog] where ActiveFlag = 1) OQ on u.UserUID = OQ.UserUID
	Join (Select * from [dbo].[xOQEquipmentTypexRef] where ActiveFlag = 1) x on x.OQProfile = OQ.OQProfile
	Join (Select * from [dbo].[tEquipmentLog] where ActiveFlag = 1) e on e.EqObjType = x.SAPEquipmentType
) UserEquip on u.UserUID = UserEquip.UserUID
Left Join
(
	select u.UserUID, wc.WorkCenter, wc.WorkCenterAbbreviationFLOC, wc.WorkCenterAbbreviation
	from UserTb u
	Join [dbo].[xReportingGroupEmployeexRef] xrg on u.UserUID = xrg.UserUID
	join [dbo].[rReportingGroup] rg on rg.ReportingGroupUID = xrg.ReportingGroupUID
	Join [dbo].[xReportingGroupAndWorkcenterxRef] xWC on xWC.ReportingGroupUID = rg.ReportingGroupUID
	Join [dbo].[rWorkCenter] wc on wc.WorkCenterUID = xWC.WorkCenterUID
) UserWC on UserEquip.UserUID = UserWC.UserUID and UserEquip.WCAbbrev = UserWC.WorkCenterAbbreviation
GO
PRINT N'Creating [dbo].[vTabletEquipment]...';


GO






CREATE View [dbo].[vTabletEquipment]
AS
select 
el.PrNtfNo
, el.SAPEqID
, el.EqObjType
, el.EqSerNo
, el.MWC
, el.CalbDate
, el.CalbStat
, el.LastCalbStat
, el.MPRNo
, el.UpdateFlag
, '???' MPR_Status
, Case When DATEDIFF(dd, isnull(ie.LastCalDate, dateadd(dd, -7, getdate())), getdate()) < 4 THEN 'YES' ELSE 'NO' END UsedYesterday
, el.CalbTime
, el.SrvyLanID
, el.SpvrLanID
, el.CalbHrs
, el.EquipmentLogUID
from [dbo].[tEquipmentLog] el
left join (select Equipmenttype, SerialNumber, max(srcdtlt) [LastCalDate] from  [dbo].[tInspectionsEquipment] Group By Equipmenttype, SerialNumber) ie on ie.EquipmentType = el.EqObjType and ie.SerialNumber = el.EqSerNo 
where el.ActiveFlag = 1 and el.EqObjType <> 'G_COGIPICA'
GO
PRINT N'Creating [dbo].[vTabletFilter]...';


GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE View [dbo].[vTabletFilter]
AS

SELECT Distinct FilterSizeType, FilterMfgType, FilterModelType
FROM [dbo].[rFilter]
Where ActiveFlag = 1 and StatusType = 'Active'
GO
PRINT N'Creating [dbo].[vTabletMapGrids]...';


GO





CREATE VIEW [dbo].[vTabletMapGrids] AS

/*****************************************************************************************************************
NAME:		[dbo].[vTabletMapGrids]
SERVER:     SC1-DEV01
DATABASE:   vCAT_PGE_GIS_DEV
    
Requirements:					 - None at this time.

Outstanding Issues:              - None at this time.

Permissions for View:			 - GRANT EXECUTE ON [dbo].[vTabletMapGrids] TO [Reports] AS [dbo]
								 - GRANT EXECUTE ON [dbo].[vTabletMapGrids] TO [ApplicationCometTracker] AS [dbo]
HISTORY
DATE            DEVELOPER         COMMENTS
-------------   ---------------   -------------------------------------------------------------------
2016-08-23      CBowker           Initial Build
2016-08-24		CBowker			  Modifictions for new table changes from MapGrids. Left old columns until demo is done on 8/25/16
									Need to retire this view and replace it with the same name from the one that has '_New' after it

*** Debug Code **
******************************************************************************************************************/

-- DECLARE
 
/*****************************************************************************************************************

	-- SELECT * FROM [dbo].[vTabletMapGrid]

******************************************************************************************************************/

---- Base View ---------------------------------------------------------------------------------------------------

SELECT 
	 mg.MapGridUID AS MapGridsUID
	,mg.CreateDTLT
	,mg.ModifiedDTLT
	,mg.FLOC
	,wc.WorkCenter
	,wc.WorkCenterAbbreviation
	,wc.WorkCenterAbbreviationFLOC
	,mg.FuncLocMWC	
	,mg.FuncLocMapBoundary	
	,mg.FuncLocPlatSuffix	
	,mg.FuncLocMap	
	,mg.FuncLocPlat	
	,mg.FuncLocPlatPrefix AS FuncLocPlatChar2
	,mg.FuncLocPlatNo AS FuncLocPlatChar3
	,NULL AS FuncLocPlatChar4
	,mg.CentroidLat
	,mg.CentroidLong
	,mg.GeoBufferWithDrift
FROM [dbo].[rgMapGridLog] mg
LEFT JOIN [dbo].[rWorkCenter] wc ON 
		wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
	AND wc.ActiveFlag = 1
	AND wc.StatusType = 'Active'
WHERE 
	mg.StatusType = 'Active'
AND mg.ActiveFlag = 1

-- Debug filters
--AND mg.FuncLocMWC = 'SNFR'
--AND mg.FuncLocPlatChar3 = 1
GO
PRINT N'Creating [dbo].[vTabletMapGrids_New]...';


GO




CREATE VIEW [dbo].[vTabletMapGrids_New] AS

/*****************************************************************************************************************
NAME:		[dbo].[vTabletMapGrids]
SERVER:     SC1-DEV01
DATABASE:   vCAT_PGE_GIS_DEV
    
Requirements:					 - None at this time.

Outstanding Issues:              - None at this time.

Permissions for View:			 - GRANT SELECT ON [dbo].[vTabletMapGrids] TO [ApplicationCometTracker] AS [dbo]

HISTORY
DATE            DEVELOPER         COMMENTS
-------------   ---------------   -------------------------------------------------------------------
2016-08-23      CBowker           Initial Build
2016-08-24		CBowker			  Modifictions for new table changes from MapGrids. This view should replace the 
									one without the '_New' as the same name after demo on 8/25/16

*** Debug Code **
******************************************************************************************************************/

-- DECLARE
 
/*****************************************************************************************************************

	-- SELECT * FROM [dbo].[vTabletMapGrid]

******************************************************************************************************************/

---- Base View ---------------------------------------------------------------------------------------------------

SELECT 
	 mg.MapGridUID
	,mg.FLOC
	,wc.WorkCenter
	,wc.WorkCenterAbbreviation
	,wc.WorkCenterAbbreviationFLOC
	,mg.FuncLocMWC	
	,mg.FuncLocMapBoundary	
	,mg.FuncLocPlatSuffix	
	,mg.FuncLocMap	
	,mg.FuncLocPlat	
	,mg.FuncLocPlatPrefix
	,mg.FuncLocPlatNo
	,mg.CentroidLat
	,mg.CentroidLong
	,mg.GeoBufferWithDrift
FROM [dbo].[rgMapGridLog] mg
LEFT JOIN [dbo].[rWorkCenter] wc ON 
		wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
	AND wc.ActiveFlag = 1
	AND wc.StatusType = 'Active'
WHERE 
	mg.StatusType = 'Active'
AND mg.ActiveFlag = 1
GO
PRINT N'Creating [dbo].[vTabletMeter]...';


GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE View [dbo].[vTabletMeter]
AS

SELECT Distinct MeterType, MeterMfgType, MeterModelType
FROM [dbo].[rMeter]
Where ActiveFlag = 1 and StatusType = 'Active'


--select * from [dbo].[rMeter]
GO
PRINT N'Creating [dbo].[vTabletRegulator]...';


GO

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE View [dbo].[vTabletRegulator]
AS

SELECT Distinct ISNULL(RegulatorSizeType, 'N/A') [RegulatorSizeType], RegulatorMfgType, RegulatorModelType
FROM [dbo].[rRegulator]
Where ActiveFlag = 1 and StatusType = 'Active'


--select * from [dbo].[rRegulator]
GO
PRINT N'Creating [dbo].[vTabletRouteName]...';


GO
Create View vTabletRouteName
AS
SELECT DISTINCT
 mg.MapGridUID
,mgp.LONG_ROUTE_NAME AS RouteName
FROM
 [dbo].[rgMapGridPipeline] mgp
LEFT  JOIN [dbo].[rgMapGridLog] mg ON 
  mgp.FUNCTIONALLOCATION = mg.FLOC
WHERE 
mgp.FUNCTIONALLOCATION IS NOT NULL
AND mg.MapGridUID IS NOT NULL
GO
PRINT N'Creating [dbo].[vUserAndWorkCenter]...';


GO
create view vUserAndWorkCenter
AS
select 
u.UserLastName, u.UserFirstName, u.UserName, rg.GroupName, wc.Region, wc.WorkCenter 
from UserTb u
left join [dbo].[xReportingGroupEmployeexRef] rge on rge.UserUID = u.UserUID
left join [dbo].[rReportingGroup] rg on rg.ReportingGroupUID = rge.ReportingGroupUID
Left Join [dbo].[xReportingGroupAndWorkcenterxRef] rgwc on rgwc.ReportingGroupUID = rg.ReportingGroupUID
Left Join [dbo].[rWorkCenter] wc on rgwc.WorkCenterUID = wc.WorkCenterUID
--where u.UserName = 'joey'
GO
PRINT N'Creating [dbo].[vUserCurrentOQStatusByUserUID]...';


GO

Create View vUserCurrentOQStatusByUserUID
AS
Select UserUID, Min(ExpireDate) [ExpiringDate], CASE WHEN Min(ExpireDate) < getdate() THEN 'Lapsed' ELSE 'Current' END [Status] from 
(select UserUID, MIN(OQExpireDate) [ExpireDate] from [dbo].[tInspectorOQLog] where OQProfile not in ('OQ-0401', 'OQ-0403') Group By UserUID
Union select UserUID, MAX(OQExpireDate) [ExpireDate] from [dbo].[tInspectorOQLog] where OQProfile in ('OQ-0401', 'OQ-0403') Group By UserUID) s
Group By UserUID
GO
PRINT N'Creating [dbo].[vUserLogin]...';


GO



CREATE View [dbo].[vUserLogin]
AS
Select u.UserUID, u.UserLoginID, u.UserFirstName, u.UserLastName, u.UserLANID, ISNULL(AllowLogin.GoodOQ, 0) [TabletLogin] , wc.WorkCenter, u.UserLastName +', ' + u.UserFirstName [UserFullName]
from UserTb u
Left Join
(Select UserUID
, CASE WHEN OQ0304 > getdate() and OQ0901 > getdate() and (OQ0401 > getdate() or OQ0403 > getdate()) THEN 1 ELSE 0 END [GoodOQ]
From
(
Select UserUID, Max([OQ-0304]) [OQ0304], Max([OQ-0401]) [OQ0401], Max([OQ-0403]) [OQ0403], Max([OQ-0901]) [OQ0901]
From
(select Useruid
,CASE WHEN OQProfile = 'OQ-0304' THEN OQExpireDate ELSE '1/1/1900' END [OQ-0304]
,CASE WHEN OQProfile = 'OQ-0401' THEN OQExpireDate ELSE '1/1/1900' END [OQ-0401]
,CASE WHEN OQProfile = 'OQ-0403' THEN OQExpireDate ELSE '1/1/1900' END [OQ-0403]
,CASE WHEN OQProfile = 'OQ-0901' THEN OQExpireDate ELSE '1/1/1900' END [OQ-0901]
from [dbo].[tInspectorOQLog] Where StatusType = 'Active' and ActiveFlag = 1) Main
Group By UserUID
) OQ ) AllowLogin on u.UserUID = AllowLogin.UserUID
left Join (select * from rWorkCenter where ActiveFlag = 1) wc on u.HomeWorkCenterUID = wc.WorkCenterUID
GO
PRINT N'Creating [dbo].[vWebManagementAOC]...';


GO


CREATE View [dbo].[vWebManagementAOC]
AS
select
Cast(DateFound as date) [Date],
Cast(DateFound as time) [Time],
u.UserLastName + ', ' + UserFirstName + ' (' + u.UserLANID + ')' [Surveyor],
wc.WorkCenter [WorkCenter],
mg.FuncLocMap + '/' + mg.FuncLocPlat [Map/Plat],
ir.SurveyType,
aoc.AOCType,
aoc.MeterNumber,
aa.HouseNo,
aa.Street1 + ', ' + aa.Street2 [Street],
aa.Apt,
aa.City,
aoc.Comments,
aoc.AssetAddressAOCUID [AOCUID],
aoc.ApprovedFlag,
aoc.Photo1,
aoc.Photo2,
aoc.Photo3,
wc.Division,
mg.FLOC,
u.UserLANID [LANID]
from 
	[dbo].[tgAssetAddressAOC] AOC
Join (Select * from UserTb where UserActiveFlag = 1) u on aoc.CreatedUserUID = u.UserUID
Join (Select * from [dbo].[rgMapGridLog] where ActiveFlag = 1) mg on aoc.MapGridUID = mg.MapGridUID
Join (Select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
Join (select * from [dbo].[tgAssetAddress] where ActiveFlag = 1) aa on aa.AssetAddressUID = aoc.AssetAddressUID
Join (select * from [dbo].[tInspectionRequest] where ActiveFlag = 1) ir on ir.InspectionRequestUID = aoc.InspectionRequestUID


--select * from tgAssetInspection where AssetInspectionUID = 'AssetInspection_216698_20160912143930_System'

--IR_79367_20160824222011_System

--update tgAssetAddressAOC set InspectionRequestUID = 'IR_79367_20160824222011_System'
GO
PRINT N'Creating [dbo].[vWebManagementAssignedWorkQueue]...';


GO





CREATE View [dbo].[vWebManagementAssignedWorkQueue]
AS
Select 
wc.Division
,wc.WorkCenter
,ir.SurveyType
,Replace(ir.MapID, '-', '/') as [MapPlat]
,ir.LsNtfNo AS [NotificationID]
,u.UserLastName + ', ' + u.UserFirstName AS [Surveyor]
,u.UserEmployeeType [EmployeeType]
,ir.ComplianceDueDate [ComplianceDate]
,CASE WHEN awq.LockedFlag = 0 THEN 'Assigned' ELSE 'In Progress' END [Status]
--,ir.StatusType [Status]
,awq.DispatchMethod [DispatchMethod]
,ir.InspectionRequestUID [IRUID]
,awq.AssignedWorkQueueUID [AssignedWorkQueueUID]
,u.UserUID
,ir.MapGridUID
,mg.FLOC
,CAST(YEAR(ir.ComplianceDueDate) AS CHAR(4)) + ' - ' + DATENAME(mm, ir.ComplianceDueDate) AS ComplianceYearMonth
,awq.AssignedDate

from
(SELECT * From [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq
Join (Select * from UserTb where UserActiveFlag = 1) u on awq.AssignedUserUID = u.UserUID
Join (Select * from tInspectionRequest where ActiveFlag = 1) ir on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
Join (Select * from rgMapGridLog where ActiveFlag = 1) mg on mg.MapGridUID = ir.MapGridUID
Join (Select * from rWorkCenter where ActiveFlag = 1) wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
Where ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementAssignedWorkQueueStatus]...';


GO
Create View vWebManagementAssignedWorkQueueStatus
AS

Select Distinct
CASE WHEN awq.LockedFlag = 0 THEN 'Assigned' ELSE 'In Progress' END [Status]
from
(SELECT * From [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq
GO
PRINT N'Creating [dbo].[vWebManagementDispatch]...';


GO






CREATE View [dbo].[vWebManagementDispatch] AS
/*****************************************************************************************************************
NAME:		[dbo].[vWebManagementDispatch]
SERVER:     SC1-DEV01
DATABASE:   vCAT_PGE_GIS_DEV
    
Requirements:					 - None at this time.

Outstanding Issues:              - None at this time.

Permissions for View:			 - GRANT SELECT ON [dbo].[vWebManagementDispatch] TO [ApplicationCometTracker] AS [dbo]
HISTORY
DATE            DEVELOPER         COMMENTS
-------------   ---------------   -------------------------------------------------------------------
2016-08-23      GWheeler          Initial Build
2016-08-24		CBowker			  Modifictions for new table changes from MapGrids. Left old columns 
2016-08-24		CBowker			  Added InspectionRequestUID per Jose request

*** Debug Code **
******************************************************************************************************************/

-- DECLARE
 
/*****************************************************************************************************************

	-- SELECT * FROM [dbo].[vTabletMapGrid]

******************************************************************************************************************/

---- Base View ---------------------------------------------------------------------------------------------------

/***
-- Old code that need to be updated to support the correct locations of Wall, Plat 

select wc.Division
, mg.WorkCenter
, ir.SurveyType
, Replace(ir.MapID, '-', '/') as [Map/Plat]
, ir.LsNtfNo [Notification ID]
, ir.ComplianceDueDate
, ir.ReleaseDate [SAP Released]
, ISNULL(awq.AssignedCount, 0) [Assigned]
, Cast(Year(ir.ComplianceDueDate) as Char(4)) + ' - ' + datename(mm, ir.ComplianceDueDate) As ComplianceYearMonth
from rgMapGridLog mg
Join tInspectionRequest ir on ir.MapGridUID = mg.MapGridsUID
Join rWorkCenter wc on wc.WorkCenter = mg.WorkCenter
Left Join (Select AssignedInspectionRequestUID, Count(*) AssignedCount From  tAssignedWorkQueue group by AssignedInspectionRequestUID) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
where ir.StatusType <> 'Completed'

***/

---------------------------------------------------------------------------------------------------------------------------------

SELECT
 ir.InspectionRequestUID
,wc.Division
,wc.WorkCenter
,ir.SurveyType
,Replace(ir.MapID, '-', '/') as [MapPlat]
,ir.LsNtfNo AS [Notification ID]
,ir.ComplianceDueDate
,ir.ReleaseDate AS [SAP Released]
,ISNULL(awq.AssignedCount, 0) AS [Assigned]
,CAST(YEAR(ir.ComplianceDueDate) AS CHAR(4)) + ' - ' + DATENAME(mm, ir.ComplianceDueDate) AS ComplianceYearMonth
,mg.FLOC
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
LEFT JOIN (
			SELECT AssignedInspectionRequestUID, Count(*) AS AssignedCount 
			FROM  [dbo].[tAssignedWorkQueue] 
			GROUP BY AssignedInspectionRequestUID
		   ) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAOCDivision]...';


GO
Create View vWebManagementDropDownAOCDivision
AS

Select distinct wc.Division
From
(Select * from [dbo].[tgAssetAddressAOC] where ActiveFlag = 1) AOC
Join (Select * from [dbo].[rgMapGridLog] where activeflag = 1) mg on aoc.MapGridUID = mg.MapGridUID
Join (select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAOCSurveyor]...';


GO

CREATE View [dbo].[vWebManagementDropDownAOCSurveyor]
AS

Select distinct u.UserLastName + ', ' + u.UserFirstName + ' (' + u.UserLANID + ')' [Surveyor], wc.WorkCenter, wc.Division
From
(Select * from [dbo].[tgAssetAddressAOC] where ActiveFlag = 1) AOC
Join (Select * from [dbo].[rgMapGridLog] where activeflag = 1) mg on aoc.MapGridUID = mg.MapGridUID
Join (select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
join (select * from UserTb where UserActiveFlag = 1) u on aoc.CreatedUserUID = u.UserUID
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAOCType]...';


GO
Create View vWebManagementDropDownAOCType
AS

Select distinct 
AOC.AOCType,
wc.WorkCenter, 
wc.Division,
u.UserLastName + ', ' + u.UserFirstName + ' (' + u.UserLANID + ')' [Surveyor]
From
(Select * from [dbo].[tgAssetAddressAOC] where ActiveFlag = 1) AOC
Left Join (Select * from [dbo].[rgMapGridLog] where activeflag = 1) mg on aoc.MapGridUID = mg.MapGridUID
Left Join (select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left join (select * from UserTb where UserActiveFlag = 1) u on aoc.CreatedUserUID = u.UserUID
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAOCWorkCenter]...';


GO
Create View vWebManagementDropDownAOCWorkCenter
AS

Select distinct wc.WorkCenter, wc.Division
From
(Select * from [dbo].[tgAssetAddressAOC] where ActiveFlag = 1) AOC
Join (Select * from [dbo].[rgMapGridLog] where activeflag = 1) mg on aoc.MapGridUID = mg.MapGridUID
Join (select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAssigned]...';


GO




CREATE View [dbo].[vWebManagementDropDownAssigned]
AS
SELECT Distinct
wc.Division,
wc.WorkCenter,
ir.SurveyType [SurveyFreq],
mg.FLOC,
--ir.statustype,
CASE WHEN awq.LockedFlag = 0 THEN 'Assigned' ELSE 'In Progress' END [StatusType],
awq.[DispatchMethod],

Cast(Year(ir.ComplianceDueDate) as Char(4)) + ' - ' + datename(mm, ir.ComplianceDueDate) As ComplianceYearMonth,
Cast(Year(ir.ComplianceDueDate) as Char(4)) + Right('00' + Cast(Month(ir.ComplianceDueDate) as varchar(2)), 2) AS ComplianceSort
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
Left Join (select * from rWorkCenter where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed' and CHARINDEX('adhoc', ir.InspectionRequestUID) = 0 and awq.AssignedInspectionRequestUID is not null and awq.[DispatchMethod] <> 'Ad Hoc'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAssignedComplianceDate]...';


GO


CREATE View [dbo].[vWebManagementDropDownAssignedComplianceDate]
AS

select Distinct Cast(Year(ir.ComplianceDueDate) as Char(4)) + ' - ' + datename(mm, ir.ComplianceDueDate) As ComplianceYearMonth
, Cast(Year(ir.ComplianceDueDate) as Char(4)) + Right('00' + Cast(Month(ir.ComplianceDueDate) as varchar(2)), 2) AS ComplianceSort
from tInspectionRequest ir
Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.ComplianceDueDate is not null and ir.StatusType <> 'Completed'  and awq.AssignedInspectionRequestUID is Not null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAssignedDivision]...';


GO



CREATE View [dbo].[vWebManagementDropDownAssignedDivision]
AS
SELECT Distinct
 wc.Division
--,wc.WorkCenter
FROM (Select * From [dbo].[rgMapGridLog] where ActiveFlag = 1) mg
INNER JOIN (Select * from [dbo].[tInspectionRequest] where ActiveFlag = 1) ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN (Select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
JOIN (
			SELECT AssignedInspectionRequestUID, Count(*) AS AssignedCount 
			FROM  [dbo].[tAssignedWorkQueue] 
			Where ActiveFlag = 1
			GROUP BY AssignedInspectionRequestUID
		   ) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed' and awq.AssignedInspectionRequestUID is not null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAssignedFLOC]...';


GO






Create View [dbo].[vWebManagementDropDownAssignedFLOC]
AS
SELECT Distinct
mg.FLOC,
wc.Division,
wc.WorkCenter,
ir.SurveyType
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
Left Join (select * from rWorkCenter where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'  and awq.AssignedInspectionRequestUID is Not null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAssignedSurveyFreq]...';


GO


Create View [dbo].[vWebManagementDropDownAssignedSurveyFreq]
AS
select Distinct 
ir.SurveyType,
wc.Division,
wc.WorkCenter
from tInspectionRequest ir 
Left Join (Select * from rgMapGridLog where ActiveFlag = 1) mg on mg.MapGridUID = ir.MapGridUID
Left Join (select * from rWorkCenter where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
where ir.StatusType <> 'Completed' and awq.AssignedInspectionRequestUID is not null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownAssignedWorkCenter]...';


GO




CREATE View [dbo].[vWebManagementDropDownAssignedWorkCenter]
AS
SELECT Distinct
 wc.Division
,wc.WorkCenter
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
JOIN (
			SELECT AssignedInspectionRequestUID, Count(*) AS AssignedCount 
			FROM  [dbo].[tAssignedWorkQueue] 
			Where ActiveFlag = 1
			GROUP BY AssignedInspectionRequestUID
		   ) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatch]...';


GO







Create View [dbo].[vWebManagementDropDownDispatch]
AS
SELECT Distinct
mg.FLOC,
wc.Division,
wc.WorkCenter,
ir.SurveyType,
Cast(Year(ir.ComplianceDueDate) as Char(4)) + ' - ' + datename(mm, ir.ComplianceDueDate) As ComplianceYearMonth,
Cast(Year(ir.ComplianceDueDate) as Char(4)) + Right('00' + Cast(Month(ir.ComplianceDueDate) as varchar(2)), 2) AS ComplianceSort
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
Left Join (select * from rWorkCenter where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'  and awq.AssignedInspectionRequestUID is null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchAssignedDispatchMethod]...';


GO

Create View [dbo].[vWebManagementDropDownDispatchAssignedDispatchMethod]
AS
SELECT Distinct [DispatchMethod] From [vWebManagementAssignedWorkQueue]
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchComplianceDate]...';


GO

CREATE View [dbo].[vWebManagementDropDownDispatchComplianceDate]
AS

select Distinct Cast(Year(ir.ComplianceDueDate) as Char(4)) + ' - ' + datename(mm, ir.ComplianceDueDate) As ComplianceYearMonth
, Cast(Year(ir.ComplianceDueDate) as Char(4)) + Right('00' + Cast(Month(ir.ComplianceDueDate) as varchar(2)), 2) AS ComplianceSort
from tInspectionRequest ir
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'  and awq.AssignedInspectionRequestUID is null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchDivision]...';


GO

CREATE View [dbo].[vWebManagementDropDownDispatchDivision]
AS
SELECT Distinct
 wc.Division
--,wc.WorkCenter
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
LEFT JOIN (
			SELECT AssignedInspectionRequestUID, Count(*) AS AssignedCount 
			FROM  [dbo].[tAssignedWorkQueue] 
			GROUP BY AssignedInspectionRequestUID
		   ) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchFLOC]...';


GO






CREATE View [dbo].[vWebManagementDropDownDispatchFLOC]
AS
SELECT Distinct
mg.FLOC,
wc.Division,
wc.WorkCenter,
ir.SurveyType
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
Left Join (select * from rWorkCenter where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'  and awq.AssignedInspectionRequestUID is null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchMapPlat]...';


GO



CREATE View [dbo].[vWebManagementDropDownDispatchMapPlat]
AS
SELECT Distinct
 wc.WorkCenter
--,ir.MapID AS [Map/Plat]
, Replace(ir.MapID, '-', '/') as [MapPlat]
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
LEFT JOIN (
			SELECT AssignedInspectionRequestUID, Count(*) AS AssignedCount 
			FROM  [dbo].[tAssignedWorkQueue] 
			GROUP BY AssignedInspectionRequestUID
		   ) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchStatus]...';


GO

Create View [dbo].[vWebManagementDropDownDispatchStatus]
AS
select Distinct ir.StatusType [Status]
from tInspectionRequest ir where ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchSurveyType]...';


GO


CREATE View [dbo].[vWebManagementDropDownDispatchSurveyType]
AS
select Distinct 
ir.SurveyType,
wc.Division,
wc.WorkCenter
from tInspectionRequest ir 
Left Join (Select * from rgMapGridLog where ActiveFlag = 1) mg on mg.MapGridUID = ir.MapGridUID
Left Join (select * from rWorkCenter where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq on awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
where ir.StatusType <> 'Completed' and awq.AssignedInspectionRequestUID is null
GO
PRINT N'Creating [dbo].[vWebManagementDropDownDispatchWorkCenter]...';


GO

CREATE View [dbo].[vWebManagementDropDownDispatchWorkCenter]
AS
SELECT Distinct
 wc.Division
,wc.WorkCenter
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
LEFT JOIN (
			SELECT AssignedInspectionRequestUID, Count(*) AS AssignedCount 
			FROM  [dbo].[tAssignedWorkQueue] 
			GROUP BY AssignedInspectionRequestUID
		   ) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
WHERE ir.StatusType <> 'Completed'
GO
PRINT N'Creating [dbo].[vWebManagementDropDownEmployeeType]...';


GO
Create View [vWebManagementDropDownEmployeeType]
AS
Select FieldDescription, SortSeq from rDropDown where FilterName = 'ddEmployeeType'


/*

select * from rDropDown

Insert Into rDropDown
(
CreatedUserUID, DropDownType, FilterName, SortSeq, FieldDisplay, FieldDescription
)
Values
('User_System_Automation', 'WebManagement', 'ddEmployeeType', 0, 'Employee', 'Employee')
,('User_System_Automation', 'WebManagement', 'ddEmployeeType', 1, 'Contractor', 'Contractor')

Update rDropDown set DropDownUID = [dbo].[CreateUID]('DropDown', DropDownID, 'WEB', getdate()) where DropDownUID is null

*/
GO
PRINT N'Creating [dbo].[vWebManagementDropDownReportingGroups]...';


GO

CREATE View [dbo].[vWebManagementDropDownReportingGroups]
AS
Select ReportingGroupUID, GroupName from rReportingGroup
GO
PRINT N'Creating [dbo].[vWebManagementDropDownRoles]...';


GO
Create View [vWebManagementDropDownRoles]
AS
Select RoleName from rRole
GO
PRINT N'Creating [dbo].[vWebManagementDropDownUserWorkCenter]...';


GO



CREATE View [dbo].[vWebManagementDropDownUserWorkCenter]
AS
SELECT Distinct
WorkCenter, WorkCenterUID
FROM rWorkCenter
Where ActiveFlag = 1
GO
PRINT N'Creating [dbo].[vWebManagementEquipmentServices]...';


GO





CREATE view [dbo].[vWebManagementEquipmentServices]
AS
Select 
cast([is].srcdtlt as date) [Date],
SubString(ie.EquipmentType, 7, 10) [EquipmentType],
ie.SerialNumber,
[is].SurveyMode,
ws_start.WindSpeed [WindSpeedStart],
ws_mid.WindSpeed [WindSpeedMid],
[is].EstimatedFeet [FeetOfMain],
[is].EstimatedServices [NumOfServices],
[is].EstimatedHours [Hours],
[is].InspectionServicesUID,
--ie.InspecitonEquipmentUID,
[is].MasterLeakLogUID,
u.UserLastName + ', ' + u.UserFirstName [Surveyor],
wc.Division,
wc.WorkCenter,
mg.FuncLocMap + '/' + mg.FuncLocPlat [Map/Plat],
[is].MapAreaNumber,
[is].LockedFlag
from tInspectionService [is]
Left Join (Select * from [dbo].[tInspectionsEquipment] where ActiveFlag = 1) [ie] on [is].InspectionEquipmentUID = [ie].InspecitonEquipmentUID
Left Join (select * from [dbo].[tgWindSpeed] where ActiveFlag = 1) ws_start on ws_start.WindSpeedUID = [is].WindSpeedStartUID
Left Join (select * from [dbo].[tgWindSpeed] where ActiveFlag = 1) ws_mid  on ws_mid.WindSpeedUID = [is].WindSpeedStartUID
Left Join (Select * from [dbo].[rgMapGridLog] where ActiveFlag = 1) mg on [is].MapGridUID = mg.MapGridUID
left Join (select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
left join (select * from UserTb where UserActiveFlag = 1) u on [is].CreatedUserUID = u.UserUID
Where [is].ActiveFlag = 1
GO
PRINT N'Creating [dbo].[vWebManagementLeakLogDropDown]...';


GO

CREATE View [dbo].[vWebManagementLeakLogDropDown]
AS
Select wc.Division, 
wc.WorkCenter, 
u.UserLastName + ', ' + u.UserFirstName  + ' (' + u.UserLANID + ')' [Surveyor],
 mg.FuncLocMap + '/' + mg.FuncLocPlat [Map/Plat]
 , Format(mll.SrcDTLT, 'd', 'en-US') AS Date
From
(select * from [dbo].[tMasterLeakLog] where ActiveFlag = 1) mll
Left Join (select * from rgMapGridLog where ActiveFlag = 1) mg on mll.MapGridUID = mg.MapGridUID
Left Join (Select * from rWorkCenter where activeflag = 1) wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join (Select * from UserTb where UserActiveFlag = 1) u on mll.CreatedUserUID = u.UserUID
GO
PRINT N'Creating [dbo].[vWebManagementLeaks]...';


GO



CREATE View [dbo].[vWebManagementLeaks]
AS
select
aai.StatusType [Status],
CASE WHEN aai.StatusType not in ('In Progress', 'NotApproved', 'Rejected') THEN 1 ELSE 0 END [Approved],
CASE WHEN aai.PotentialHCAType = 'Y' THEN 'Yes' ELSE 'No' END HCA,
aai.Map + '/' + aai.Plat [Map/Plat],
ISNULL(aai.SAPNo, '') [SAPLeakNumber],
aai.AboveBelowGroundType [AboveBelowGround],
aai.FoundDateTime,
aa.HouseNo + ' ' + aa.Street1 [Address],
aa.City,
aai.SORLType [SORL],
aai.ReadingGrade [ReadingInPct],
aai.FoundBy [InstTypeFoundBy],
aai.GradeBy [InstTypeGradeBy],
aai.GradeType [Grade],
ISNULL(aai.Comments, '') [LocationRemarks],
aai.AssetAddressIndicationUID [UID],
aai.MasterLeakLogUID,
wc.Division,
aai.Map + '-' + aai.Plat [MapPlatNumber],
CASE WHEN aai.MapPlatLeakNumber is not null THEN CAST(aai.mapplatleaknumber as varchar(10)) + '/' ELSE '' END + ISNULL(aai.LeakNo, '') [LeakNo],
aai.LockedFlag [LockFlag]
from (Select * from tgAssetAddressIndication where ActiveFlag = 1) aai
--Join (select * from rDropDown where FilterName = 'ddLHLeakMgmtCurrentStatus' and ActiveFlag = 1) dd on aai.StatusType = dd.FieldValue
Join (Select * from tgAssetAddress where ActiveFlag = 1) aa on aai.AssetAddressUID = aa.AssetAddressUID
Join (Select * from [dbo].[rgMapGridLog] where ActiveFlag = 1) mg on mg.MapGridUID = aai.MapGridUID
join (Select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
GO
PRINT N'Creating [dbo].[vWebManagementMapStampDetail]...';


GO

CREATE View [dbo].[vWebManagementMapStampDetail]
AS
select 
MapStampPicaroUID [SourceUID]
, msp.InspectionRequestUID [IRUID]
, msp.StatusType [Status]
, 'All' [SurveyArea]
, 'PIC' [SurveyType]
, msp.SurveyDate [DateSurveyed]
, ISNULL(u.UserLANID, '') [SurveyorLANID]
, msp.PicaroEquipmentID [InstSerialNum]
, msp.WindSpeedStart
, msp.WindSpeedMid
, 0 [SurveyModeFoot]
, 1 [SurveyModeMoble]
, msp.FeetOfMain
, msp.Services
, 0 [SortOrder]
, msp.Seq
from (select * From [dbo].[tMapStampPicaro] where ActiveFlag = 1) msp
Left Join (Select * from UserTb where UserActiveFlag = 1) u on msp.SurveyorUID = u.UserUID

	


Union 
select 
[is]. InspectionServicesUID [SourceUID]
, [is].InspectionRequestUID [IRUID]
, [is].StatusType [Status]
, Cast([is].MapAreaNumber as varchar(10)) [SurveyArea]
, CASE WHEN CHARINDEX('PIC', EquipmentModeType) > 0 
	THEN SUBSTRING(EquipmentModeType, CHARINDEX('_', EquipmentModeType), CHARINDEX('_', EquipmentModeType, CHARINDEX('_', EquipmentModeType)+ 1))
	ELSE EquipmentModeType
	END [SurveyType]
, [is2].SurveyDate [DateSurveyed]
, ISNULL(u.UserLANID, '') [SurveyorLANID]
, ie.SerialNumber [InstSeerialNum]
, wsbegin.WindSpeed [WindSpeedStart]
, wsmid.WindSpeed [WindSpeedMid]
, CASE WHEN [is].SurveyMode = 'F' THEN 1 ELSE 0 END [SurveyModeFoot]
, CASE WHEN [is].SurveyMode = 'M' THEN 1 ELSE 0 END [SurveyModeMoble]
, [is].EstimatedFeet [FeetOfMain]
, [is].EstimatedServices [Services]
--, 'tInspectionService' [Source Table]
, 1 [SortOrder]
, 0 Seq
from 
(Select * from [dbo].[tInspectionService] where ActiveFlag = 1 and CHARINDEX('Forms/', MasterLeaklogUID) = 0 and SurveyMode <> 'G') [is]
left Join (Select * from UserTb where UserActiveFlag = 1) u on [is].CreatedUserUID = u.UserUID
Join (Select InspectionServicesUID, SrcDTLT [SurveyDate] from [dbo].[tInspectionService] where Revision= 0) [is2] on [is].InspectionServicesUID = [is2].InspectionServicesUID 
Left Join (Select * from tgWindSpeed where ActiveFlag = 1) wsbegin on [is].WindSpeedStartUID = wsbegin.WindSpeedUID
Left Join (Select * from tgWindSpeed where ActiveFlag = 1) wsmid on [is].WindSpeedStartUID = wsmid.WindSpeedUID
Left Join (Select * from [dbo].[tInspectionsEquipment] where ActiveFlag = 1) ie on [is].InspectionEquipmentUID = ie.InspecitonEquipmentUID
--Join (Select InspectionRequestUID
	--	, Sum(EstimatedFeet) [TotalFeetOfMain] 
	--	, Sum(EstimatedServices) [TotalServices]
	--	, SUM(CASE WHEN CHARINDEX('FOV', EquipmentModeType) > 0 THEN EstimatedFeet ELSE 0 END) FOVTotalFeetOfMain
	--	, SUM(CASE WHEN CHARINDEX('FOV', EquipmentModeType) > 0 THEN EstimatedServices ELSE 0 END) FOVTotalServices
	--	, SUM(CASE WHEN CHARINDEX('LISA', EquipmentModeType) > 0 THEN EstimatedFeet ELSE 0 END) LISATotalFeetOfMain
	--	, SUM(CASE WHEN CHARINDEX('LISA', EquipmentModeType) > 0 THEN EstimatedServices ELSE 0 END) LISATotalServices
	--	, SUM(CASE WHEN CHARINDEX('GAP', EquipmentModeType) > 0 THEN EstimatedFeet ELSE 0 END) GAPTotalFeetOfMain
	--	, SUM(CASE WHEN CHARINDEX('GAP', EquipmentModeType) > 0 THEN EstimatedServices ELSE 0 END) GAPTotalServices
	--From [dbo].[tInspectionService] 
	--where ActiveFlag = 1
	--Group By InspectionRequestUID) [is3] on [is3].InspectionRequestUID = [is].InspectionRequestUID
GO
PRINT N'Creating [dbo].[vWebManagementMapStampManagement]...';


GO






CREATE View [dbo].[vWebManagementMapStampManagement]
AS
select 
IR.StatusType [MapStampStatus]
, wc.Division
, wc.WorkCenter
, ir.FLOC
, ir.InspectionType
, ir.LsNtfNo [NotificationID]
, ir.SurveyType
, ir.ComplianceDueDate [ComplianceDate]
, (DATEdiff(d, [is].[DetailStartDate], [is].[DetailEndDate]) +1) [TotalNoOfDays]
, ISNULL(ind.TotalLeaks, 0) [TotalNoOfLeaks]
, [is].TotalFeetOfMain
, [is].TotalServices
, [is].[FOVTotalFeetOfMain]
, [is].[FOVTotalServices]
, [is].[LISATotalFeetOfMain]
, [is].[LISATotalServices]
, [is].[GAPTotalFeetOfMain]
, [is].[GAPTotalServices]
, ir.InspectionRequestUID
, ir.PrevServ
, ir.PrevFtOfMain
, [is].[DetailStartDate]
, [is].[DetailEndDate]
from 
(Select * from [dbo].[tInspectionRequest] where ActiveFlag = 1) IR
Join (Select InspectionRequestUID, Sum(EstimatedFeet) [TotalFeetOfMain] 
			, Sum(EstimatedServices) [TotalServices]
			, Min(srcDTLT) [DetailStartDate]
			, Max(srcDTLT) [DetailEndDate]
			, SUM(CASE WHEN CHARINDEX('FOV', EquipmentModeType) > 0 THEN EstimatedFeet ELSE 0 END) FOVTotalFeetOfMain
			, SUM(CASE WHEN CHARINDEX('FOV', EquipmentModeType) > 0 THEN EstimatedServices ELSE 0 END) FOVTotalServices
			, SUM(CASE WHEN CHARINDEX('LISA', EquipmentModeType) > 0 THEN EstimatedFeet ELSE 0 END) LISATotalFeetOfMain
			, SUM(CASE WHEN CHARINDEX('LISA', EquipmentModeType) > 0 THEN EstimatedServices ELSE 0 END) LISATotalServices
			, SUM(CASE WHEN CHARINDEX('GAP', EquipmentModeType) > 0 THEN EstimatedFeet ELSE 0 END) GAPTotalFeetOfMain
			, SUM(CASE WHEN CHARINDEX('GAP', EquipmentModeType) > 0 THEN EstimatedServices ELSE 0 END) GAPTotalServices
	From [dbo].[tInspectionService] 
	where ActiveFlag = 1 and CHARINDEX('Forms/', MasterLeaklogUID) = 0 and SurveyMode <> 'G'
	Group By InspectionRequestUID) [is] on [is].InspectionRequestUID = ir.InspectionRequestUID
--Join (Select InspectionRequestUID, Min(srvdtlt) StartDate
	--From [dbo].[tInspectionService] 
	--Group By InspectionRequestUID) [is2] on [is2].InspectionRequestUID = ir.InspectionRequestUID
Join (Select * from [dbo].[rgMapGridLog] where ActiveFlag = 1) mg on mg.MapGridUID = ir.MapGridUID
Join (select * from [dbo].[rWorkCenter] where ActiveFlag = 1) wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
Left Join (Select InspectionRequestUID, Count(*) [TotalLeaks]
	From [dbo].[tInspectionService] 
	where ActiveFlag = 1
	Group By InspectionRequestUID) ind on ind.InspectionRequestUID = ir.InspectionRequestUID
GO
PRINT N'Creating [dbo].[vWebManagementMasterLeakLog]...';


GO







CREATE View [dbo].[vWebManagementMasterLeakLog]
AS
Select 

ISNULL(LeakInfo.LeakCount, 0) [Leaks],
CASE WHEN mll.StatusType not in ('Not Approved', 'In Progress') THEN 1 else 0 END [Approved],
CASE WHEN ISNULL(LeakInfo.HCA, 0) = 0 THEN 'No' ELSE 'Yes' END [HCA],
mll.CreateDate [Date], 
u.UserLastName + ', ' + u.UserFirstName + ' (' + u.UserLANID + ')' [Surveyor],
wc.WorkCenter [WorkCenter],
mg.FuncLocMap + '/' + mg.FuncLocPlat [Map/Plat],
CASE WHEN IR.InspectionFrequencyType is not null then IR.InspectionFrequencyType else ai.InspectionFreq END [SurveyFreq],
ISNULL(Services.FeetOfMain, 0) [FeetOfMain], 
ISNULL(Services.NumofServices, 0) [NumofServices],
ISNULL(Services.Hours, 0) [Hours], 
mll.MasterLeakLogUID [MasterLeakLogUID],
wc.Division,
mg.FLOC,
mll.StatusType [Status]
From 
	(Select MasterLeakLogUID, InspectionRequestLogUID, createduseruid, ServiceDate [CreateDate], StatusType, MapGridUID
	 From [dbo].[tMasterLeakLog] where ActiveFlag = 1)
        [MLL]
Left Join (Select MasterLeakLogUID, Sum(EstimatedHours) [Hours], Sum(EstimatedFeet) [FeetOfMain], Sum(EstimatedServices) [NumofServices] 
		   from tInspectionService
		   Where ActiveFlag = 1
		   Group by MasterLeakLogUID)
		[Services] on mll.MasterLeakLogUID = Services.MasterLeakLogUID
Join (select * from UserTb where UserActiveFlag = 1) U
	on MLL.CreatedUserUID = u.UserUID
Left Join (select * from tInspectionRequest where ActiveFlag = 1) IR on IR.InspectionRequestUID = MLL.InspectionRequestLogUID
Join (Select * from [dbo].[rgMapGridLog] where ActiveFlag = 1 and StatusType = 'Active') mg
	on MLL.MapGridUID = mg.MapGridUID
Join (Select * from rWorkCenter where ActiveFlag = 1)
	wc on mg.FuncLocMWC = wc.WorkCenterAbbreviationFLOC
Left Join	(select masterleaklogUID, Count(*) LeakCount, Max(case when PotentialHCAType = 'Y' THEN 1 ELSE 0 END) HCA
		from [dbo].[tgAssetAddressIndication] aai
		Group By masterleaklogUID)
	LeakInfo on mll.MasterLeakLogUID = LeakInfo.MasterLeakLogUID
Left Join 
		(select DropDownID, DropDownType, FilterName, SortSeq, FieldDisplay, FieldDescription, FieldValue 
		from rDropDown
		where FilterName = 'ddLHLeakMgmtCurrentStatus') 
	StatusDesc on mll.StatusType = StatusDesc.FieldValue
Left Join (Select MasterLeakLogUID, Count(*) [phcount] 
			From tInspectionService
			Where ActiveFlag = 1
				And StatusType <> 'Deleted'
				And PlaceHolderFlag = 1
			Group By MasterLeakLogUID) ph on ph.MasterLeakLogUID = mll.MasterLeakLogUID
Left Join (Select * from tgAssetInspection where ActiveFlag = 1) ai on ai.MasterLeakLogsUID = mll.MasterLeakLogUID
WHERE Services.MasterLeakLogUID is not null or LeakInfo.MasterLeakLogUID is not null
GO
PRINT N'Creating [dbo].[vWebManagementOQStatus]...';


GO

Create View [vWebManagementOQStatus]
AS
select 
u.UserLANID
, oq.OQProfile as [OQ]
, CASE WHEN oq.OQExpireDate < getdate() THEN 'Lapsed' ELSE 'Current' END [Status]
, oq.OQExpireDate [Expires]
from usertb u
Join [dbo].[tInspectorOQLog] OQ on oq.UserUID = u.UserUID
GO
PRINT N'Creating [dbo].[vWebManagementUsers]...';


GO







CREATE View [dbo].[vWebManagementUsers] AS

select Distinct
-- rg.GroupName 
'' [GroupName]
, Case WHEN u.UserInactiveDTLT is null THEN 'Active' ELSE 'Inactive' END [Status]
, u.UserLastName [LastName] 
, u.UserFirstName
, u.UserLANID
,CONCAT(u.UserLastName, ', ', u.UserFirstName) AS [UserFullName] -- , ' (', u.UserLANID, ')') AS [UserFullName]
, u.UserEmployeeType
, ISNULL(oq.Status, 'No OQ') [OQ]
, ISNULL(r.RoleName, 'No Role') Role
, u.UserUID
, wc.WorkCenter
, u.HomeWorkCenterUID
, u.UserAppRoleType [AppRoleType]
from usertb u
Left join [dbo].[xReportingGroupEmployeexRef] rgxrf on u.UserUID = rgxrf.UserUID
Left join rReportingGroup rg on rg.ReportingGroupUID = rgxrf.ReportingGroupUID
Left Join vUserCurrentOQStatusByUserUID OQ on oq.UserUID = u.UserUID
left Join rRole r on r.RoleUID = rgxrf.RoleUID
left join (select * from rWorkCenter where ActiveFlag = 1) wc on u.HomeWorkCenterUID = wc.WorkCenterUID
GO
PRINT N'Creating [dbo].[CreateUID]...';


GO


CREATE FUNCTION [dbo].[CreateUID]
(
	
	 @Type varchar(25)
	,@UniqueID varchar(50)
	,@SourceID varchar(25)
	,@CurrertDateTime datetime
	

)
RETURNS varchar(200)
AS
BEGIN
	
	DECLARE @ResultVar varchar(200)
		,@Seperator char(1)
		,@maxRandomValue int = 10
		,@minRandomValue int = 0
		,@NewUnipueID varchar(50)
		,@RandomNum Decimal(18,18)

	Select @RandomNum = RandomNumber From v_GetRandom

	Set @Seperator = '_'

	Select @NewUnipueID = REPLACE(Cast(Cast(((@maxRandomValue + 1) - @minRandomValue) 
	* @RandomNum + @minRandomValue As decimal(7,4)) * Cast(@UniqueID as int) as varchar(20)), '.', '')

	
	SELECT @ResultVar = @Type + '_' 
		+ Ltrim(Rtrim(@NewUnipueID)) 
		+ @Seperator
		+ Cast(DatePart(year, @CurrertDateTime) as char(4)) 
		+ Right('00' + Ltrim(rtrim(Cast(datepart(Month, @CurrertDateTime) as Char(2)))),2)
		+ Right('00' + Ltrim(rtrim(Cast(datepart(Day, @CurrertDateTime) as Char(2)))),2)
		+ Right('00' + Ltrim(rtrim(Cast(datepart(Hour, @CurrertDateTime) as Char(2)))),2)
		+ Right('00' + Ltrim(rtrim(Cast(datepart(Minute, @CurrertDateTime) as Char(2)))),2)
		+ Right('00' + Ltrim(rtrim(Cast(datepart(Second, @CurrertDateTime) as Char(2)))),2)
		+ @Seperator
		+ LTrim(RTrim(@SourceID))

	-- Return the result of the function
	RETURN @ResultVar

END
GO
PRINT N'Creating [dbo].[JSONProcessTabletInsert]...';


GO







CREATE PROCEDURE [dbo].[JSONProcessTabletInsert]
(
      @JSON_Str VarChar(Max)
    
)
AS 

BEGIN TRY

	Declare @TransactionType VarChar(20)
		,@SingleQuote char(1)
		,@SQLQuery varchar(max)
		,@ReturnVal int = 1

	Set @SingleQuote = CHAR(39)

	Set @JSON_Str = REPLACE(@JSON_Str, @SingleQuote, '')

	Set @TransactionType = SUBSTRING(@JSON_Str, 2, CHARINDEX(':',@JSON_Str,2)-3)
	/*
	IF @TransactionType = 'breadcrumb'
		BEGIN
		   EXEC JSON_Breadcrumb @JSON_Str
		END
	ELSE
	IF @TransactionType = 'activity'
		BEGIN
		   EXEC JSON_Activity @JSON_Str
		END
	ELSE
	IF @TransactionType = 'indication'
		BEGIN
		   EXEC JSON_Indication @JSON_Str
		END
	ELSE
	IF @TransactionType = 'equipment'
		BEGIN
		   EXEC JSON_Equipment @JSON_Str
		END
	ELSE
	IF @TransactionType = 'assetInspection'
		BEGIN
		   EXEC [dbo].[JSON_AssetInspection] @JSON_Str
		END
	ELSE
	*/
	IF @TransactionType = 'lodInspection'
		BEGIN
		   --EXEC [dbo].[JSON_LODInspection] @JSON_Str
		   Print ''
		END


	ELSE
	BEGIN

		SET NOCOUNT ON
		
		Insert Into [dbo].[tTabletDataInsertError] (
			InsertedData
			, Comments
		)
		Select
			@JSON_Str
			,'Unknown Transaction Type'
		
		--Set @SQLQuery = 'Insert Into [dbo].[t_TabletDataInsertError] (InsertedData, Comments)
	                 -- Values (' + @SingleQuote + @JSON_Str + @SingleQuote + ', ' + @SingleQuote + 'Unknown Transaction Type' + @SingleQuote + ')'
					   
		--EXEC (@SQLQuery)

		SET NOCOUNT OFF

	END

END TRY
BEGIN CATCH

	SET NOCOUNT ON

	Insert Into [dbo].[tTabletDataInsertError] (
			InsertedData
			, Comments
			, ErrorNumber
			, ErrorMessage
		)
		Select
			@JSON_Str
			,'JSON Error'
			,ERROR_NUMBER()
			,ERROR_MESSAGE()
		
	--Set @SQLQuery = 'Insert Into [dbo].[t_TabletDataInsertError] (InsertedData, Comments)
	       -- Values (' + @SingleQuote + @JSON_Str + @SingleQuote + ', ' + @SingleQuote + 'JSON ERROR' + @SingleQuote + ')'
					   
	--EXEC (@SQLQuery)

	SET NOCOUNT OFF

	
	
END CATCH

Select @ReturnVal
GO
PRINT N'Creating [dbo].[spDynamicOQbyUser]...';


GO

CREATE Procedure [dbo].[spDynamicOQbyUser]
AS
DECLARE @cols AS NVARCHAR(MAX),
    @Dynamicquery  AS NVARCHAR(MAX),
	@Query as Nvarchar(max),
	@BaseQuery1 as Nvarchar(max),
	@BaseQuery2 as Nvarchar(max)

Set @BaseQuery1 = 'select u.UserUID, u.UserFirstName, u.UserLastName, u.UserLANID, u.UserEmployeeType ,'
Set @BaseQuery2 = 'from UserTb u left Join'

select @cols = STUFF((SELECT ',' + QUOTENAME(OQProfile)
                    from tInspectorOQLog
                    group by OQProfile
                    order by OQProfile
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')

set @Dynamicquery = N'SELECT UserUID, ' + @cols + N' from 
             (
                select UserUID, OQExpireDate, OQProfile
                from tInspectorOQLog
            ) x
            pivot 
            (
                max(OQExpireDate)
                for OQProfile in (' + @cols + N')
            ) p '


Set @Query = @BaseQuery1 + @cols + @BaseQuery2 + ' (' + @Dynamicquery + ') OQ on u.UserUID = OQ.UserUID'
--select @BaseQuery
--select @query


exec sp_executesql @Query;
GO
PRINT N'Creating [dbo].[spJSON_TaskOut]...';


GO







CREATE PROCEDURE [dbo].[spJSON_TaskOut]
(
      @JSON_Str VarChar(Max)
    
)
AS 

-- This First Part should be in all SP userd to process a JSON record.  
-- It is designed to archive the original data

	SET NOCOUNT ON
	
	Declare @ClientID varchar(10)
		,@UserUID varchar(100)
		,@TransactionType VarChar(20)
		,@SQLQuery varchar(max)
		,@SingleQuote char(1) = CHAR(39)

	--Set @SingleQuote = CHAR(39)

	Set @TransactionType = 'TaskOut'

	
	
		Select * Into #JSON_Parse From [dbo].[parseJSON](@JSON_Str)
	
		Update #JSON_Parse Set StringValue = 0 where charindex('flag', name) > 0 and StringValue = 'null'
		Update #JSON_Parse Set StringValue = 0 where ValueType = 'boolean' and StringValue = 'false'
		Update #JSON_Parse Set StringValue = 1 where ValueType = 'boolean' and StringValue = 'true'
		Update #JSON_Parse Set StringValue = '' where StringValue = 'null' or StringValue = 'Please Make A Selection'
		Update #JSON_Parse Set StringValue = '19000101000000' Where Name In ('SrcDTLT', 'SrcDTGMT', 'SrcOpenDTLT', 'SrcClosedDTLT') and StringValue = ''
	
	
		Select @ClientID = 1
		--Select @ClientID = StringValue From #JSON_Parse Where Name = 'ClientID'
		Select Top 1 @UserUID = StringValue From #JSON_Parse Where Name = 'ActivityCreatedUserUID'

		Insert Into [dbo].[tTabletDataInsertArchive] (
			CreatedUserUID
			,TransactionType
			,InsertedData
			)
		Values (
			@UserUID
			,'InspectionServices'
			,@JSON_Str
			)

/***************************************************************************

--  Create the unique function needed for the record type below this line

***************************************************************************/

		Declare 
			@InspectionServiceUID varchar(100) 
			,@InspectionRequestUID varchar(100) 
			,@MapGridUID varchar(100)
			,@SourceID varchar(25) 
			,@NextID int
			,@CreatedUserUID varchar(100)
			,@ModifiedUserUID varchar(100) 
			,@CreatedDate datetime 
			,@ModifiedDate datetime 
			,@SrcDTLT datetime 
			,@SrcOpenDTLT datetime 
			,@SrcClosedDTLT datetime 
			,@Comments varchar(500) 
			,@StatusType varchar(50) 
			,@Revision int 
			,@ActiveFlag bit = 1
			,@CompleteFlag bit = 0
			,@TaskOutMapsObjectID int
			,@ProcessingObjectID int
			,@WorkQueueObjectID int
			,@ActivityUID varchar(100)
			,@MasterLeakLogUID	varchar(100)
			,@SurveyFreq varchar(20)
			,@WorkCenter varchar(50)
			,@DispatchMethod varchar(50)
			,@Division varchar(50)
			,@AssignedUserUID varchar(100)
			,@Status varchar(50)
			,@TotalEnteredTime time
			,@WindSpeedStartUID varchar(100)
			,@WindSpeedMidUID varchar(100)
			,@EquipmentUID varchar(100)
			--,@GradedByUID varchar(100)
			,@TRFeetOfMainFoot Float
			,@TRFeetOfMainMobile float
			,@TRNumberOfServices int
			,@FootHours float
			,@MobileHours float
			,@PreFootHours Varchar(20)
			,@PreMobileHours Varchar(20)
			,@NotificationID varchar(25)
			,@LANID varchar(20)
			--,@srcDTLT datetime
			,@CurrentInspectionType varchar(200)
			,@PICCount int
			,@InsertedPIC int = 0
			,@PICUID varchar(100)
			--,@NextID int




			,@IsTraditional bit
			,@IsFoot bit
			,@IsMobile bit
			
			
			
			
			,@IsPicarro bit

			,@IsFOV bit
			,@FOVFeetOfMainFoot float
			,@FOVFeetOfMainMoble float
			,@FOVNumberOfServices int
			,@PreFOVHours varchar(20)
			,@FOVHours Float
			
			,@IsLisa bit
			,@IsLisaFoot bit
			,@IsLisaMobile bit
			,@LisaFeetOfMainFoot float
			,@LisaFeetOfMainMoble float
			,@LisaNumberOfServices int
			,@PreLisaHours varchar(20)
			,@LisaHours Float
			
			,@IsGap bit
			,@IsGapFoot bit
			,@IsGapMobile bit
			,@GapFeetOfMainFoot float
			,@GapFeetOfMainMoble float
			,@GapNumberOfServices int
			,@PreGapHours varchar(20)
			,@GapHours Float
			
			,@IsDeleted bit


			,@MapPlat varchar(25)
			,@Instrument varchar(25)
			,@SerialNumber varchar(25)
			,@TaskOutUID varchar(100)
			,@AreaNumber varchar(50)

			,@PlaceHolderPassNo int = 1
			,@IndicationPassNo int = 1
			,@HoldInspectionServiceUID varchar(100) 
			,@InProgressIndictionUID varchar(100)
			,@UIDSufixTR_Foot varchar(25) = '_TR_Foot'
			,@UIDSufixTR_Mobile varchar(25) = '_TR_Mobile'
			,@UIDSufixPIC_FOV_Foot varchar(25) = '_PIC_FOV_Foot'
			,@UIDSufixPIC_FOV_Mobile varchar(25) = '_PIC_FOV_Mobile'
			,@UIDSufixPIC_LISA_Foot varchar(25) = '_PIC_LISA_Foot'
			,@UIDSufixPIC_LISA_Mobile varchar(25) = '_PIC_LISA_Mobile'
			,@UIDSufixPIC_GAP_Foot varchar(25) = '_PIC_GAP_Foot'
			,@UIDSufixPIC_GAP_Mobile varchar(25) = '_PIC_GAP_Mobile'

			Select Top 1 @ActivityUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'ActivityUID'), 0)
			--Select Top 1 @SrcDTLT = ISNULL((Select StringValue From #JSON_Parse Where Name = 'ActivitySrcDTLT'), 0)
			Select @TaskOutMapsObjectID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'TaskOutMaps'), 0)

			Declare objProcessingObj Cursor For
			Select Object_ID From #JSON_Parse Where parent_ID = @TaskOutMapsObjectID

			Open objProcessingObj

			Fetch Next From objProcessingObj Into @ProcessingObjectID

			While @@FETCH_STATUS = 0
			BEGIN  --1
				
				--Select @InspectionRequestUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'InspectionRequestUID' and Parent_ID = @ProcessingObjectID), '')
				Select @MasterLeakLogUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'MasterLeakLogUID' and Parent_ID = @ProcessingObjectID), '') 
				Select @MapGridUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'MapGridUID' and Parent_ID = @ProcessingObjectID), '') 
				Select @SurveyFreq = ISNULL((Select StringValue From #JSON_Parse Where Name = 'SurveyType' and Parent_ID = @ProcessingObjectID), '')
				Select @WorkCenter = ISNULL((Select StringValue From #JSON_Parse Where Name = 'WorkCenter' and Parent_ID = @ProcessingObjectID), '')
				Select @DispatchMethod = ISNULL((Select StringValue From #JSON_Parse Where Name = 'DispatchMethod' and Parent_ID = @ProcessingObjectID), '')
				Select @Division = ISNULL((Select StringValue From #JSON_Parse Where Name = 'Division' and Parent_ID = @ProcessingObjectID), '')
				Select @Status = ISNULL((Select StringValue From #JSON_Parse Where Name = 'Status' and Parent_ID = @ProcessingObjectID), '')
				Select @TotalEnteredTime = CAST(ISNULL((Select StringValue From #JSON_Parse Where Name = 'TotalEnteredTime' and Parent_ID = @ProcessingObjectID), '00:00') as Time)
				Select @WindSpeedStartUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'mWindSpeedStartUID' and Parent_ID = @ProcessingObjectID), '')
				Select @WindSpeedMidUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'mWindSpeedMidUID' and Parent_ID = @ProcessingObjectID), '')
				Select @EquipmentUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'InspectionEquipmentUID' and Parent_ID = @ProcessingObjectID), '')
				Select @TaskOutUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'TaskOutTabletUID' and Parent_ID = @ProcessingObjectID), '')
				Select @AreaNumber = ISNULL((Select StringValue From #JSON_Parse Where Name = 'AreaNumber' and Parent_ID = @ProcessingObjectID), '')
				Select @InspectionRequestUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'AssignedInspectionRequestUID' and Parent_ID = @ProcessingObjectID), '') 
				
				Select @PreFootHours  = ISNULL((Select StringValue From #JSON_Parse Where Name = 'HoursFoot' and Parent_ID = @ProcessingObjectID),'0')
				Select @PreMobileHours = ISNULL((Select StringValue From #JSON_Parse Where Name = 'HoursMobile' and Parent_ID = @ProcessingObjectID), '0')


				--Select @srcDTLT = dbo.JSON_ParseDate_Str(CASE WHEN ISNULL((Select StringValue From #JSON_Parse Where Name = 'SrcDTLT'), '19000101000000') = 'null' THEN '19000101000000' ELSE ISNULL((Select StringValue From #JSON_Parse Where Name = 'SrcOpenDTLT'), '19000101000000') END)
				Select @srcDTLT = ISNULL((Select StringValue From #JSON_Parse Where Name = 'SrcDTLT' and Parent_ID = @ProcessingObjectID), '19000101000000') 

				
				Select @SourceID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'SourceID' and Parent_ID = @ProcessingObjectID), '')
			
				Select @IsFoot  = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isFoot' and Parent_ID = @ProcessingObjectID), 0)
				Select @IsMobile = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isMobile' and Parent_ID = @ProcessingObjectID), 0)
				
				
				Select @IsTraditional = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isTraditional' and Parent_ID = @ProcessingObjectID), 0)
				Select @TRFeetOfMainFoot = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainFoot' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @TRFeetOfMainMobile = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainMobile' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @TRNumberOfServices = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'NumberOfServicesFoot' and Parent_ID = @ProcessingObjectID), 0) as float)
				
				Select @IsPicarro = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isPicarro' and Parent_ID = @ProcessingObjectID), 0)
				
				Select @IsFOV = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isFOV' and Parent_ID = @ProcessingObjectID), 0)
				Select @FOVFeetOfMainFoot = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainFootFOV' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @FOVFeetOfMainMoble = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainMobileFOV' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @FOVNumberOfServices = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'NumberOfServicesFOV' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @PreFOVHours = ISNULL((Select StringValue From #JSON_Parse Where Name = 'HoursFOV' and Parent_ID = @ProcessingObjectID), '0') 
				
				Select @IsLisa = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isLISA' and Parent_ID = @ProcessingObjectID), 0)
				Select @IsLisaFoot = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isLISAFoot' and Parent_ID = @ProcessingObjectID), 0)
				Select @IsLisaMobile = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isLISAMobile' and Parent_ID = @ProcessingObjectID), 0)
				Select @LisaFeetOfMainFoot = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainFootLisa' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @LisaFeetOfMainMoble = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainMobileLisa' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @LisaNumberOfServices = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'NumberOfServicesLisa' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @PreLisaHours = ISNULL((Select StringValue From #JSON_Parse Where Name = 'HoursLisa' and Parent_ID = @ProcessingObjectID), '0')
				
				Select @IsGap = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isGAP' and Parent_ID = @ProcessingObjectID), 0)
				Select @IsGapFoot = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isGAPFoot' and Parent_ID = @ProcessingObjectID), 0)
				Select @IsGapMobile = ISNULL((Select StringValue From #JSON_Parse Where Name = 'isGAPMobile' and Parent_ID = @ProcessingObjectID), 0)
				Select @GapFeetOfMainFoot = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainFootGap' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @GapFeetOfMainMoble = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'FeetOfMainMobileGap' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @GapNumberOfServices = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'NumberOfServicesGap' and Parent_ID = @ProcessingObjectID), 0) as float)
				Select @PreGapHours = ISNULL((Select StringValue From #JSON_Parse Where Name = 'HoursGap' and Parent_ID = @ProcessingObjectID), '0')

				Select @WorkQueueObjectID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'WorkQueuee' and Parent_ID = @ProcessingObjectID), 0)
				
				--Select @InspectionRequestUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'IRUID' and Parent_ID = @WorkQueueObjectID), '')
				Select @AssignedUserUID = ISNULL((Select StringValue From #JSON_Parse Where Name = 'AssignedUserUID' and Parent_ID = @WorkQueueObjectID), '')
				Select @NotificationID = Cast(ISNULL((Select StringValue From #JSON_Parse Where Name = 'NotificationID' and Parent_ID = @WorkQueueObjectID), '') as Float)

				Select @LANID = UserLANID from UserTb where UserUID = @AssignedUserUID

--PreFootHours
				
				If CHARINDEX(':', @PreFootHours) > 0 AND ISNUMERIC(Replace(@PreFootHours, ':', '')) = 1
				Begin

					SELECT @FootHours =	Case WHEN CHARINDEX(':', @PreFootHours) > 1 THEN Cast(Left(@PreFootHours, CHARINDEX(':', @PreFootHours) - 1) as Float) ELSE 0 END 
						+ Case WHEN CHARINDEX(':', Reverse(@PreFootHours)) > 1 THEN ((Cast(Right(@PreFootHours, CHARINDEX(':', Reverse(@PreFootHours)) - 1) as float)) / 60) ELSE 0 END

				END
				ELSE
				IF CHARINDEX('.', @PreFootHours) > 0 AND ISNUMERIC(Replace(@PreFootHours, '.', '')) = 1
				BEGIN

					SELECT @FootHours =	Cast(@PreFootHours as Float)

				END
				ELSE
				BEGIN

					SELECT @FootHours =	0

				END


--PreMobileHours

				If CHARINDEX(':', @PreMobileHours) > 0 AND ISNUMERIC(Replace(@PreMobileHours, ':', '')) = 1
				Begin

					SELECT @MobileHours =	Case WHEN CHARINDEX(':', @PreMobileHours) > 1 THEN Cast(Left(@PreMobileHours, CHARINDEX(':', @PreMobileHours) - 1) as Float) ELSE 0 END 
						+ Case WHEN CHARINDEX(':', Reverse(@PreMobileHours)) > 1 THEN ((Cast(Right(@PreMobileHours, CHARINDEX(':', Reverse(@PreMobileHours)) - 1) as float)) / 60) ELSE 0 END

				END
				ELSE
				IF CHARINDEX('.', @PreMobileHours) > 0 AND ISNUMERIC(Replace(@PreMobileHours, '.', '')) = 1
				BEGIN

					SELECT @MobileHours =	Cast(@PreMobileHours as Float)

				END
				ELSE
				BEGIN

					SELECT @MobileHours = 0

				END


--PreFOVHours
				If CHARINDEX(':', @PreFOVHours) > 0 AND ISNUMERIC(Replace(@PreFOVHours, ':', '')) = 1
				Begin

					SELECT @FOVHours =	Case WHEN CHARINDEX(':', @PreFOVHours) > 1 THEN Cast(Left(@PreFOVHours, CHARINDEX(':', @PreFOVHours) - 1) as Float) ELSE 0 END 
						+ Case WHEN CHARINDEX(':', Reverse(@PreFOVHours)) > 1 THEN ((Cast(Right(@PreFOVHours, CHARINDEX(':', Reverse(@PreFOVHours)) - 1) as float)) / 60) ELSE 0 END

				END
				ELSE
				IF CHARINDEX('.', @PreFOVHours) > 0 AND ISNUMERIC(Replace(@PreFOVHours, '.', '')) = 1
				BEGIN

					SELECT @FOVHours =	Cast(@PreFOVHours as Float)

				END
				ELSE
				BEGIN

					SELECT @FOVHours =	0

				END


--PreLisaHours

				If CHARINDEX(':', @PreLisaHours) > 0 AND ISNUMERIC(Replace(@PreLisaHours, ':', '')) = 1
				Begin

					SELECT @LisaHours =	Case WHEN CHARINDEX(':', @PreLisaHours) > 1 THEN Cast(Left(@PreLisaHours, CHARINDEX(':', @PreLisaHours) - 1) as Float) ELSE 0 END 
						+ Case WHEN CHARINDEX(':', Reverse(@PreLisaHours)) > 1 THEN ((Cast(Right(@PreLisaHours, CHARINDEX(':', Reverse(@PreLisaHours)) - 1) as float)) / 60) ELSE 0 END

				END
				ELSE
				IF CHARINDEX('.', @PreLisaHours) > 0 AND ISNUMERIC(Replace(@PreLisaHours, '.', '')) = 1
				BEGIN

					SELECT @LisaHours =	Cast(@PreLisaHours as Float)

				END
				ELSE
				BEGIN

					SELECT @LisaHours =	0

				END

--PreGapHours

				If CHARINDEX(':', @PreGapHours) > 0 AND ISNUMERIC(Replace(@PreGapHours, ':', '')) = 1
				Begin

					SELECT @GapHours =	Case WHEN CHARINDEX(':', @PreGapHours) > 1 THEN Cast(Left(@PreGapHours, CHARINDEX(':', @PreGapHours) - 1) as Float) ELSE 0 END 
						+ Case WHEN CHARINDEX(':', Reverse(@PreGapHours)) > 1 THEN ((Cast(Right(@PreGapHours, CHARINDEX(':', Reverse(@PreGapHours)) - 1) as float)) / 60) ELSE 0 END

				END
				ELSE
				IF CHARINDEX('.', @PreGapHours) > 0 AND ISNUMERIC(Replace(@PreGapHours, '.', '')) = 1
				BEGIN

					SELECT @GapHours =	Cast(@PreGapHours as Float)

				END
				ELSE
				BEGIN

					SELECT @GapHours =	0

				END
				
--Marked Deleted all Place Holder Service Records

				IF @PlaceHolderPassNo = 1 
				BEGIN

					Declare PlaceHolder Cursor For
					Select InspectionServicesUID 
					from [dbo].[tInspectionService] 
					where MasterLeakLogUID = @MasterLeakLogUID and ActiveFlag = 1 and PlaceHolderFlag = 1 and StatusType <> 'Deleted'

					Open PlaceHolder

					Fetch Next From PlaceHolder into @HoldInspectionServiceUID

					While @@Fetch_Status = 0
					BEGIN

						Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @HoldInspectionServiceUID

						Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @HoldInspectionServiceUID

						
						Insert Into [dbo].[tInspectionService]
						(
							InspectionServicesUID, 
							MasterLeakLogUID, 
							MapGridUID, 
							InspectionRequestUID, 
							InspectionEquipmentUID, 
							ProjectID, 
							SourceID, 
							CreatedUserUID, 
							ModifiedUserUID, 
							SrcDTLT, 
							--SrvDTLT, 
							--SrvDTLTOffset, 
							Comments, 
							RevisionComments, 
							Revision, 
							ActiveFlag, 
							StatusType, 
							EquipmentType, 
							InstrumentType, 
							SerialNumber, 
							CalibrationLevel, 
							CalibrationVerificationFlag, 
							WindSpeedStart, 
							WindSpeedEnd, 
							EquipmentModeType, 
							EstimatedFeet, 
							EstimatedServices, 
							EstimatedHours, 
							ApprovedFlag, 
							ApprovedByUserUID, 
							ApprovedDTLT, 
							SubmittedFlag, 
							SubmittedStatusType, 
							SubmittedUserUID, 
							SubmittedDTLT, 
							ResponseStatusType, 
							Response, 
							ResponceErrorDescription, 
							ResponseDTLT, 
							CompletedFlag, 
							CompletedDTLT, 
							SurveyMode, 
							PlaceHolderFlag
						)
						Select
							InspectionServicesUID, 
							MasterLeakLogUID, 
							MapGridUID, 
							InspectionRequestUID, 
							InspectionEquipmentUID, 
							ProjectID, 
							SourceID, 
							CreatedUserUID, 
							@UserUID, --ModifiedUserUID, 
							@SrcDTLT, --SrcDTLT, 
							--SrvDTLT, 
							--SrvDTLTOffset, 
							Comments, 
							'Marked Deleted Due to task out', --RevisionComments, 
							Revision, 
							1, --ActiveFlag, 
							'Deleted', --StatusType, 
							EquipmentType, 
							InstrumentType, 
							SerialNumber, 
							CalibrationLevel, 
							CalibrationVerificationFlag, 
							WindSpeedStart, 
							WindSpeedEnd, 
							EquipmentModeType, 
							EstimatedFeet, 
							EstimatedServices, 
							EstimatedHours, 
							ApprovedFlag, 
							ApprovedByUserUID, 
							ApprovedDTLT, 
							SubmittedFlag, 
							SubmittedStatusType, 
							SubmittedUserUID, 
							SubmittedDTLT, 
							ResponseStatusType, 
							Response, 
							ResponceErrorDescription, 
							ResponseDTLT, 
							CompletedFlag, 
							CompletedDTLT, 
							SurveyMode, 
							PlaceHolderFlag
						From [dbo].[tInspectionService] Where InspectionServicesUID = @HoldInspectionServiceUID and Revision = @Revision - 1


						Fetch Next From PlaceHolder into @HoldInspectionServiceUID

					END

					Set @PlaceHolderPassNo = 2
								
				END

--Marked Any Indications that are still In Progress as Not Accepted

				IF @IndicationPassNo = 1 
				BEGIN

					Declare InProgress Cursor For
					Select Distinct AssetAddressIndicationUID
					from [dbo].[tgAssetAddressIndication]
					where MasterLeakLogUID = @MasterLeakLogUID and ActiveFlag = 1 and StatusType = 'In Progress'

					Open InProgress

					Fetch Next From InProgress into @InProgressIndictionUID

					While @@FETCH_STATUS = 0
					BEGIN

						Select @Revision = Count(*) from [dbo].[tgAssetAddressIndication] Where AssetAddressIndicationUID = @InProgressIndictionUID

						Update [dbo].[tgAssetAddressIndication] set ActiveFlag = 0 Where AssetAddressIndicationUID = @InProgressIndictionUID

						Insert Into [dbo].[tgAssetAddressIndication]
						(
							AssetAddressIndicationUID,
							AssetAddressUID,
							InspectionRequestUID,
							MapGridUID,
							MasterLeakLogUID,
							ProjectID,
							SourceID,
							CreatedUserUID,
							ModifiedUserUID,
							SrcDTLT,
							SrvDTLT,
							SrvDTLTOffset,
							SrcOpenDTLT,
							SrcClosedDTLT,
							GPSType,
							GPSSentence,
							Latitude,
							Longitude,
							SHAPE,
							Comments,
							RevisionComments,
							Revision,
							ActiveFlag,
							StatusType,
							ManualMapPlat,
							PipelineType,
							SurveyType,
							Map,
							Plat,
							RecordedMap,
							RecordedPlat,
							RecordedBlock,
							LandmarkType,
							Route,
							Line,
							HouseNoNAFlag,
							HouseNo,
							Street1,
							City,
							DescriptionReadingLocation,
							County,
							CountyCode,
							FacilityType,
							LocationType,
							InitialLeakSourceType,
							ReportedByType,
							LeakNo,
							SAPNo,
							PavedType,
							SORLType,
							SORLOther,
							Within5FeetOfBuildingType,
							SuspectedCopperType,
							EquipmentFoundByUID,
							FoundBy,
							FoundBySerialNumber,
							InstrumentTypeGradeByType,
							EquipmentGradeByUID,
							GradeBy,
							GradeBySerialNumber,
							ReadingGrade,
							GradeType,
							InfoCodesType,
							PotentialHCAType,
							Grade2PlusRequested,
							TwoPercentOrLessSuspectCopperFlag,
							LeakDownGradedFlag,
							HCAConstructionSupervisorUserUID,
							HCADistributionPlanningEngineerUserUID,
							HCAPipelineEngineerUserUID,
							Photo1,
							Photo2,
							Photo3,
							OptionalData1,
							OptionalData2,
							OptionalData3,
							OptionalData4,
							OptionalData5,
							OptionalData6,
							OptionalData7,
							OptionalData8,
							OptionalData9,
							OptionalData10,
							OptionalData11,
							OptionalData12,
							ApprovedFlag,
							ApprovedByUserUID,
							ApprovedDTLT,
							SubmittedFlag,
							SubmittedStatusType,
							SubmittedUserUID,
							SubmittedDTLT,
							ResponseStatusType,
							ResponseComments,
							ResponceErrorComments,
							ResponseDTLT,
							CompletedFlag,
							CompletedDTLT,
							AboveBelowGroundType,
							FoundDateTime,
							GPSSource,
							GPSTime,
							FixQuality,
							NumberOfSatellites,
							HDOP,
							AltitudemetersAboveMeanSeaLevel,
							HeightOfGeoid,
							TimeSecondsSinceLastDGPS,
							ChecksumData,
							Bearing,
							Speed,
							GPSStatus,
							NumberOfGPSAttempts,
							ActivityUID,
							AssetInspectionUID,
							MapPlatLeakNumber
						)
						Select
							AssetAddressIndicationUID,
							AssetAddressUID,
							InspectionRequestUID,
							MapGridUID,
							MasterLeakLogUID,
							ProjectID,
							SourceID,
							CreatedUserUID,
							ModifiedUserUID,
							SrcDTLT,
							SrvDTLT,
							SrvDTLTOffset,
							SrcOpenDTLT,
							SrcClosedDTLT,
							GPSType,
							GPSSentence,
							Latitude,
							Longitude,
							SHAPE,
							Comments,
							RevisionComments,
							@Revision,
							1, --ActiveFlag,
							'Pending', --StatusType,
							ManualMapPlat,
							PipelineType,
							SurveyType,
							Map,
							Plat,
							RecordedMap,
							RecordedPlat,
							RecordedBlock,
							LandmarkType,
							Route,
							Line,
							HouseNoNAFlag,
							HouseNo,
							Street1,
							City,
							DescriptionReadingLocation,
							County,
							CountyCode,
							FacilityType,
							LocationType,
							InitialLeakSourceType,
							ReportedByType,
							LeakNo,
							SAPNo,
							PavedType,
							SORLType,
							SORLOther,
							Within5FeetOfBuildingType,
							SuspectedCopperType,
							EquipmentFoundByUID,
							FoundBy,
							FoundBySerialNumber,
							InstrumentTypeGradeByType,
							EquipmentGradeByUID,
							GradeBy,
							GradeBySerialNumber,
							ReadingGrade,
							GradeType,
							InfoCodesType,
							PotentialHCAType,
							Grade2PlusRequested,
							TwoPercentOrLessSuspectCopperFlag,
							LeakDownGradedFlag,
							HCAConstructionSupervisorUserUID,
							HCADistributionPlanningEngineerUserUID,
							HCAPipelineEngineerUserUID,
							Photo1,
							Photo2,
							Photo3,
							OptionalData1,
							OptionalData2,
							OptionalData3,
							OptionalData4,
							OptionalData5,
							OptionalData6,
							OptionalData7,
							OptionalData8,
							OptionalData9,
							OptionalData10,
							OptionalData11,
							OptionalData12,
							ApprovedFlag,
							ApprovedByUserUID,
							ApprovedDTLT,
							SubmittedFlag,
							SubmittedStatusType,
							SubmittedUserUID,
							SubmittedDTLT,
							ResponseStatusType,
							ResponseComments,
							ResponceErrorComments,
							ResponseDTLT,
							CompletedFlag,
							CompletedDTLT,
							AboveBelowGroundType,
							FoundDateTime,
							GPSSource,
							GPSTime,
							FixQuality,
							NumberOfSatellites,
							HDOP,
							AltitudemetersAboveMeanSeaLevel,
							HeightOfGeoid,
							TimeSecondsSinceLastDGPS,
							ChecksumData,
							Bearing,
							Speed,
							GPSStatus,
							NumberOfGPSAttempts,
							ActivityUID,
							AssetInspectionUID,
							MapPlatLeakNumber
						From [dbo].[tgAssetAddressIndication] Where AssetAddressIndicationUID = @InProgressIndictionUID and Revision = @Revision - 1

						Fetch Next From InProgress into @InProgressIndictionUID

					END

					Set @IndicationPassNo = 2
								
				END



				If @IsTraditional = 1 AND @IsFoot = 1
				BEGIN
				
					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixTR_Foot

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixTR_Foot

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixTR_Foot --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'TR' --EquipmentModeType
						,@TRFeetOfMainFoot
						,@TRNumberOfServices
						,@FootHours
						,'F' --SurveyMode
					)

				END


				IF @IsTraditional = 1 AND @IsMobile = 1
				BEGIN

					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixTR_Mobile

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixTR_Mobile

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixTR_Mobile --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'TR' --EquipmentModeType
						,@TRFeetOfMainMobile
						,0 --EstimatedService
						,@MobileHours
						,'M' --SurveyMode
					)


				END

				IF @IsPicarro = 1 AND @IsFOV = 1 
				BEGIN

					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixPIC_FOV_Foot

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixPIC_FOV_Foot

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixPIC_FOV_Foot --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'PIC_FOV' --EquipmentModeType
						,@FOVFeetOfMainFoot
						,@FOVNumberOfServices
						,@FOVHours
						,'F' --SurveyMode
					)
					
				END

				IF @IsPicarro = 1 AND @IsLisa = 1 and @IsLisaFoot = 1
				BEGIN

					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixPIC_LISA_Foot

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixPIC_LISA_Foot

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixPIC_LISA_Foot --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'PIC_LISA_Foot' --EquipmentModeType
						,@LisaFeetOfMainFoot
						,@LisaNumberOfServices
						,@LisaHours
						,'F' --SurveyMode
					)
					
				END


				IF @IsPicarro = 1 AND @IsLisa = 1 and @IsLisaMobile = 1
				BEGIN

					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixPIC_LISA_Mobile

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixPIC_LISA_Mobile

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixPIC_LISA_Mobile --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'PIC_LISA_Mobile' --EquipmentModeType
						,@LisaFeetOfMainMoble
						,0
						,@LisaHours
						,'M' --SurveyMode
					)
					
				END

				IF @IsPicarro = 1 AND @IsGap = 1 and @IsGapFoot = 1
				BEGIN

					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixPIC_GAP_Foot

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixPIC_GAP_Foot

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixPIC_GAP_Foot --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'PIC_GAP_Foot' --EquipmentModeType
						,@GapFeetOfMainFoot
						,@GapNumberOfServices
						,@GapHours
						,'F' --SurveyMode
					)
					
				END

				IF @IsPicarro = 1 AND @IsGap = 1 and @IsGapMobile = 1
				BEGIN

					Select @Revision = Count(*) from  [dbo].[tInspectionService] Where InspectionServicesUID = @TaskOutUID + @UIDSufixPIC_GAP_Mobile

					Update [dbo].[tInspectionService] set ActiveFlag = 0 Where InspectionServicesUID = @TaskOutUID  + @UIDSufixPIC_GAP_Mobile

					Insert Into [dbo].[tInspectionService]
					( 
						InspectionServicesUID,
						MasterLeakLogUID,
						MapGridUID,
						InspectionRequestUID,
						InspectionEquipmentUID,
						ProjectID,
						SourceID,
						CreatedUserUID,
						ModifiedUserUID,
						SrcDTLT,
						Revision,
						ActiveFlag,
						StatusType,
						WindSpeedStartUID,
						WindSpeedMidUID,
						EquipmentModeType,
						EstimatedFeet,
						EstimatedServices,
						EstimatedHours,
						SurveyMode
					)
					Values
					(
						 @TaskOutUID + @UIDSufixPIC_GAP_Mobile --InspectionServicesUID
						,@MasterLeakLogUID	-- MasterLeakLogUID
						,@MapGridUID
						,@InspectionRequestUID
						,@EquipmentUID
						,1 --ProjectID
						,@SourceID
						,@UserUID
						,@UserUID
						,@SrcDTLT
						,@Revision
						,1 --ActiveFlag
						,'Active' --StatusType
						,@WindSpeedStartUID
						,@WindSpeedMidUID
						,'PIC_GAP_Mobile' --EquipmentModeType
						,@GapFeetOfMainMoble
						,0
						,@GapHours
						,'M' --SurveyMode
					)


				END

				IF @IsPicarro = 1 
				BEGIN

					Select @CurrentInspectionType = InspectionType from tInspectionRequest where InspectionRequestUID = @InspectionRequestUID
					
					IF @CurrentInspectionType = 'TR'
					BEGIN

						Select @Revision = Count(*) from tInspectionRequest where InspectionRequestUID = @InspectionRequestUID

						Update tInspectionRequest set ActiveFlag = 0 Where InspectionRequestUID = @InspectionRequestUID

						Insert Into tInspectionRequest
						(
							InspectionRequestUID,
							MapGridUID,
							ProjectID,
							SourceID,
							CreatedUserUID,
							ModifiedUserUID,
							CreateDTLT,
							ModifiedDTLT,
							Comments,
							RevisionComments,
							Revision,
							ActiveFlag,
							StatusType,
							PipelineType,
							SurveyType,
							LsNtfNo,
							OrderNo,
							MapID,
							Wall,
							Plat,
							MWC,
							FLOC,
							InspectionFrequencyType,
							ComplianceDueDate,
							ScheduledStartDate,
							ScheduledCompleteDate,
							ReleaseDate,
							PrevServ,
							PrevFtOfMain,
							ReturnFlag,
							ReturnComments,
							FileCount,
							ApprovedFlag,
							ApprovedByUserUID,
							ApprovedDTLT,
							SubmittedFlag,
							SubmittedStatusType,
							SubmittedUserUID,
							SubmittedDTLT,
							ReturnedFlag,
							ReturnedFromPGEStatusType,
							RetrunedFromPGEDTLT,
							CompletedFlag,
							CompletedDTLT,
							InspectionType,
							ActualStartDate

						)
						Select 
							InspectionRequestUID,
							MapGridUID,
							ProjectID,
							SourceID,
							CreatedUserUID,
							@UserUID,
							CreateDTLT,
							getdate(),
							Comments,
							RevisionComments,
							@Revision, -- Revision,
							1, --ActiveFlag,
							StatusType,
							PipelineType,
							SurveyType,
							LsNtfNo,
							OrderNo,
							MapID,
							Wall,
							Plat,
							MWC,
							FLOC,
							InspectionFrequencyType,
							ComplianceDueDate,
							ScheduledStartDate,
							ScheduledCompleteDate,
							ReleaseDate,
							PrevServ,
							PrevFtOfMain,
							ReturnFlag,
							ReturnComments,
							FileCount,
							ApprovedFlag,
							ApprovedByUserUID,
							ApprovedDTLT,
							SubmittedFlag,
							SubmittedStatusType,
							SubmittedUserUID,
							SubmittedDTLT,
							ReturnedFlag,
							ReturnedFromPGEStatusType,
							RetrunedFromPGEDTLT,
							CompletedFlag,
							CompletedDTLT,
							'PIC', --InspectionType,
							ActualStartDate
						from tInspectionRequest where InspectionRequestUID = @InspectionRequestUID and Revision = @Revision - 1

						Select @PICCount = Count(*) from [dbo].[tMapStampPicaro] where InspectionRequestUID = @InspectionRequestUID and ActiveFlag = 1

						If @PICCount < 3
						BEGIN

							While (3 - @PICCount - @InsertedPIC) > 0
							BEGIN

								select @NextID = IDENT_CURRENT('tMapStampPicaro') + 1

								Insert Into [dbo].[tMapStampPicaro]
								(
									MapStampPicaroUID,
									InspectionRequestUID,
									ProjectID,
									CreatedByUserUID,
									Seq
									
									
								)
								Values
								(
									[dbo].[CreateUID]('PICMapStamp', @NextID, 'System', getdate())
									,@InspectionRequestUID
									,1
									,'User_System_Automation'
									,@InsertedPIC + 1
								)

								Set @InsertedPIC = @InsertedPIC + 1

							END

						END








					END

				END





				--*/

				Fetch Next From objProcessingObj Into @ProcessingObjectID

			END
		
Close PlaceHolder
Deallocate PlaceHolder

Close objProcessingObj
Deallocate objProcessingObj

		
		

/*******************************************************

   Last thing we do
	Drop the table created in this proceedure

******************************************************/

Drop Table #JSON_Parse

SET NOCOUNT OFF
GO
PRINT N'Creating [dbo].[spTabletIR]...';


GO
CREATE Procedure spTabletIR
(
	@UserUID varchar(100)
)
AS

/*

EXEC spTabletIR 'User_57590026_20160822135947_Postman'

*/

--Declare @UserUID varchar(100) = 'User_57590026_20160822135947_Postman'


Select *  Into #TempIR From
(SELECT
 ir.InspectionRequestUID
,wc.Division
,wc.WorkCenter
,ir.SurveyType
,Replace(ir.MapID, '-', '/') as [MapPlat]
,ir.LsNtfNo AS [Notification ID]
,ir.ComplianceDueDate
,ir.ReleaseDate AS [SAP Released]
,CAST(YEAR(ir.ComplianceDueDate) AS CHAR(4)) + ' - ' + DATENAME(mm, ir.ComplianceDueDate) AS ComplianceYearMonth
, awq.AssignedUserUID
,CASE WHEN u.UserName is NULL THEN 99 else 0 END SortOrder
FROM [dbo].[rgMapGridLog] mg
INNER JOIN [dbo].[tInspectionRequest] ir ON ir.MapGridUID = mg.MapGridUID
INNER JOIN [dbo].[rWorkCenter] wc on wc.WorkCenterAbbreviationFLOC = mg.FuncLocMWC
LEFT JOIN (SELECT * From  [dbo].[tAssignedWorkQueue] where ActiveFlag = 1) awq ON awq.AssignedInspectionRequestUID = ir.InspectionRequestUID
Left Join (Select * from UserTb where UserActiveFlag = 1 and ISNULL(UserInActiveFlag, 0) = 0 and UserUID = @UserUID) u on u.UserUID = awq.AssignedUserUID
WHERE ir.StatusType <> 'Completed') IR

Update t set sortOrder = 50
From #TempIR t
Join 
(
select u.UserUID, wc.WorkCenter, wc.WorkCenterAbbreviation, wc.WorkCenterAbbreviationFLOC from 
(SELECT * From  UserTb where UserActiveFlag = 1 and ISNULL(UserInActiveFlag, 0) = 0 and UserUID = @UserUID) u
Join [dbo].[xReportingGroupEmployeexRef] xRG on xrg.UserUID = u.UserUID
Join [dbo].[rReportingGroup] rg on rg.ReportingGroupUID = xrg.ReportingGroupUID
Join [dbo].[xReportingGroupAndWorkcenterxRef] xWC on xWC.ReportingGroupUID = rg.ReportingGroupUID
Join [dbo].[rWorkCenter] wc on wc.WorkCenterUID = xWC.WorkCenterUID
) U on t.WorkCenter = u.WorkCenter


select * from #TempIR order by SortOrder, WorkCenter

Drop Table #TempIR
GO
PRINT N'Creating [dbo].[rFilter].[rFilterID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF000 Filter Data Feed from PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'rFilter', @level2type = N'COLUMN', @level2name = N'rFilterID';


GO
PRINT N'Creating [dbo].[rgMapGridLog].[rgMapGridID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF001 Data Feed from PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'rgMapGridLog', @level2type = N'COLUMN', @level2name = N'rgMapGridID';


GO
PRINT N'Creating [dbo].[rMeter].[rMeterID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF000 Meter Data Feed from PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'rMeter', @level2type = N'COLUMN', @level2name = N'rMeterID';


GO
PRINT N'Creating [dbo].[rRegulator].[rRegulatorID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF000 Regulator Data Feed from PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'rRegulator', @level2type = N'COLUMN', @level2name = N'rRegulatorID';


GO
PRINT N'Creating [dbo].[rWorkCenter].[rWorkCenterID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF Reference for Work Center and Divisions for PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'rWorkCenter', @level2type = N'COLUMN', @level2name = N'rWorkCenterID';


GO
PRINT N'Creating [dbo].[tEquipmentLog].[tEquipmentLogID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF003 Data Feed from PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tEquipmentLog', @level2type = N'COLUMN', @level2name = N'tEquipmentLogID';


GO
PRINT N'Creating [dbo].[tEquipmentMRP].[ManufactureQuanity].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'Always 1', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tEquipmentMRP', @level2type = N'COLUMN', @level2name = N'ManufactureQuanity';


GO
PRINT N'Creating [dbo].[tgAsset].[MapGridUID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'MapGrid.MapGridsUID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tgAsset', @level2type = N'COLUMN', @level2name = N'MapGridUID';


GO
PRINT N'Creating [dbo].[tgAssetInspection].[AssetUID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'g_Asset.AssetUID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tgAssetInspection', @level2type = N'COLUMN', @level2name = N'AssetUID';


GO
PRINT N'Creating [dbo].[tgAssetInspection].[MasterLeakLogsUID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N't_MasterLeakLogs.MasterLeakLogsUID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tgAssetInspection', @level2type = N'COLUMN', @level2name = N'MasterLeakLogsUID';


GO
PRINT N'Creating [dbo].[tgAssetInspection].[MapGridUID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'g_MapGrids.MapGridUID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tgAssetInspection', @level2type = N'COLUMN', @level2name = N'MapGridUID';


GO
PRINT N'Creating [dbo].[tgAssetInspection].[InspectionRequestUID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N't_InspectionRequests.InspectionRequestUID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tgAssetInspection', @level2type = N'COLUMN', @level2name = N'InspectionRequestUID';


GO
PRINT N'Creating [dbo].[tgBreadcrumb].[ActivityUID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'g_Activity.ActivityUID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tgBreadcrumb', @level2type = N'COLUMN', @level2name = N'ActivityUID';


GO
PRINT N'Creating [dbo].[tInspectionRequest].[tInspectionRequestID].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'INF002 Data Feed from PGE', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tInspectionRequest', @level2type = N'COLUMN', @level2name = N'tInspectionRequestID';


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
